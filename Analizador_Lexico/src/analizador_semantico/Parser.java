package analizador_semantico;


//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Sat May 31 08:03:07 CST 2014
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.*;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Sat May 31 08:03:07 CST 2014
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\271\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\004\000\002\022\007\000\002\044\002" +
    "\000\002\022\006\000\002\023\005\000\002\023\003\000" +
    "\002\024\004\000\002\024\003\000\002\004\004\000\002" +
    "\004\003\000\002\025\012\000\002\025\007\000\002\025" +
    "\012\000\002\025\007\000\002\026\006\000\002\026\003" +
    "\000\002\005\005\000\002\006\004\000\002\006\004\000" +
    "\002\006\004\000\002\006\004\000\002\006\004\000\002" +
    "\006\004\000\002\006\004\000\002\006\004\000\002\006" +
    "\004\000\002\006\003\000\002\012\013\000\002\012\010" +
    "\000\002\013\010\000\002\014\014\000\002\015\011\000" +
    "\002\016\002\000\002\016\007\000\002\016\006\000\002" +
    "\017\004\000\002\017\004\000\002\017\004\000\002\017" +
    "\004\000\002\017\004\000\002\020\004\000\002\020\004" +
    "\000\002\020\005\000\002\021\002\000\002\021\003\000" +
    "\002\021\003\000\002\010\002\000\002\010\004\000\002" +
    "\011\003\000\002\011\004\000\002\032\003\000\002\032" +
    "\003\000\002\032\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\033\003\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\034\006\000\002" +
    "\034\007\000\002\035\003\000\002\036\007\000\002\037" +
    "\003\000\002\037\005\000\002\040\003\000\002\040\003" +
    "\000\002\040\003\000\002\007\006\000\002\007\007\000" +
    "\002\031\003\000\002\041\003\000\002\041\004\000\002" +
    "\041\004\000\002\041\004\000\002\041\004\000\002\041" +
    "\004\000\002\041\004\000\002\041\004\000\002\041\004" +
    "\000\002\041\004\000\002\041\004\000\002\041\004\000" +
    "\002\041\004\000\002\041\004\000\002\041\004\000\002" +
    "\041\004\000\002\041\004\000\002\041\004\000\002\041" +
    "\004\000\002\041\004\000\002\041\004\000\002\041\004" +
    "\000\002\041\004\000\002\041\004\000\002\041\004\000" +
    "\002\041\004\000\002\041\004\000\002\041\004\000\002" +
    "\041\004\000\002\041\004\000\002\041\004\000\002\041" +
    "\004\000\002\041\004\000\002\041\004\000\002\041\004" +
    "\000\002\041\004\000\002\041\004\000\002\041\004\000" +
    "\002\041\004\000\002\041\004\000\002\041\004\000\002" +
    "\041\004\000\002\041\004\000\002\041\004\000\002\041" +
    "\004\000\002\041\004\000\002\041\004\000\002\041\004" +
    "\000\002\041\004\000\002\041\004\000\002\041\004\000" +
    "\002\041\004\000\002\041\004\000\002\041\004\000\002" +
    "\041\004\000\002\041\004\000\002\041\004\000\002\041" +
    "\004\000\002\041\004\000\002\041\004\000\002\041\004" +
    "\000\002\041\004\000\002\041\004\000\002\041\004\000" +
    "\002\041\004\000\002\041\004\000\002\041\004\000\002" +
    "\041\004\000\002\041\004\000\002\041\004\000\002\041" +
    "\004\000\002\041\004\000\002\041\004\000\002\041\004" +
    "\000\002\041\004\000\002\041\004\000\002\041\004\000" +
    "\002\041\004\000\002\041\004\000\002\041\004\000\002" +
    "\041\004\000\002\041\004\000\002\041\004\000\002\043" +
    "\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\264\000\020\004\011\005\016\007\004\013\012\015" +
    "\015\016\005\017\017\001\002\000\006\003\uffad\121\uffad" +
    "\001\002\000\006\003\uffaa\121\uffaa\001\002\000\020\004" +
    "\011\005\016\007\004\013\012\015\015\016\005\017\017" +
    "\001\002\000\004\002\000\001\002\000\022\002\uff49\004" +
    "\011\005\016\007\004\013\012\015\015\016\005\017\017" +
    "\001\002\000\006\003\uffae\121\uffae\001\002\000\004\121" +
    "\247\001\002\000\006\003\021\121\022\001\002\000\004" +
    "\002\020\001\002\000\006\003\uffab\121\uffab\001\002\000" +
    "\006\003\uffac\121\uffac\001\002\000\006\003\uffa9\121\uffa9" +
    "\001\002\000\004\002\001\001\002\000\004\052\ufffc\001" +
    "\002\000\012\052\uff49\053\023\105\024\107\uff49\001\002" +
    "\000\004\121\243\001\002\000\020\004\011\005\016\007" +
    "\004\015\015\016\005\017\017\106\044\001\002\000\006" +
    "\052\uff49\107\027\001\002\000\006\052\ufff9\107\ufff9\001" +
    "\002\000\022\122\043\123\040\124\034\125\037\126\036" +
    "\127\041\130\035\131\033\001\002\000\004\052\032\001" +
    "\002\000\004\052\ufff7\001\002\000\050\004\ufffd\005\ufffd" +
    "\007\ufffd\010\ufffd\012\ufffd\013\ufffd\014\ufffd\015\ufffd\016" +
    "\ufffd\017\ufffd\020\ufffd\022\ufffd\025\ufffd\026\ufffd\027\ufffd" +
    "\030\ufffd\035\ufffd\047\ufffd\121\ufffd\001\002\000\010\052" +
    "\uffaf\053\uffaf\106\uffaf\001\002\000\010\052\uffb4\053\uffb4" +
    "\106\uffb4\001\002\000\010\052\uffb0\053\uffb0\106\uffb0\001" +
    "\002\000\010\052\uffb2\053\uffb2\106\uffb2\001\002\000\010" +
    "\052\uffb3\053\uffb3\106\uffb3\001\002\000\010\052\uffb5\053" +
    "\uffb5\106\uffb5\001\002\000\010\052\uffb1\053\uffb1\106\uffb1" +
    "\001\002\000\004\052\ufff8\001\002\000\010\052\uffb6\053" +
    "\uffb6\106\uffb6\001\002\000\004\046\053\001\002\000\004" +
    "\121\046\001\002\000\006\053\047\106\uff49\001\002\000" +
    "\016\004\011\005\016\007\004\015\015\016\005\017\017" +
    "\001\002\000\004\106\052\001\002\000\004\106\uffef\001" +
    "\002\000\004\046\053\001\002\000\046\004\uff49\005\uff49" +
    "\007\uff49\010\uffd0\012\uffd0\014\uffd0\015\uff49\016\uff49\017" +
    "\uff49\020\uffd0\022\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0" +
    "\035\uffd0\047\uffd0\121\uffd0\001\002\000\022\002\ufff4\004" +
    "\ufff4\005\ufff4\007\ufff4\013\ufff4\015\ufff4\016\ufff4\017\ufff4" +
    "\001\002\000\032\010\077\012\073\014\072\020\103\022" +
    "\070\025\107\026\075\027\067\030\100\035\065\047\071" +
    "\121\074\001\002\000\016\004\011\005\016\007\004\015" +
    "\015\016\005\017\017\001\002\000\046\004\011\005\016" +
    "\007\004\010\uffce\012\uffce\014\uffce\015\015\016\005\017" +
    "\017\020\uffce\022\uffce\025\uffce\026\uffce\027\uffce\030\uffce" +
    "\035\uffce\047\uffce\121\uffce\001\002\000\032\010\uffcf\012" +
    "\uffcf\014\uffcf\020\uffcf\022\uffcf\025\uffcf\026\uffcf\027\uffcf" +
    "\030\uffcf\035\uffcf\047\uffcf\121\uffcf\001\002\000\006\003" +
    "\021\121\062\001\002\000\010\052\uff49\053\023\107\uff49" +
    "\001\002\000\032\010\uffcd\012\uffcd\014\uffcd\020\uffcd\022" +
    "\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd\035\uffcd\047\uffcd" +
    "\121\uffcd\001\002\000\032\010\077\012\073\014\072\020" +
    "\103\022\070\025\107\026\075\027\067\030\100\035\065" +
    "\047\071\121\074\001\002\000\040\010\uff9d\012\uff9d\014" +
    "\uff9d\020\uff9d\022\uff9d\025\uff9d\026\uff9d\027\uff9d\030\uff9d" +
    "\035\uff9d\047\uff9d\052\uff9d\053\uff9d\106\uff9d\121\uff9d\001" +
    "\002\000\022\002\uffee\004\uffee\005\uffee\007\uffee\013\uffee" +
    "\015\uffee\016\uffee\017\uffee\001\002\000\004\105\227\001" +
    "\002\000\004\052\226\001\002\000\054\002\uffe4\004\uffe4" +
    "\005\uffe4\006\uffe4\007\uffe4\010\uffe4\012\uffe4\013\uffe4\014" +
    "\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4\022\uffe4\025\uffe4" +
    "\026\uffe4\027\uffe4\030\uffe4\035\uffe4\047\uffe4\121\uffe4\001" +
    "\002\000\004\105\221\001\002\000\026\052\uffd3\121\216" +
    "\122\043\123\040\124\034\125\037\126\036\127\041\130" +
    "\035\131\033\001\002\000\004\105\207\001\002\000\004" +
    "\105\156\001\002\000\032\010\077\012\073\014\072\020" +
    "\103\022\070\025\107\026\075\027\067\030\100\035\065" +
    "\047\071\121\074\001\002\000\004\105\145\001\002\000" +
    "\004\105\133\001\002\000\032\010\077\012\073\014\072" +
    "\020\103\022\070\025\107\026\075\027\067\030\100\035" +
    "\065\047\071\121\074\001\002\000\032\010\077\012\073" +
    "\014\072\020\103\022\070\025\107\026\075\027\067\030" +
    "\100\035\065\047\071\121\074\001\002\000\004\052\130" +
    "\001\002\000\032\010\077\012\073\014\072\020\103\022" +
    "\070\025\107\026\075\027\067\030\100\035\065\047\071" +
    "\121\074\001\002\000\032\010\077\012\073\014\072\020" +
    "\103\022\070\025\107\026\075\027\067\030\100\035\065" +
    "\047\071\121\074\001\002\000\032\010\077\012\073\014" +
    "\072\020\103\022\070\025\107\026\075\027\067\030\100" +
    "\035\065\047\071\121\074\001\002\000\004\105\114\001" +
    "\002\000\032\010\077\012\073\014\072\020\103\022\070" +
    "\025\107\026\075\027\067\030\100\035\065\047\071\121" +
    "\074\001\002\000\032\010\077\012\073\014\072\020\103" +
    "\022\070\025\107\026\075\027\067\030\100\035\065\047" +
    "\071\121\074\001\002\000\054\002\uffec\004\uffec\005\uffec" +
    "\006\uffec\007\uffec\010\uffec\012\uffec\013\uffec\014\uffec\015" +
    "\uffec\016\uffec\017\uffec\020\uffec\022\uffec\025\uffec\026\uffec" +
    "\027\uffec\030\uffec\035\uffec\047\uffec\121\uffec\001\002\000" +
    "\054\002\uffe6\004\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6" +
    "\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6\020" +
    "\uffe6\022\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6\035\uffe6" +
    "\047\uffe6\121\uffe6\001\002\000\004\035\065\001\002\000" +
    "\004\052\116\001\002\000\004\035\065\001\002\000\004" +
    "\052\120\001\002\000\004\035\065\001\002\000\004\106" +
    "\122\001\002\000\004\046\123\001\002\000\032\010\077" +
    "\012\073\014\072\020\103\022\070\025\107\026\075\027" +
    "\067\030\100\035\065\047\071\121\074\001\002\000\032" +
    "\010\uffe0\012\uffe0\014\uffe0\020\uffe0\022\uffe0\025\uffe0\026" +
    "\uffe0\027\uffe0\030\uffe0\035\uffe0\047\uffe0\121\uffe0\001\002" +
    "\000\054\002\uffe5\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010" +
    "\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5" +
    "\020\uffe5\022\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5\035" +
    "\uffe5\047\uffe5\121\uffe5\001\002\000\054\002\uffe8\004\uffe8" +
    "\005\uffe8\006\uffe8\007\uffe8\010\uffe8\012\uffe8\013\uffe8\014" +
    "\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\022\uffe8\025\uffe8" +
    "\026\uffe8\027\uffe8\030\uffe8\035\uffe8\047\uffe8\121\uffe8\001" +
    "\002\000\054\002\uffed\004\uffed\005\uffed\006\uffed\007\uffed" +
    "\010\uffed\012\uffed\013\uffed\014\uffed\015\uffed\016\uffed\017" +
    "\uffed\020\uffed\022\uffed\025\uffed\026\uffed\027\uffed\030\uffed" +
    "\035\uffed\047\uffed\121\uffed\001\002\000\032\010\uffd5\012" +
    "\uffd5\014\uffd5\020\uffd5\022\uffd5\025\uffd5\026\uffd5\027\uffd5" +
    "\030\uffd5\035\uffd5\047\uffd5\121\uffd5\001\002\000\054\002" +
    "\uffe7\004\uffe7\005\uffe7\006\uffe7\007\uffe7\010\uffe7\012\uffe7" +
    "\013\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7\022" +
    "\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7\035\uffe7\047\uffe7" +
    "\121\uffe7\001\002\000\054\002\uffe9\004\uffe9\005\uffe9\006" +
    "\uffe9\007\uffe9\010\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9" +
    "\016\uffe9\017\uffe9\020\uffe9\022\uffe9\025\uffe9\026\uffe9\027" +
    "\uffe9\030\uffe9\035\uffe9\047\uffe9\121\uffe9\001\002\000\026" +
    "\035\065\121\137\122\043\123\040\124\034\125\037\126" +
    "\036\127\041\130\035\131\033\001\002\000\004\106\143" +
    "\001\002\000\006\053\141\106\uffa4\001\002\000\006\053" +
    "\uffa2\106\uffa2\001\002\000\006\053\uffa1\106\uffa1\001\002" +
    "\000\006\053\uffa0\106\uffa0\001\002\000\026\035\065\121" +
    "\137\122\043\123\040\124\034\125\037\126\036\127\041" +
    "\130\035\131\033\001\002\000\004\106\uffa3\001\002\000" +
    "\004\052\144\001\002\000\032\010\uffa5\012\uffa5\014\uffa5" +
    "\020\uffa5\022\uffa5\025\uffa5\026\uffa5\027\uffa5\030\uffa5\035" +
    "\uffa5\047\uffa5\121\uffa5\001\002\000\004\035\065\001\002" +
    "\000\004\106\147\001\002\000\004\046\150\001\002\000" +
    "\032\010\077\012\073\014\072\020\103\022\070\025\107" +
    "\026\075\027\067\030\100\035\065\047\071\121\074\001" +
    "\002\000\034\006\152\010\uffe2\012\uffe2\014\uffe2\020\uffe2" +
    "\022\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\035\uffe2\047" +
    "\uffe2\121\uffe2\001\002\000\004\046\153\001\002\000\032" +
    "\010\077\012\073\014\072\020\103\022\070\025\107\026" +
    "\075\027\067\030\100\035\065\047\071\121\074\001\002" +
    "\000\032\010\uffe3\012\uffe3\014\uffe3\020\uffe3\022\uffe3\025" +
    "\uffe3\026\uffe3\027\uffe3\030\uffe3\035\uffe3\047\uffe3\121\uffe3" +
    "\001\002\000\054\002\uffeb\004\uffeb\005\uffeb\006\uffeb\007" +
    "\uffeb\010\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb" +
    "\017\uffeb\020\uffeb\022\uffeb\025\uffeb\026\uffeb\027\uffeb\030" +
    "\uffeb\035\uffeb\047\uffeb\121\uffeb\001\002\000\004\035\065" +
    "\001\002\000\004\106\160\001\002\000\004\046\161\001" +
    "\002\000\010\021\163\023\162\047\uffde\001\002\000\004" +
    "\057\204\001\002\000\004\122\166\001\002\000\004\047" +
    "\165\001\002\000\032\010\uffdf\012\uffdf\014\uffdf\020\uffdf" +
    "\022\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf\035\uffdf\047" +
    "\uffdf\121\uffdf\001\002\000\004\057\167\001\002\000\014" +
    "\020\175\027\067\030\100\035\065\121\074\001\002\000" +
    "\010\021\163\023\162\047\uffde\001\002\000\014\020\175" +
    "\027\067\030\100\035\065\121\074\001\002\000\014\020" +
    "\175\027\067\030\100\035\065\121\074\001\002\000\014" +
    "\020\175\027\067\030\100\035\065\121\074\001\002\000" +
    "\014\020\175\027\067\030\100\035\065\121\074\001\002" +
    "\000\004\052\176\001\002\000\010\021\uffd7\023\uffd7\047" +
    "\uffd7\001\002\000\010\021\uffdb\023\uffdb\047\uffdb\001\002" +
    "\000\010\021\uffd8\023\uffd8\047\uffd8\001\002\000\010\021" +
    "\uffd9\023\uffd9\047\uffd9\001\002\000\010\021\uffda\023\uffda" +
    "\047\uffda\001\002\000\004\047\uffdd\001\002\000\014\020" +
    "\175\027\067\030\100\035\065\121\074\001\002\000\010" +
    "\021\163\023\162\047\uffde\001\002\000\004\047\uffdc\001" +
    "\002\000\030\035\065\106\211\121\137\122\043\123\040" +
    "\124\034\125\037\126\036\127\041\130\035\131\033\001" +
    "\002\000\004\106\213\001\002\000\004\052\212\001\002" +
    "\000\032\010\uff9f\012\uff9f\014\uff9f\020\uff9f\022\uff9f\025" +
    "\uff9f\026\uff9f\027\uff9f\030\uff9f\035\uff9f\047\uff9f\121\uff9f" +
    "\001\002\000\004\052\214\001\002\000\032\010\uff9e\012" +
    "\uff9e\014\uff9e\020\uff9e\022\uff9e\025\uff9e\026\uff9e\027\uff9e" +
    "\030\uff9e\035\uff9e\047\uff9e\121\uff9e\001\002\000\004\052" +
    "\220\001\002\000\004\052\uffd1\001\002\000\004\052\uffd2" +
    "\001\002\000\032\010\uffd4\012\uffd4\014\uffd4\020\uffd4\022" +
    "\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4\035\uffd4\047\uffd4" +
    "\121\uffd4\001\002\000\004\035\065\001\002\000\004\106" +
    "\223\001\002\000\004\046\224\001\002\000\032\010\077" +
    "\012\073\014\072\020\103\022\070\025\107\026\075\027" +
    "\067\030\100\035\065\047\071\121\074\001\002\000\032" +
    "\010\uffe1\012\uffe1\014\uffe1\020\uffe1\022\uffe1\025\uffe1\026" +
    "\uffe1\027\uffe1\030\uffe1\035\uffe1\047\uffe1\121\uffe1\001\002" +
    "\000\032\010\uffd6\012\uffd6\014\uffd6\020\uffd6\022\uffd6\025" +
    "\uffd6\026\uffd6\027\uffd6\030\uffd6\035\uffd6\047\uffd6\121\uffd6" +
    "\001\002\000\024\106\231\122\043\123\040\124\034\125" +
    "\037\126\036\127\041\130\035\131\033\001\002\000\004" +
    "\106\234\001\002\000\004\052\233\001\002\000\004\106" +
    "\uffa6\001\002\000\032\010\uffa8\012\uffa8\014\uffa8\020\uffa8" +
    "\022\uffa8\025\uffa8\026\uffa8\027\uffa8\030\uffa8\035\uffa8\047" +
    "\uffa8\121\uffa8\001\002\000\004\052\235\001\002\000\032" +
    "\010\uffa7\012\uffa7\014\uffa7\020\uffa7\022\uffa7\025\uffa7\026" +
    "\uffa7\027\uffa7\030\uffa7\035\uffa7\047\uffa7\121\uffa7\001\002" +
    "\000\054\002\uffea\004\uffea\005\uffea\006\uffea\007\uffea\010" +
    "\uffea\012\uffea\013\uffea\014\uffea\015\uffea\016\uffea\017\uffea" +
    "\020\uffea\022\uffea\025\uffea\026\uffea\027\uffea\030\uffea\035" +
    "\uffea\047\uffea\121\uffea\001\002\000\004\121\240\001\002" +
    "\000\006\053\047\106\uff49\001\002\000\004\106\ufff0\001" +
    "\002\000\022\002\ufff3\004\ufff3\005\ufff3\007\ufff3\013\ufff3" +
    "\015\ufff3\016\ufff3\017\ufff3\001\002\000\010\052\uff49\053" +
    "\023\107\uff49\001\002\000\006\052\ufffa\107\ufffa\001\002" +
    "\000\004\052\246\001\002\000\050\004\ufffb\005\ufffb\007" +
    "\ufffb\010\ufffb\012\ufffb\013\ufffb\014\ufffb\015\ufffb\016\ufffb" +
    "\017\ufffb\020\ufffb\022\ufffb\025\ufffb\026\ufffb\027\ufffb\030" +
    "\ufffb\035\ufffb\047\ufffb\121\ufffb\001\002\000\004\105\250" +
    "\001\002\000\020\004\011\005\016\007\004\015\015\016" +
    "\005\017\017\106\251\001\002\000\004\046\053\001\002" +
    "\000\004\121\253\001\002\000\006\053\047\106\uff49\001" +
    "\002\000\004\106\255\001\002\000\004\046\053\001\002" +
    "\000\022\002\ufff2\004\ufff2\005\ufff2\007\ufff2\013\ufff2\015" +
    "\ufff2\016\ufff2\017\ufff2\001\002\000\022\002\ufff1\004\ufff1" +
    "\005\ufff1\007\ufff1\013\ufff1\015\ufff1\016\ufff1\017\ufff1\001" +
    "\002\000\022\002\uff49\004\011\005\016\007\004\013\012" +
    "\015\015\016\005\017\017\001\002\000\004\121\264\001" +
    "\002\000\004\002\ufffe\001\002\000\004\002\ufff5\001\002" +
    "\000\004\105\024\001\002\000\004\002\ufff6\001\002\000" +
    "\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\264\000\014\002\013\003\006\022\005\025\007\030" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\003\265\022\005\025\007\030\012\001\001\000\002\001" +
    "\001\000\012\004\261\025\257\030\260\043\262\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\044\244\001\001\000" +
    "\006\023\024\043\025\001\001\000\002\001\001\000\004" +
    "\030\044\001\001\000\006\024\027\043\030\001\001\000" +
    "\002\001\001\000\004\027\041\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\241\001\001\000\002" +
    "\001\001\000\006\026\047\043\050\001\001\000\004\030" +
    "\236\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\053\001\001\000\006\010\054\043\055\001\001\000" +
    "\002\001\001\000\026\006\065\007\075\012\100\013\104" +
    "\014\101\015\107\020\105\031\063\034\103\036\110\001" +
    "\001\000\010\011\057\022\056\030\060\001\001\000\010" +
    "\011\062\022\056\030\060\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\023\024\043\025\001\001\000\002" +
    "\001\001\000\026\006\235\007\075\012\100\013\104\014" +
    "\101\015\107\020\105\031\063\034\103\036\110\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\021\214\027\216\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\006\154\007\075\012\100\013\104\014\101" +
    "\015\107\020\105\031\063\034\103\036\110\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\006\131\007\075" +
    "\012\100\013\104\014\101\015\107\020\105\031\063\034" +
    "\103\036\110\001\001\000\026\006\130\007\075\012\100" +
    "\013\104\014\101\015\107\020\105\031\063\034\103\036" +
    "\110\001\001\000\002\001\001\000\026\006\126\007\075" +
    "\012\100\013\104\014\101\015\107\020\105\031\063\034" +
    "\103\036\110\001\001\000\026\006\125\007\075\012\100" +
    "\013\104\014\101\015\107\020\105\031\063\034\103\036" +
    "\110\001\001\000\026\006\124\007\075\012\100\013\104" +
    "\014\101\015\107\020\105\031\063\034\103\036\110\001" +
    "\001\000\002\001\001\000\026\006\112\007\075\012\100" +
    "\013\104\014\101\015\107\020\105\031\063\034\103\036" +
    "\110\001\001\000\026\006\111\007\075\012\100\013\104" +
    "\014\101\015\107\020\105\031\063\034\103\036\110\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\031\114" +
    "\001\001\000\002\001\001\000\004\031\116\001\001\000" +
    "\002\001\001\000\004\031\120\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\006\123\007\075\012\100\013" +
    "\104\014\101\015\107\020\105\031\063\034\103\036\110" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\027\137\031\135\037\133\040" +
    "\134\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\027" +
    "\137\031\135\037\141\040\134\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\031\145\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\006\150" +
    "\007\075\012\100\013\104\014\101\015\107\020\105\031" +
    "\063\034\103\036\110\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\006\153\007\075\012\100\013\104\014" +
    "\101\015\107\020\105\031\063\034\103\036\110\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\031\156\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\163" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\007\171" +
    "\017\167\031\172\034\173\036\170\001\001\000\004\016" +
    "\202\001\001\000\014\007\171\017\201\031\172\034\173" +
    "\036\170\001\001\000\014\007\171\017\200\031\172\034" +
    "\173\036\170\001\001\000\014\007\171\017\177\031\172" +
    "\034\173\036\170\001\001\000\014\007\171\017\176\031" +
    "\172\034\173\036\170\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\007\171" +
    "\017\204\031\172\034\173\036\170\001\001\000\004\016" +
    "\205\001\001\000\002\001\001\000\012\027\137\031\135" +
    "\037\207\040\134\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\031\221\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\006\224\007\075\012\100\013" +
    "\104\014\101\015\107\020\105\031\063\034\103\036\110" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\027" +
    "\231\035\227\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\026\240\043\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\023\243\043\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\030\251\001\001\000\004\005\256\001\001\000\002" +
    "\001\001\000\006\026\253\043\050\001\001\000\002\001" +
    "\001\000\004\005\255\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\004\264\025\257\030\260\043\262\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
  public static int errors = 0;
  public static int warnings = 0;
  public static analizador_lexico.Scanner s;
  


  public static void main(String argv[]) {

    for (int i = 0; i < argv.length; i++) {
      try {
	  s = new analizador_lexico.Scanner(new FileReader(argv[i]));
        Parser p = new Parser(s);
        p.parse();
        System.out.println("Number of errors = " + errors + ".");
       

      }
      catch (Exception e) {
        e.printStackTrace(System.out);
        System.exit(1);
      }
    }
  }
    protected int error_sync_size () {
        System.out.println(":error_sync_size was called.");
        return 1; // not recommended by the CUP manual
}
  public void report_error(String message, Object info) {
    if (info instanceof String){
	errors++; 
      System.err.println("  "+ errors + "==> " + info + " "+ message + 
					"\n       Parsing resumed from 2nd token before" + s.current_lexeme()+"\n");
    }
    else {
    	StringBuffer m = new StringBuffer("Error ");
    	if (info instanceof java_cup.runtime.Symbol) 
     	   m.append( "("+info.toString()+")" );     
    	m.append(" : "+message);   
    	System.err.println(m);
    }
  }
   
  public void report_fatal_error(String message, Object info) {
    report_error(message, info);
    throw new RuntimeException("Fatal Syntax Error");
  }



}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {


	


  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= estructura EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // estructura ::= statement_globales 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estructura",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // statement_globales ::= declaracion_identificador statement_globales 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_globales",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statement_globales ::= declaracion_funciones statement_funciones 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_globales",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaracion_identificador ::= type IDENTIFIER varios_identificadores valor_inicial SEMICOLON 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_identificador",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$0 ::= 
            {
              String RESULT =null;
System.out.println("Error Semantico: Declaracion Identificador");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaracion_identificador ::= type error NT$0 SEMICOLON 
            {
              String RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_identificador",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // varios_identificadores ::= COMMA IDENTIFIER varios_identificadores 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varios_identificadores",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // varios_identificadores ::= epsilon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varios_identificadores",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // valor_inicial ::= EQ literal 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_inicial",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // valor_inicial ::= epsilon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_inicial",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement_funciones ::= declaracion_funciones statement_funciones 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_funciones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statement_funciones ::= epsilon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_funciones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaracion_funciones ::= type IDENTIFIER LPAREN type IDENTIFIER varios_tipos RPAREN cuerpo_funcion 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_funciones",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declaracion_funciones ::= type IDENTIFIER LPAREN RPAREN cuerpo_funcion 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_funciones",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaracion_funciones ::= VOID IDENTIFIER LPAREN type IDENTIFIER varios_tipos RPAREN cuerpo_funcion 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_funciones",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declaracion_funciones ::= VOID IDENTIFIER LPAREN RPAREN cuerpo_funcion 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_funciones",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // varios_tipos ::= COMMA type IDENTIFIER varios_tipos 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varios_tipos",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // varios_tipos ::= epsilon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varios_tipos",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // cuerpo_funcion ::= LBRACE statement_variables_locales_inicio cuerpo_funcion_aux 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_funcion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // cuerpo_funcion_aux ::= estructura_read cuerpo_funcion_aux 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_funcion_aux",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // cuerpo_funcion_aux ::= estructura_write cuerpo_funcion_aux 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_funcion_aux",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // cuerpo_funcion_aux ::= llamado_funcion cuerpo_funcion_aux 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_funcion_aux",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // cuerpo_funcion_aux ::= expresiones cuerpo_funcion_aux 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_funcion_aux",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // cuerpo_funcion_aux ::= statement_if cuerpo_funcion_aux 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_funcion_aux",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // cuerpo_funcion_aux ::= statement_while cuerpo_funcion_aux 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_funcion_aux",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // cuerpo_funcion_aux ::= statement_for cuerpo_funcion_aux 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_funcion_aux",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // cuerpo_funcion_aux ::= statement_switch cuerpo_funcion_aux 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_funcion_aux",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // cuerpo_funcion_aux ::= otras_palabras cuerpo_funcion_aux 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_funcion_aux",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // cuerpo_funcion_aux ::= RBRACE 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_funcion_aux",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statement_if ::= IF LPAREN expresiones RPAREN LBRACE cuerpo_funcion_aux ELSE LBRACE cuerpo_funcion_aux 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_if",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statement_if ::= IF LPAREN expresiones RPAREN LBRACE cuerpo_funcion_aux 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_if",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statement_while ::= WHILE LPAREN expresiones RPAREN LBRACE cuerpo_funcion_aux 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_while",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statement_for ::= FOR LPAREN expresiones SEMICOLON expresiones SEMICOLON expresiones RPAREN LBRACE cuerpo_funcion_aux 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_for",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statement_switch ::= SWITCH LPAREN expresiones RPAREN LBRACE statement_switch_aux RBRACE 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_switch",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // statement_switch_aux ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_switch_aux",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // statement_switch_aux ::= CASE INTEGER_LITERAL COLON statement_cuerpo_case statement_switch_aux 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_switch_aux",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // statement_switch_aux ::= DEFAULT COLON statement_cuerpo_case statement_switch_aux 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_switch_aux",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // statement_cuerpo_case ::= estructura_read statement_cuerpo_case 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_cuerpo_case",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // statement_cuerpo_case ::= estructura_write statement_cuerpo_case 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_cuerpo_case",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // statement_cuerpo_case ::= llamado_funcion statement_cuerpo_case 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_cuerpo_case",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // statement_cuerpo_case ::= expresiones statement_cuerpo_case 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_cuerpo_case",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // statement_cuerpo_case ::= BREAK SEMICOLON 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_cuerpo_case",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // otras_palabras ::= CONTINUE SEMICOLON 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("otras_palabras",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // otras_palabras ::= BREAK SEMICOLON 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("otras_palabras",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // otras_palabras ::= RETURN return_variables SEMICOLON 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("otras_palabras",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // return_variables ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return_variables",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // return_variables ::= literal 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return_variables",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // return_variables ::= IDENTIFIER 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return_variables",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // statement_variables_locales_inicio ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_variables_locales_inicio",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // statement_variables_locales_inicio ::= epsilon statement_variables_locales 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_variables_locales_inicio",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // statement_variables_locales ::= declaracion_identificador 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_variables_locales",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // statement_variables_locales ::= declaracion_identificador statement_variables_locales 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_variables_locales",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // operadores_unarios ::= NOT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadores_unarios",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // operadores_unarios ::= PLUS_PLUS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadores_unarios",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // operadores_unarios ::= MINUS_MINUS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadores_unarios",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // operadores_binarios ::= PLUS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadores_binarios",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // operadores_binarios ::= MINUS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadores_binarios",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // operadores_binarios ::= MULT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadores_binarios",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // operadores_binarios ::= DIV 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadores_binarios",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // operadores_binarios ::= MOD 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadores_binarios",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // operadores_binarios ::= PLUS_EQ 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadores_binarios",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // operadores_binarios ::= MINUS_EQ 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadores_binarios",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // operadores_binarios ::= MULT_EQ 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadores_binarios",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // operadores_binarios ::= MULT_EQ 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadores_binarios",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // operadores_binarios ::= DIV_EQ 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadores_binarios",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // operadores_binarios ::= EQ 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadores_binarios",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // operadores_binarios ::= EQEQ 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadores_binarios",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // operadores_binarios ::= LTEQ 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadores_binarios",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // operadores_binarios ::= GTEQ 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadores_binarios",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // operadores_binarios ::= NOTEQ 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadores_binarios",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // operadores_binarios ::= ANDAND 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadores_binarios",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // operadores_binarios ::= OROR 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadores_binarios",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // operadores_binarios ::= GT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadores_binarios",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // operadores_binarios ::= LT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadores_binarios",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // literal ::= INTEGER_LITERAL 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // literal ::= FLOATING_POINT_LITERAL 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // literal ::= BOOLEAN_LITERAL 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // literal ::= CHARACTER_LITERAL 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // literal ::= STRING_LITERAL 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // literal ::= HEX_LITERAL 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // literal ::= OCT_LITERAL 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // literal ::= NULL_LITERAL 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // type ::= BOOLEAN 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // type ::= INT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // type ::= CHAR 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // type ::= FLOAT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // type ::= LONG 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // type ::= SHORT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // estructura_read ::= READ LPAREN RPAREN SEMICOLON 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estructura_read",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // estructura_read ::= READ LPAREN estructura_read_parametros RPAREN SEMICOLON 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estructura_read",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // estructura_read_parametros ::= literal 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estructura_read_parametros",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // estructura_write ::= WRITE LPAREN estructura_write_parametros RPAREN SEMICOLON 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estructura_write",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // estructura_write_parametros ::= estructura_write_parametros_aux 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estructura_write_parametros",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // estructura_write_parametros ::= estructura_write_parametros_aux COMMA estructura_write_parametros 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estructura_write_parametros",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // estructura_write_parametros_aux ::= expresiones 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estructura_write_parametros_aux",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // estructura_write_parametros_aux ::= IDENTIFIER 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estructura_write_parametros_aux",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // estructura_write_parametros_aux ::= literal 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estructura_write_parametros_aux",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // llamado_funcion ::= IDENTIFIER LPAREN RPAREN SEMICOLON 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamado_funcion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // llamado_funcion ::= IDENTIFIER LPAREN estructura_write_parametros RPAREN SEMICOLON 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamado_funcion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expresiones ::= EXTERN 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // error_semicolon ::= SEMICOLON 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_semicolon",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // error_semicolon ::= MINUS_MINUS error_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_semicolon",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // error_semicolon ::= AT error_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_semicolon",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // error_semicolon ::= SHORT error_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_semicolon",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // error_semicolon ::= SIGNED error_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_semicolon",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // error_semicolon ::= GT error_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_semicolon",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // error_semicolon ::= POINTER error_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_semicolon",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // error_semicolon ::= PLUS_EQ error_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_semicolon",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // error_semicolon ::= NOTEQ error_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_semicolon",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // error_semicolon ::= TOS error_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_semicolon",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // error_semicolon ::= LT_LT error_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_semicolon",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // error_semicolon ::= REGISTER error_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_semicolon",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // error_semicolon ::= ENUM error_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_semicolon",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // error_semicolon ::= RBRACK error_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_semicolon",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // error_semicolon ::= SIZEOF error_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_semicolon",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // error_semicolon ::= COMMA error_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_semicolon",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // error_semicolon ::= RBRACE error_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_semicolon",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // error_semicolon ::= GT_GT_EQ error_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_semicolon",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // error_semicolon ::= RPAREN error_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_semicolon",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // error_semicolon ::= LBRACK error_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_semicolon",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // error_semicolon ::= LT error_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_semicolon",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // error_semicolon ::= ANDAND error_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_semicolon",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // error_semicolon ::= OROR error_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_semicolon",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // error_semicolon ::= STRUCT error_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_semicolon",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // error_semicolon ::= LBRACE error_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_semicolon",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // error_semicolon ::= MOD_EQ error_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_semicolon",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // error_semicolon ::= LPAREN error_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_semicolon",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // error_semicolon ::= INTEGER_LITERAL error_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_semicolon",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // error_semicolon ::= NOT error_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_semicolon",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // error_semicolon ::= FLOAT error_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_semicolon",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // error_semicolon ::= GOTO error_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_semicolon",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // error_semicolon ::= PLUS_PLUS error_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_semicolon",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // error_semicolon ::= AT_EQ error_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_semicolon",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // error_semicolon ::= EQ error_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_semicolon",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // error_semicolon ::= BOOLEAN_LITERAL error_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_semicolon",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // error_semicolon ::= MOD error_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_semicolon",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // error_semicolon ::= UP_EQ error_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_semicolon",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // error_semicolon ::= LONG error_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_semicolon",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // error_semicolon ::= PLUS error_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_semicolon",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // error_semicolon ::= QUESTION error_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_semicolon",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // error_semicolon ::= WHILE error_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_semicolon",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // error_semicolon ::= CHAR error_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_semicolon",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // error_semicolon ::= BOOLEAN error_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_semicolon",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // error_semicolon ::= SWITCH error_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_semicolon",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // error_semicolon ::= DO error_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_semicolon",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // error_semicolon ::= FOR error_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_semicolon",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // error_semicolon ::= VOID error_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_semicolon",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // error_semicolon ::= EXTERN error_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_semicolon",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // error_semicolon ::= DIV error_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_semicolon",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // error_semicolon ::= DIV_EQ error_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_semicolon",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // error_semicolon ::= PUBLIC error_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_semicolon",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // error_semicolon ::= RETURN error_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_semicolon",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // error_semicolon ::= MULT error_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_semicolon",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // error_semicolon ::= ELSE error_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_semicolon",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // error_semicolon ::= GTEQ error_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_semicolon",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // error_semicolon ::= BREAK error_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_semicolon",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // error_semicolon ::= LT_LT_EQ error_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_semicolon",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // error_semicolon ::= DOT error_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_semicolon",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // error_semicolon ::= INT error_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_semicolon",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // error_semicolon ::= NULL_LITERAL error_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_semicolon",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // error_semicolon ::= OCT_LITERAL error_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_semicolon",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // error_semicolon ::= STRING_LITERAL error_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_semicolon",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // error_semicolon ::= EQEQ error_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_semicolon",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // error_semicolon ::= OR_EQ error_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_semicolon",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // error_semicolon ::= DEFAULT error_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_semicolon",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // error_semicolon ::= MINUS_EQ error_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_semicolon",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // error_semicolon ::= MAIN error_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_semicolon",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // error_semicolon ::= MINUS error_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_semicolon",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // error_semicolon ::= LTEQ error_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_semicolon",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // error_semicolon ::= CONTINUE error_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_semicolon",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // error_semicolon ::= IF error_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_semicolon",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // error_semicolon ::= UNSIGNED error_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_semicolon",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // error_semicolon ::= COLON error_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_semicolon",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // error_semicolon ::= HEX_LITERAL error_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_semicolon",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // error_semicolon ::= CHARACTER_LITERAL error_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_semicolon",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // error_semicolon ::= MULT_EQ error_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_semicolon",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // error_semicolon ::= GT_GT error_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_semicolon",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // error_semicolon ::= VOLATILE error_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_semicolon",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // error_semicolon ::= CASE error_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_semicolon",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // error_semicolon ::= STATIC error_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_semicolon",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // error_semicolon ::= TYPEDEF error_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_semicolon",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // error_semicolon ::= AUTO error_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_semicolon",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // error_semicolon ::= FLOATING_POINT_LITERAL error_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_semicolon",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // epsilon ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("epsilon",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}


package analizador_semantico;


//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Tue Jun 24 03:31:31 CST 2014
//----------------------------------------------------

import Token.JavaSymbol;
import Token.sym.*;
import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import analizador_lexico.*;
import generador.*;
import java.util.ArrayList;
import Token.sym.*;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Tue Jun 24 03:31:31 CST 2014
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\327\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\005\000\002\003\004\000\002\023\007" +
    "\000\002\060\002\000\002\023\005\000\002\024\005\000" +
    "\002\024\003\000\002\025\003\000\002\025\004\000\002" +
    "\004\004\000\002\004\003\000\002\061\002\000\002\026" +
    "\010\000\002\062\002\000\002\026\010\000\002\063\002" +
    "\000\002\026\005\000\002\027\006\000\002\027\003\000" +
    "\002\005\004\000\002\006\004\000\002\006\004\000\002" +
    "\006\004\000\002\006\004\000\002\006\004\000\002\006" +
    "\004\000\002\006\006\000\002\006\006\000\002\006\003" +
    "\000\002\064\002\000\002\012\012\000\002\065\002\000" +
    "\002\012\006\000\002\015\002\000\002\066\002\000\002" +
    "\015\006\000\002\067\002\000\002\013\011\000\002\070" +
    "\002\000\002\013\006\000\002\014\014\000\002\071\002" +
    "\000\002\014\006\000\002\016\011\000\002\072\002\000" +
    "\002\016\006\000\002\017\002\000\002\017\007\000\002" +
    "\017\006\000\002\073\002\000\002\017\006\000\002\074" +
    "\002\000\002\017\006\000\002\020\004\000\002\020\004" +
    "\000\002\020\004\000\002\020\004\000\002\020\004\000" +
    "\002\021\004\000\002\021\004\000\002\021\005\000\002" +
    "\022\002\000\002\022\003\000\002\022\003\000\002\010" +
    "\002\000\002\010\004\000\002\011\003\000\002\011\004" +
    "\000\002\044\003\000\002\044\003\000\002\045\003\000" +
    "\002\045\003\000\002\045\003\000\002\045\003\000\002" +
    "\045\003\000\002\046\003\000\002\046\003\000\002\046" +
    "\003\000\002\046\003\000\002\046\003\000\002\047\003" +
    "\000\002\047\003\000\002\047\003\000\002\047\003\000" +
    "\002\047\003\000\002\047\003\000\002\047\003\000\002" +
    "\047\003\000\002\030\003\000\002\030\003\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\032\003\000\002\032\003\000\002\032\003\000\002\032" +
    "\003\000\002\032\003\000\002\032\003\000\002\050\006" +
    "\000\002\050\007\000\002\075\002\000\002\050\006\000" +
    "\002\051\002\000\002\052\007\000\002\076\002\000\002" +
    "\052\006\000\002\053\003\000\002\053\005\000\002\054" +
    "\003\000\002\054\003\000\002\007\006\000\002\077\002" +
    "\000\002\007\006\000\002\033\004\000\002\034\003\000" +
    "\002\034\003\000\002\034\003\000\002\035\005\000\002" +
    "\036\003\000\002\036\003\000\002\036\005\000\002\036" +
    "\003\000\002\036\003\000\002\037\004\000\002\037\004" +
    "\000\002\037\004\000\002\037\004\000\002\040\005\000" +
    "\002\041\005\000\002\041\004\000\002\041\005\000\002" +
    "\042\005\000\002\042\005\000\002\042\005\000\002\042" +
    "\005\000\002\042\005\000\002\042\005\000\002\042\005" +
    "\000\002\042\005\000\002\042\005\000\002\042\005\000" +
    "\002\042\005\000\002\042\005\000\002\042\005\000\002" +
    "\042\005\000\002\042\005\000\002\042\005\000\002\042" +
    "\005\000\002\042\005\000\002\042\005\000\002\042\005" +
    "\000\002\042\005\000\002\042\005\000\002\042\005\000" +
    "\002\042\005\000\002\042\005\000\002\042\005\000\002" +
    "\042\005\000\002\042\005\000\002\042\005\000\002\042" +
    "\005\000\002\042\005\000\002\042\005\000\002\042\004" +
    "\000\002\042\004\000\002\042\003\000\002\042\003\000" +
    "\002\043\005\000\002\043\005\000\002\043\005\000\002" +
    "\043\005\000\002\043\005\000\002\043\005\000\002\043" +
    "\005\000\002\043\005\000\002\043\005\000\002\043\005" +
    "\000\002\043\005\000\002\043\005\000\002\043\005\000" +
    "\002\043\005\000\002\043\005\000\002\043\005\000\002" +
    "\043\005\000\002\043\005\000\002\043\005\000\002\043" +
    "\005\000\002\043\005\000\002\043\005\000\002\043\005" +
    "\000\002\043\005\000\002\043\005\000\002\043\005\000" +
    "\002\043\005\000\002\043\005\000\002\043\005\000\002" +
    "\043\005\000\002\043\005\000\002\043\005\000\002\043" +
    "\004\000\002\043\004\000\002\043\003\000\002\043\003" +
    "\000\002\057\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u011d\000\024\003\015\004\011\005\020\007\004\013" +
    "\012\015\021\016\005\017\022\121\017\001\002\000\004" +
    "\121\uff99\001\002\000\004\121\uff96\001\002\000\024\003" +
    "\015\004\011\005\020\007\004\013\012\015\021\016\005" +
    "\017\022\121\017\001\002\000\004\002\000\001\002\000" +
    "\024\002\uff2b\003\u011a\004\011\005\020\007\004\013\012" +
    "\015\021\016\005\017\022\001\002\000\004\121\uff9a\001" +
    "\002\000\004\121\u0113\001\002\000\004\052\u0111\001\002" +
    "\000\004\121\071\001\002\000\006\047\uffef\052\ufffb\001" +
    "\002\000\004\002\064\001\002\000\014\067\024\070\026" +
    "\071\025\072\030\107\023\001\002\000\004\121\uff98\001" +
    "\002\000\004\121\uff97\001\002\000\004\121\uff95\001\002" +
    "\000\024\061\uffb3\065\uffb3\066\uffb3\105\uffb3\121\uffb3\122" +
    "\uffb3\123\uffb3\127\uffb3\130\uffb3\001\002\000\024\061\uffb2" +
    "\065\uffb2\066\uffb2\105\uffb2\121\uffb2\122\uffb2\123\uffb2\127" +
    "\uffb2\130\uffb2\001\002\000\024\061\uffb0\065\uffb0\066\uffb0" +
    "\105\uffb0\121\uffb0\122\uffb0\123\uffb0\127\uffb0\130\uffb0\001" +
    "\002\000\024\061\uffb1\065\uffb1\066\uffb1\105\uffb1\121\uffb1" +
    "\122\uffb1\123\uffb1\127\uffb1\130\uffb1\001\002\000\024\061" +
    "\031\065\041\066\036\105\045\121\042\122\046\123\037" +
    "\127\040\130\034\001\002\000\024\061\uffaf\065\uffaf\066" +
    "\uffaf\105\uffaf\121\uffaf\122\uffaf\123\uffaf\127\uffaf\130\uffaf" +
    "\001\002\000\014\121\063\122\046\123\037\127\040\130" +
    "\034\001\002\000\040\052\uff7f\060\uff7f\061\uff7f\062\uff7f" +
    "\063\uff7f\064\uff7f\106\uff7f\110\uff7f\111\uff7f\112\uff7f\113" +
    "\uff7f\114\uff7f\116\uff7f\117\uff7f\120\uff7f\001\002\000\004" +
    "\121\061\001\002\000\040\052\uff9b\060\uff9b\061\uff9b\062" +
    "\uff9b\063\uff9b\064\uff9b\106\uff9b\110\uff9b\111\uff9b\112\uff9b" +
    "\113\uff9b\114\uff9b\116\uff9b\117\uff9b\120\uff9b\001\002\000" +
    "\040\052\uff7c\060\uff7c\061\uff7c\062\uff7c\063\uff7c\064\uff7c" +
    "\106\uff7c\110\uff7c\111\uff7c\112\uff7c\113\uff7c\114\uff7c\116" +
    "\uff7c\117\uff7c\120\uff7c\001\002\000\042\052\uffb9\060\uffb9" +
    "\061\uffb9\062\uffb9\063\uffb9\064\uffb9\106\uffb9\110\uffb9\111" +
    "\uffb9\112\uffb9\113\uffb9\114\uffb9\116\uffb9\117\uffb9\120\uffb9" +
    "\121\uffb9\001\002\000\040\052\uff9d\060\uff9d\061\uff9d\062" +
    "\uff9d\063\uff9d\064\uff9d\106\uff9d\110\uff9d\111\uff9d\112\uff9d" +
    "\113\uff9d\114\uff9d\116\uff9d\117\uff9d\120\uff9d\001\002\000" +
    "\040\052\uff9c\060\uff9c\061\uff9c\062\uff9c\063\uff9c\064\uff9c" +
    "\106\uff9c\110\uff9c\111\uff9c\112\uff9c\113\uff9c\114\uff9c\116" +
    "\uff9c\117\uff9c\120\uff9c\001\002\000\042\052\uffba\060\uffba" +
    "\061\uffba\062\uffba\063\uffba\064\uffba\106\uffba\110\uffba\111" +
    "\uffba\112\uffba\113\uffba\114\uffba\116\uffba\117\uffba\120\uffba" +
    "\121\uffba\001\002\000\044\052\uff7d\060\uff7d\061\uff7d\062" +
    "\uff7d\063\uff7d\064\uff7d\065\041\066\036\106\uff7d\110\uff7d" +
    "\111\uff7d\112\uff7d\113\uff7d\114\uff7d\116\uff7d\117\uff7d\120" +
    "\uff7d\001\002\000\016\052\uff81\060\053\061\054\062\051" +
    "\063\056\064\050\001\002\000\040\052\uff80\060\uff80\061" +
    "\uff80\062\uff80\063\uff80\064\uff80\106\uff80\110\uff80\111\uff80" +
    "\112\uff80\113\uff80\114\uff80\116\uff80\117\uff80\120\uff80\001" +
    "\002\000\024\061\031\065\041\066\036\105\045\121\042" +
    "\122\046\123\037\127\040\130\034\001\002\000\040\052" +
    "\uff9e\060\uff9e\061\uff9e\062\uff9e\063\uff9e\064\uff9e\106\uff9e" +
    "\110\uff9e\111\uff9e\112\uff9e\113\uff9e\114\uff9e\116\uff9e\117" +
    "\uff9e\120\uff9e\001\002\000\016\060\053\061\054\062\051" +
    "\063\056\064\050\106\052\001\002\000\024\061\uffb4\065" +
    "\uffb4\066\uffb4\105\uffb4\121\uffb4\122\uffb4\123\uffb4\127\uffb4" +
    "\130\uffb4\001\002\000\024\061\uffb6\065\uffb6\066\uffb6\105" +
    "\uffb6\121\uffb6\122\uffb6\123\uffb6\127\uffb6\130\uffb6\001\002" +
    "\000\040\052\uff7e\060\uff7e\061\uff7e\062\uff7e\063\uff7e\064" +
    "\uff7e\106\uff7e\110\uff7e\111\uff7e\112\uff7e\113\uff7e\114\uff7e" +
    "\116\uff7e\117\uff7e\120\uff7e\001\002\000\024\061\uffb8\065" +
    "\uffb8\066\uffb8\105\uffb8\121\uffb8\122\uffb8\123\uffb8\127\uffb8" +
    "\130\uffb8\001\002\000\024\061\uffb7\065\uffb7\066\uffb7\105" +
    "\uffb7\121\uffb7\122\uffb7\123\uffb7\127\uffb7\130\uffb7\001\002" +
    "\000\024\061\031\065\041\066\036\105\045\121\042\122" +
    "\046\123\037\127\040\130\034\001\002\000\024\061\uffb5" +
    "\065\uffb5\066\uffb5\105\uffb5\121\uffb5\122\uffb5\123\uffb5\127" +
    "\uffb5\130\uffb5\001\002\000\040\052\uff77\060\053\061\054" +
    "\062\051\063\056\064\050\106\uff77\110\uff77\111\uff77\112" +
    "\uff77\113\uff77\114\uff77\116\uff77\117\uff77\120\uff77\001\002" +
    "\000\040\052\uff7a\060\uff7a\061\uff7a\062\uff7a\063\uff7a\064" +
    "\uff7a\106\uff7a\110\uff7a\111\uff7a\112\uff7a\113\uff7a\114\uff7a" +
    "\116\uff7a\117\uff7a\120\uff7a\001\002\000\040\052\uff7b\060" +
    "\uff7b\061\uff7b\062\uff7b\063\uff7b\064\uff7b\106\uff7b\110\uff7b" +
    "\111\uff7b\112\uff7b\113\uff7b\114\uff7b\116\uff7b\117\uff7b\120" +
    "\uff7b\001\002\000\040\052\uff79\060\uff79\061\uff79\062\uff79" +
    "\063\uff79\064\uff79\106\uff79\110\uff79\111\uff79\112\uff79\113" +
    "\uff79\114\uff79\116\uff79\117\uff79\120\uff79\001\002\000\040" +
    "\052\uff78\060\uff78\061\uff78\062\uff78\063\uff78\064\uff78\106" +
    "\uff78\110\uff78\111\uff78\112\uff78\113\uff78\114\uff78\116\uff78" +
    "\117\uff78\120\uff78\001\002\000\004\002\001\001\002\000" +
    "\004\047\070\001\002\000\004\052\067\001\002\000\024" +
    "\003\ufffa\004\ufffa\005\ufffa\007\ufffa\013\ufffa\015\ufffa\016" +
    "\ufffa\017\ufffa\121\ufffa\001\002\000\024\002\uffee\003\uffee" +
    "\004\uffee\005\uffee\007\uffee\013\uffee\015\uffee\016\uffee\017" +
    "\uffee\001\002\000\012\052\uff2b\053\072\105\ufff3\107\uff2b" +
    "\001\002\000\004\121\u010f\001\002\000\004\105\103\001" +
    "\002\000\006\052\uff2b\107\076\001\002\000\006\052\ufff8" +
    "\107\ufff8\001\002\000\012\122\046\123\037\127\040\130" +
    "\034\001\002\000\004\052\101\001\002\000\004\052\ufff7" +
    "\001\002\000\024\003\ufffc\004\ufffc\005\ufffc\007\ufffc\013" +
    "\ufffc\015\ufffc\016\ufffc\017\ufffc\121\ufffc\001\002\000\004" +
    "\052\ufff6\001\002\000\004\106\104\001\002\000\004\046" +
    "\105\001\002\000\042\010\121\012\116\014\114\027\111" +
    "\030\124\047\112\055\115\061\031\065\041\066\036\105" +
    "\122\121\117\122\046\123\037\127\040\130\034\001\002" +
    "\000\024\002\ufff2\003\ufff2\004\ufff2\005\ufff2\007\ufff2\013" +
    "\ufff2\015\ufff2\016\ufff2\017\ufff2\001\002\000\042\010\121" +
    "\012\116\014\114\027\111\030\124\047\112\055\115\061" +
    "\031\065\041\066\036\105\122\121\117\122\046\123\037" +
    "\127\040\130\034\001\002\000\024\002\uffeb\003\uffeb\004" +
    "\uffeb\005\uffeb\007\uffeb\013\uffeb\015\uffeb\016\uffeb\017\uffeb" +
    "\001\002\000\006\003\u0105\105\u0106\001\002\000\066\002" +
    "\uffe2\003\uffe2\004\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2" +
    "\012\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\027" +
    "\uffe2\030\uffe2\047\uffe2\055\uffe2\061\uffe2\065\uffe2\066\uffe2" +
    "\105\uffe2\121\uffe2\122\uffe2\123\uffe2\127\uffe2\130\uffe2\001" +
    "\002\000\004\052\u0104\001\002\000\006\003\306\105\uffda" +
    "\001\002\000\024\061\031\065\041\066\036\105\045\121" +
    "\042\122\046\123\037\127\040\130\034\001\002\000\006" +
    "\121\300\122\277\001\002\000\060\003\271\052\uff7d\060" +
    "\uff7d\061\uff7d\062\uff7d\063\uff7d\064\uff7d\065\041\066\036" +
    "\067\024\070\026\071\025\072\030\105\272\107\023\110" +
    "\uff7d\111\uff7d\112\uff7d\113\uff7d\114\uff7d\116\uff7d\117\uff7d" +
    "\120\uff7d\001\002\000\042\010\121\012\116\014\114\027" +
    "\111\030\124\047\112\055\115\061\031\065\041\066\036" +
    "\105\122\121\117\122\046\123\037\127\040\130\034\001" +
    "\002\000\006\003\165\105\uffe1\001\002\000\026\055\115" +
    "\061\031\065\041\066\036\105\122\121\042\122\046\123" +
    "\037\127\040\130\034\001\002\000\004\052\uff84\001\002" +
    "\000\006\003\151\105\152\001\002\000\042\010\121\012" +
    "\116\014\114\027\111\030\124\047\112\055\115\061\031" +
    "\065\041\066\036\105\122\121\117\122\046\123\037\127" +
    "\040\130\034\001\002\000\042\010\121\012\116\014\114" +
    "\027\111\030\124\047\112\055\115\061\031\065\041\066" +
    "\036\105\122\121\117\122\046\123\037\127\040\130\034" +
    "\001\002\000\042\010\121\012\116\014\114\027\111\030" +
    "\124\047\112\055\115\061\031\065\041\066\036\105\122" +
    "\121\117\122\046\123\037\127\040\130\034\001\002\000" +
    "\036\052\uff83\060\053\061\054\062\051\063\056\064\050" +
    "\110\134\111\143\112\136\113\140\114\137\116\135\117" +
    "\142\120\144\001\002\000\004\052\uff82\001\002\000\042" +
    "\010\121\012\116\014\114\027\111\030\124\047\112\055" +
    "\115\061\031\065\041\066\036\105\122\121\117\122\046" +
    "\123\037\127\040\130\034\001\002\000\066\002\uffe9\003" +
    "\uffe9\004\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9\012\uffe9" +
    "\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9\027\uffe9\030" +
    "\uffe9\047\uffe9\055\uffe9\061\uffe9\065\uffe9\066\uffe9\105\uffe9" +
    "\121\uffe9\122\uffe9\123\uffe9\127\uffe9\130\uffe9\001\002\000" +
    "\024\061\uffac\065\uffac\066\uffac\105\uffac\121\uffac\122\uffac" +
    "\123\uffac\127\uffac\130\uffac\001\002\000\024\061\uffae\065" +
    "\uffae\066\uffae\105\uffae\121\uffae\122\uffae\123\uffae\127\uffae" +
    "\130\uffae\001\002\000\024\061\uffab\065\uffab\066\uffab\105" +
    "\uffab\121\uffab\122\uffab\123\uffab\127\uffab\130\uffab\001\002" +
    "\000\024\061\uffad\065\uffad\066\uffad\105\uffad\121\uffad\122" +
    "\uffad\123\uffad\127\uffad\130\uffad\001\002\000\024\061\uffa7" +
    "\065\uffa7\066\uffa7\105\uffa7\121\uffa7\122\uffa7\123\uffa7\127" +
    "\uffa7\130\uffa7\001\002\000\024\061\031\065\041\066\036" +
    "\105\045\121\042\122\046\123\037\127\040\130\034\001" +
    "\002\000\024\061\uffaa\065\uffaa\066\uffaa\105\uffaa\121\uffaa" +
    "\122\uffaa\123\uffaa\127\uffaa\130\uffaa\001\002\000\024\061" +
    "\uffa9\065\uffa9\066\uffa9\105\uffa9\121\uffa9\122\uffa9\123\uffa9" +
    "\127\uffa9\130\uffa9\001\002\000\024\061\uffa8\065\uffa8\066" +
    "\uffa8\105\uffa8\121\uffa8\122\uffa8\123\uffa8\127\uffa8\130\uffa8" +
    "\001\002\000\020\052\uff76\060\053\061\054\062\051\063" +
    "\056\064\050\106\uff76\001\002\000\066\002\uffe5\003\uffe5" +
    "\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5\012\uffe5\013" +
    "\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5\027\uffe5\030\uffe5" +
    "\047\uffe5\055\uffe5\061\uffe5\065\uffe5\066\uffe5\105\uffe5\121" +
    "\uffe5\122\uffe5\123\uffe5\127\uffe5\130\uffe5\001\002\000\066" +
    "\002\uffea\003\uffea\004\uffea\005\uffea\006\uffea\007\uffea\010" +
    "\uffea\012\uffea\013\uffea\014\uffea\015\uffea\016\uffea\017\uffea" +
    "\027\uffea\030\uffea\047\uffea\055\uffea\061\uffea\065\uffea\066" +
    "\uffea\105\uffea\121\uffea\122\uffea\123\uffea\127\uffea\130\uffea" +
    "\001\002\000\066\002\uffe6\003\uffe6\004\uffe6\005\uffe6\006" +
    "\uffe6\007\uffe6\010\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6" +
    "\016\uffe6\017\uffe6\027\uffe6\030\uffe6\047\uffe6\055\uffe6\061" +
    "\uffe6\065\uffe6\066\uffe6\105\uffe6\121\uffe6\122\uffe6\123\uffe6" +
    "\127\uffe6\130\uffe6\001\002\000\004\052\uff8e\001\002\000" +
    "\006\121\155\122\154\001\002\000\004\106\156\001\002" +
    "\000\004\106\uff89\001\002\000\004\106\uff8a\001\002\000" +
    "\004\052\157\001\002\000\042\010\uff8f\012\uff8f\014\uff8f" +
    "\027\uff8f\030\uff8f\047\uff8f\055\uff8f\061\uff8f\065\uff8f\066" +
    "\uff8f\105\uff8f\121\uff8f\122\uff8f\123\uff8f\127\uff8f\130\uff8f" +
    "\001\002\000\004\052\161\001\002\000\042\010\uff8d\012" +
    "\uff8d\014\uff8d\027\uff8d\030\uff8d\047\uff8d\055\uff8d\061\uff8d" +
    "\065\uff8d\066\uff8d\105\uff8d\121\uff8d\122\uff8d\123\uff8d\127" +
    "\uff8d\130\uff8d\001\002\000\036\060\053\061\054\062\051" +
    "\063\056\064\050\106\052\110\134\111\143\112\136\113" +
    "\140\114\137\116\135\117\142\120\144\001\002\000\004" +
    "\106\164\001\002\000\006\052\uff74\106\uff74\001\002\000" +
    "\004\047\uffdf\001\002\000\004\105\167\001\002\000\010" +
    "\055\170\121\172\122\171\001\002\000\006\121\265\122" +
    "\264\001\002\000\024\106\uff2c\110\243\111\242\112\236" +
    "\113\241\114\237\116\240\117\235\120\234\001\002\000" +
    "\024\106\uff2d\110\213\111\212\112\206\113\211\114\207" +
    "\116\210\117\205\120\204\001\002\000\004\106\174\001" +
    "\002\000\004\046\175\001\002\000\042\010\121\012\116" +
    "\014\114\027\111\030\124\047\112\055\115\061\031\065" +
    "\041\066\036\105\122\121\117\122\046\123\037\127\040" +
    "\130\034\001\002\000\044\006\200\010\uffdd\012\uffdd\014" +
    "\uffdd\027\uffdd\030\uffdd\047\uffdd\055\uffdd\061\uffdd\065\uffdd" +
    "\066\uffdd\105\uffdd\121\uffdd\122\uffdd\123\uffdd\127\uffdd\130" +
    "\uffdd\001\002\000\042\010\uffe0\012\uffe0\014\uffe0\027\uffe0" +
    "\030\uffe0\047\uffe0\055\uffe0\061\uffe0\065\uffe0\066\uffe0\105" +
    "\uffe0\121\uffe0\122\uffe0\123\uffe0\127\uffe0\130\uffe0\001\002" +
    "\000\004\046\uffdc\001\002\000\004\046\202\001\002\000" +
    "\042\010\121\012\116\014\114\027\111\030\124\047\112" +
    "\055\115\061\031\065\041\066\036\105\122\121\117\122" +
    "\046\123\037\127\040\130\034\001\002\000\042\010\uffdb" +
    "\012\uffdb\014\uffdb\027\uffdb\030\uffdb\047\uffdb\055\uffdb\061" +
    "\uffdb\065\uffdb\066\uffdb\105\uffdb\121\uffdb\122\uffdb\123\uffdb" +
    "\127\uffdb\130\uffdb\001\002\000\006\121\233\122\232\001" +
    "\002\000\006\121\231\122\230\001\002\000\006\121\227" +
    "\122\226\001\002\000\006\121\225\122\224\001\002\000" +
    "\006\121\223\122\222\001\002\000\006\121\221\122\220" +
    "\001\002\000\006\121\217\122\216\001\002\000\006\121" +
    "\215\122\214\001\002\000\004\106\uff4d\001\002\000\004" +
    "\106\uff4c\001\002\000\004\106\uff49\001\002\000\004\106" +
    "\uff48\001\002\000\004\106\uff41\001\002\000\004\106\uff40" +
    "\001\002\000\004\106\uff39\001\002\000\004\106\uff38\001" +
    "\002\000\004\106\uff3d\001\002\000\004\106\uff3c\001\002" +
    "\000\004\106\uff45\001\002\000\004\106\uff44\001\002\000" +
    "\004\106\uff35\001\002\000\004\106\uff34\001\002\000\004" +
    "\106\uff31\001\002\000\004\106\uff30\001\002\000\006\121" +
    "\263\122\262\001\002\000\006\121\261\122\260\001\002" +
    "\000\006\121\257\122\256\001\002\000\006\121\255\122" +
    "\254\001\002\000\006\121\253\122\252\001\002\000\006" +
    "\121\251\122\250\001\002\000\006\121\247\122\246\001" +
    "\002\000\006\121\245\122\244\001\002\000\004\106\uff4f" +
    "\001\002\000\004\106\uff4e\001\002\000\004\106\uff4b\001" +
    "\002\000\004\106\uff4a\001\002\000\004\106\uff43\001\002" +
    "\000\004\106\uff42\001\002\000\004\106\uff3b\001\002\000" +
    "\004\106\uff3a\001\002\000\004\106\uff3f\001\002\000\004" +
    "\106\uff3e\001\002\000\004\106\uff47\001\002\000\004\106" +
    "\uff46\001\002\000\004\106\uff37\001\002\000\004\106\uff36" +
    "\001\002\000\004\106\uff33\001\002\000\004\106\uff32\001" +
    "\002\000\004\106\uff2e\001\002\000\004\106\uff2f\001\002" +
    "\000\004\047\267\001\002\000\042\010\uffde\012\uffde\014" +
    "\uffde\027\uffde\030\uffde\047\uffde\055\uffde\061\uffde\065\uffde" +
    "\066\uffde\105\uffde\121\uffde\122\uffde\123\uffde\127\uffde\130" +
    "\uffde\001\002\000\066\002\uffe8\003\uffe8\004\uffe8\005\uffe8" +
    "\006\uffe8\007\uffe8\010\uffe8\012\uffe8\013\uffe8\014\uffe8\015" +
    "\uffe8\016\uffe8\017\uffe8\027\uffe8\030\uffe8\047\uffe8\055\uffe8" +
    "\061\uffe8\065\uffe8\066\uffe8\105\uffe8\121\uffe8\122\uffe8\123" +
    "\uffe8\127\uffe8\130\uffe8\001\002\000\004\052\uff87\001\002" +
    "\000\004\106\273\001\002\000\004\052\274\001\002\000" +
    "\042\010\uff88\012\uff88\014\uff88\027\uff88\030\uff88\047\uff88" +
    "\055\uff88\061\uff88\065\uff88\066\uff88\105\uff88\121\uff88\122" +
    "\uff88\123\uff88\127\uff88\130\uff88\001\002\000\004\052\276" +
    "\001\002\000\042\010\uff86\012\uff86\014\uff86\027\uff86\030" +
    "\uff86\047\uff86\055\uff86\061\uff86\065\uff86\066\uff86\105\uff86" +
    "\121\uff86\122\uff86\123\uff86\127\uff86\130\uff86\001\002\000" +
    "\004\052\303\001\002\000\004\052\301\001\002\000\004" +
    "\047\302\001\002\000\066\002\uffe4\003\uffe4\004\uffe4\005" +
    "\uffe4\006\uffe4\007\uffe4\010\uffe4\012\uffe4\013\uffe4\014\uffe4" +
    "\015\uffe4\016\uffe4\017\uffe4\027\uffe4\030\uffe4\047\uffe4\055" +
    "\uffe4\061\uffe4\065\uffe4\066\uffe4\105\uffe4\121\uffe4\122\uffe4" +
    "\123\uffe4\127\uffe4\130\uffe4\001\002\000\004\047\304\001" +
    "\002\000\066\002\uffe3\003\uffe3\004\uffe3\005\uffe3\006\uffe3" +
    "\007\uffe3\010\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016" +
    "\uffe3\017\uffe3\027\uffe3\030\uffe3\047\uffe3\055\uffe3\061\uffe3" +
    "\065\uffe3\066\uffe3\105\uffe3\121\uffe3\122\uffe3\123\uffe3\127" +
    "\uffe3\130\uffe3\001\002\000\020\052\uff75\060\053\061\054" +
    "\062\051\063\056\064\050\106\uff75\001\002\000\004\047" +
    "\uffd8\001\002\000\004\105\310\001\002\000\010\055\311" +
    "\121\313\122\312\001\002\000\006\121\u0101\122\u0100\001" +
    "\002\000\024\106\uff50\110\356\111\357\112\351\113\355" +
    "\114\353\116\354\117\352\120\350\001\002\000\024\106" +
    "\uff51\110\326\111\327\112\322\113\325\114\323\116\324" +
    "\117\321\120\320\001\002\000\004\106\315\001\002\000" +
    "\004\046\316\001\002\000\042\010\121\012\116\014\114" +
    "\027\111\030\124\047\112\055\115\061\031\065\041\066" +
    "\036\105\122\121\117\122\046\123\037\127\040\130\034" +
    "\001\002\000\042\010\uffd9\012\uffd9\014\uffd9\027\uffd9\030" +
    "\uffd9\047\uffd9\055\uffd9\061\uffd9\065\uffd9\066\uffd9\105\uffd9" +
    "\121\uffd9\122\uffd9\123\uffd9\127\uffd9\130\uffd9\001\002\000" +
    "\006\121\347\122\346\001\002\000\006\121\345\122\344" +
    "\001\002\000\006\121\343\122\342\001\002\000\006\121" +
    "\341\122\340\001\002\000\006\121\337\122\336\001\002" +
    "\000\006\121\335\122\334\001\002\000\006\121\333\122" +
    "\332\001\002\000\006\121\331\122\330\001\002\000\004" +
    "\106\uff6d\001\002\000\004\106\uff6c\001\002\000\004\106" +
    "\uff71\001\002\000\004\106\uff70\001\002\000\004\106\uff65" +
    "\001\002\000\004\106\uff64\001\002\000\004\106\uff5d\001" +
    "\002\000\004\106\uff5c\001\002\000\004\106\uff61\001\002" +
    "\000\004\106\uff60\001\002\000\004\106\uff69\001\002\000" +
    "\004\106\uff68\001\002\000\004\106\uff59\001\002\000\004" +
    "\106\uff58\001\002\000\004\106\uff55\001\002\000\004\106" +
    "\uff54\001\002\000\006\121\377\122\376\001\002\000\006" +
    "\121\375\122\374\001\002\000\006\121\373\122\372\001" +
    "\002\000\006\121\371\122\370\001\002\000\006\121\367" +
    "\122\366\001\002\000\006\121\365\122\364\001\002\000" +
    "\006\121\363\122\362\001\002\000\006\121\361\122\360" +
    "\001\002\000\004\106\uff6f\001\002\000\004\106\uff6e\001" +
    "\002\000\004\106\uff73\001\002\000\004\106\uff72\001\002" +
    "\000\004\106\uff67\001\002\000\004\106\uff66\001\002\000" +
    "\004\106\uff5f\001\002\000\004\106\uff5e\001\002\000\004" +
    "\106\uff63\001\002\000\004\106\uff62\001\002\000\004\106" +
    "\uff5b\001\002\000\004\106\uff5a\001\002\000\004\106\uff6b" +
    "\001\002\000\004\106\uff6a\001\002\000\004\106\uff57\001" +
    "\002\000\004\106\uff56\001\002\000\004\106\uff52\001\002" +
    "\000\004\106\uff53\001\002\000\004\047\u0103\001\002\000" +
    "\042\010\uffd7\012\uffd7\014\uffd7\027\uffd7\030\uffd7\047\uffd7" +
    "\055\uffd7\061\uffd7\065\uffd7\066\uffd7\105\uffd7\121\uffd7\122" +
    "\uffd7\123\uffd7\127\uffd7\130\uffd7\001\002\000\042\010\uff85" +
    "\012\uff85\014\uff85\027\uff85\030\uff85\047\uff85\055\uff85\061" +
    "\uff85\065\uff85\066\uff85\105\uff85\121\uff85\122\uff85\123\uff85" +
    "\127\uff85\130\uff85\001\002\000\004\052\uff92\001\002\000" +
    "\006\106\u0107\121\u0108\001\002\000\004\052\u010b\001\002" +
    "\000\004\106\u0109\001\002\000\004\052\u010a\001\002\000" +
    "\042\010\uff93\012\uff93\014\uff93\027\uff93\030\uff93\047\uff93" +
    "\055\uff93\061\uff93\065\uff93\066\uff93\105\uff93\121\uff93\122" +
    "\uff93\123\uff93\127\uff93\130\uff93\001\002\000\042\010\uff94" +
    "\012\uff94\014\uff94\027\uff94\030\uff94\047\uff94\055\uff94\061" +
    "\uff94\065\uff94\066\uff94\105\uff94\121\uff94\122\uff94\123\uff94" +
    "\127\uff94\130\uff94\001\002\000\004\052\u010d\001\002\000" +
    "\042\010\uff91\012\uff91\014\uff91\027\uff91\030\uff91\047\uff91" +
    "\055\uff91\061\uff91\065\uff91\066\uff91\105\uff91\121\uff91\122" +
    "\uff91\123\uff91\127\uff91\130\uff91\001\002\000\066\002\uffe7" +
    "\003\uffe7\004\uffe7\005\uffe7\006\uffe7\007\uffe7\010\uffe7\012" +
    "\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7\027\uffe7" +
    "\030\uffe7\047\uffe7\055\uffe7\061\uffe7\065\uffe7\066\uffe7\105" +
    "\uffe7\121\uffe7\122\uffe7\123\uffe7\127\uffe7\130\uffe7\001\002" +
    "\000\010\052\uff2b\053\072\107\uff2b\001\002\000\006\052" +
    "\ufff9\107\ufff9\001\002\000\024\003\015\004\011\005\020" +
    "\007\004\013\012\015\021\016\005\017\022\121\017\001" +
    "\002\000\004\002\ufffe\001\002\000\004\105\ufff1\001\002" +
    "\000\004\105\u0115\001\002\000\004\106\u0116\001\002\000" +
    "\004\046\105\001\002\000\024\002\ufff0\003\ufff0\004\ufff0" +
    "\005\ufff0\007\ufff0\013\ufff0\015\ufff0\016\ufff0\017\ufff0\001" +
    "\002\000\024\002\uff2b\003\u011a\004\011\005\020\007\004" +
    "\013\012\015\021\016\005\017\022\001\002\000\004\121" +
    "\u011d\001\002\000\004\047\uffef\001\002\000\004\002\ufff4" +
    "\001\002\000\004\002\ufffd\001\002\000\004\105\ufff3\001" +
    "\002\000\004\002\ufff5\001\002\000\004\002\uffff\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u011d\000\016\002\015\003\006\023\005\026\007\032" +
    "\013\035\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\003\u011e\023\005\026\007\032\013\035\012\001" +
    "\001\000\002\001\001\000\012\004\u011b\026\u0117\032\u0118" +
    "\057\u011a\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\060\065\063\064" +
    "\001\001\000\002\001\001\000\004\046\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\031\034\036\042\037\043\040\031\044\032" +
    "\001\001\000\002\001\001\000\004\031\061\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\044\057\001\001\000\004" +
    "\045\054\001\001\000\002\001\001\000\014\031\034\036" +
    "\046\037\043\040\031\044\032\001\001\000\002\001\001" +
    "\000\004\045\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\031\034\036\056\037\043\040\031\044\032\001" +
    "\001\000\002\001\001\000\004\045\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\024\073\057" +
    "\074\061\072\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\025\076\057\077\001\001\000\002\001\001\000" +
    "\004\031\101\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\105\001\001\000\040\006\107\007\117\012\124" +
    "\013\126\031\034\033\106\034\112\035\122\036\127\037" +
    "\043\040\031\041\130\044\032\050\125\052\131\001\001" +
    "\000\002\001\001\000\040\006\u010d\007\117\012\124\013" +
    "\126\031\034\033\106\034\112\035\122\036\127\037\043" +
    "\040\031\041\130\044\032\050\125\052\131\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\067\306\001\001\000\014\031\034\036" +
    "\304\037\043\040\031\044\032\001\001\000\002\001\001" +
    "\000\006\044\057\046\026\001\001\000\040\006\267\007" +
    "\117\012\124\013\126\031\034\033\106\034\112\035\122" +
    "\036\127\037\043\040\031\041\130\044\032\050\125\052" +
    "\131\001\001\000\004\064\165\001\001\000\016\031\034" +
    "\036\161\037\043\040\031\041\162\044\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\006\147\007\117" +
    "\012\124\013\126\031\034\033\106\034\112\035\122\036" +
    "\127\037\043\040\031\041\130\044\032\050\125\052\131" +
    "\001\001\000\040\006\146\007\117\012\124\013\126\031" +
    "\034\033\106\034\112\035\122\036\127\037\043\040\031" +
    "\041\130\044\032\050\125\052\131\001\001\000\040\006" +
    "\145\007\117\012\124\013\126\031\034\033\106\034\112" +
    "\035\122\036\127\037\043\040\031\041\130\044\032\050" +
    "\125\052\131\001\001\000\006\045\054\047\140\001\001" +
    "\000\002\001\001\000\040\006\132\007\117\012\124\013" +
    "\126\031\034\033\106\034\112\035\122\036\127\037\043" +
    "\040\031\041\130\044\032\050\125\052\131\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\031" +
    "\034\036\144\037\043\040\031\044\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\045" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\076\157\001\001\000\004\054\152\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\045\054\047\140\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\065\265\001\001\000" +
    "\002\001\001\000\004\043\172\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\006\175\007\117\012\124\013\126" +
    "\031\034\033\106\034\112\035\122\036\127\037\043\040" +
    "\031\041\130\044\032\050\125\052\131\001\001\000\004" +
    "\015\176\001\001\000\002\001\001\000\004\066\200\001" +
    "\001\000\002\001\001\000\040\006\202\007\117\012\124" +
    "\013\126\031\034\033\106\034\112\035\122\036\127\037" +
    "\043\040\031\041\130\044\032\050\125\052\131\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\077\274\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\045\054\001\001\000" +
    "\004\070\u0101\001\001\000\002\001\001\000\004\042\313" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\006\316" +
    "\007\117\012\124\013\126\031\034\033\106\034\112\035" +
    "\122\036\127\037\043\040\031\041\130\044\032\050\125" +
    "\052\131\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\075\u010b\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\024\u010f\057\074\001\001\000\002\001" +
    "\001\000\014\003\u0111\023\005\026\007\032\013\035\012" +
    "\001\001\000\002\001\001\000\004\062\u0113\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\u0116\001\001" +
    "\000\002\001\001\000\012\004\u011d\026\u0117\032\u0118\057" +
    "\u011a\001\001\000\002\001\001\000\004\063\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\061\072\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
  public static int errors = 0;
  public static int warnings = 0;
  public static analizador_lexico.Scanner s;
  public static ArrayList<Token> tokens = new ArrayList<Token>();
  public static ArrayList<String> identis = new ArrayList<String>();
  public String RESULT= "Pila SEGMENT STACK\n\tdb 64 dup (?)\nPila ENDS\n\ndatos segment\n";
  public static ArrayList<String> funciones = new ArrayList<String>();
  public static Pila pila = new Pila();
  public String MAIN = "";
  public String WRITE_MACRO ="write Macro numero\n\tmov al,numero\n\taam\n\tadd ax,3030h\n\txchg al,ah\n\tint 29h\n\tmov al,ah\n\tint 29h\nendM\n";
  public String READ_MACRO = "read Macro\n\tmov ah,01h\n\tint 21h\n\tsub al,48\nendM\n";
  public String FUNCIONES= "datos endS\n\n"+WRITE_MACRO+READ_MACRO+"codigo segment\n\tASSUME CS:Codigo, DS:Datos, SS:Pila\n\n";
  public int cont_while=1;
  public int cont_if=1;
  public int cont_else=1;
  public int cont_bucles =0;
  public boolean esReturn=false;


  public static void main(String argv[]) {

    for (int i = 0; i < argv.length; i++) {
      try {
	  s = new analizador_lexico.Scanner(new FileReader(argv[i]));
        Parser p = new Parser(s);
        p.parse();
        System.out.println("Number of errors = " + errors + ".");
       

      }
      catch (Exception e) {
        e.printStackTrace(System.out);
        System.exit(1);
      }
    }
  }
  protected int error_sync_size () {
        //System.out.println(":error_sync_size was called.");
        return 1; // not recommended by the CUP manual
}
  public void report_error(String message, Object info) {
    if (info instanceof String){
	errors++; 
      System.err.println("  "+ errors + "==> " + info + " "+ message + 
					"\n       Parsing resumed from 2nd token before" + s.current_lexeme()+"\n");
    }
    else {
    	StringBuffer m = new StringBuffer("Error ");
    	if (info instanceof java_cup.runtime.Symbol) 
     	   m.append( "("+info.toString()+")" );     
    	m.append(" : "+message);   
    	System.err.println(m);
    }
  }
   
  public void report_fatal_error(String message, Object info) {
    report_error(message, info);
    throw new RuntimeException("Fatal Syntax Error");
  }

// IDENTIFICADORES
public void recuerda_tipo()
{
    Tipo Reg_Tipo = new Tipo(s.yytext());
    pila.Push(Reg_Tipo); 
}
public void recuerda_id(Object type)
{
    
    Identificador temp = new Identificador(type.toString(),-1);
    //tokens.add(new Token(new Symbol(79,type.toString())));
    pila.Push(temp);
}
public void valor_id(Object valor)
{
    if(valor!= null){
        Literal temp = new Literal(valor.toString());
        pila.Push(temp);
    }
    else{
        Literal temp = new Literal("0");
        pila.Push(temp);
    }
}


public void inserta_TS()
{
    IData temp;
    boolean pasa = true;
    while(!pila.isEmpty()){
        temp = pila.Pop();
        if(temp.getTipo()==1){
            if(identis.contains(temp.valor())){
                 // EL IDENTIFICADOR YA HA SIDO AGREGADO
                 System.err.println("ERROR SEMANTICO: identificador "+ temp.valor()+" anteriormente instanciado");
                 pasa = false;
            }
            else{
                RESULT += temp.CodigoGenerar();
                identis.add(temp.valor());
            }
        }
        else{
        if(pasa)
            RESULT += temp.CodigoGenerar();
        
        else{
            pasa = true;
            // SE DEBE OMITIR EL AGREGAR, ya que es un valor inicial para un Error Semantico
        }
        }
    }
}

//EXPRESIONES ------------------------------------------------------------------------------------
//Crea un registro Identificador y lo guarda en la pila
public void identificador(Object id)
{
   Identificador temp = new Identificador(id.toString(),-1);

   if(verificar_TS(temp)){pila.Push(temp);}
   else{System.err.println("ERROR SEMANTICO: variable "+ temp.valor()+" no declarada");}
}

//Verifica si ya el id esta en la tabla de simbolos
public boolean verificar_TS(Identificador variable){

        if(identis.contains(variable.valor())){
            return true;
        }
        else{
            return false;
        }
}
//Crea un registro Literal y lo mete a la pila
public void literal(Object valor){

    if(valor!= null){
        Literal temp = new Literal(valor.toString());
        pila.Push(temp);
    }
    else{
        Literal temp = new Literal("0");
        pila.Push(temp);}
}

//Crea un registro operador y lo mete a la pila
public void operador(Object operator){

      Operador temp = new Operador(operator.toString());
      pila.Push(temp);
}

public void eval_binary(){

IData OperandoDerecho = pila.Pop();
IData Operador = pila.Pop();
IData OperandoIzquierdo = pila.Pop();

//Evaluar Tipo - No hayb que evaluar 

   switch(Operador.valor()){
      case "+": break;
      case "-": break;
      case "==": break;
      case ">=": break;
      case ">": break;
      case "<=": break;
      case "<": break;
      case "!=": break;
      case "||": break;
      case "&&":break;
      default: System.err.println("ERROR SEMANTICO: operador "+ Operador.valor()+" requiere solo un operando"); break;
   }

}

public void eval_unary(){}


// FUNCIONES
public void crear_slot_funcion()
{
    pila.Push(new Funcion(""));
}
public void funcion_Insertar(Object nombre)
{
    if(nombre.toString().equals("main"))
    {
        funciones.add(nombre.toString());
        MAIN += "main:\n";
        MAIN += "\tmov ax,datos\n";
        MAIN += "\tmov ds,ax\n";
        MAIN += "\tmov bx,ss\n";
        // HACER TODAS LAS COSAS CON LA PILA SEMENTICA
        Funcion temp = (Funcion) pila.Pop();
        MAIN += temp.valor();

        // VIENE EL CIERRE DEL PROGRAMA
        MAIN += "\ncierre:\n";
        MAIN += "\tmov ah,4ch\n";
        MAIN += "\tmov al,07h\n";
            
        MAIN += "\tint 21h\n\n";
        MAIN += "codigo endS\n";
        MAIN += "end main";

    }
    else{
        funciones.add(nombre.toString());
        FUNCIONES += nombre.toString()+" Proc Near\n";
        
        //HACER TODAS LAS COSAS CON LA PILA SEMANTICA
        Funcion temp = (Funcion) pila.Pop();
        FUNCIONES += temp.valor();
        FUNCIONES += "\tret\n";
        FUNCIONES += nombre.toString()+" endP\n\n";
    }
}
public void generar_llamado_funcion(Object obj)
{
    String temp = ((Funcion)pila.Pop()).valor();
    temp +="\tcall "+obj.toString()+"\n";
    pila.Push(new Funcion(temp));

}
public void revisar_Main()
{
    if(!funciones.contains("main"))
    {
        System.err.println("ERROR SEMANTICO: No se declaro ningun MAIN");
    }
    RESULT += FUNCIONES + MAIN;
}

// REVISAR RETURN
public void revisar_Return()
{
    cont_bucles--;
    if(esReturn && cont_bucles==0)
    {
        System.err.println("ERROR SEMANTICO: No se declaro return en la funcion");
        esReturn = false;
    }
}
public void generar_Return(Object obj)
{
    String temp = ((Funcion)pila.Pop()).valor();
    temp += "\tmov al,"+obj.toString()+"\n";
    pila.Push(new Funcion(temp));
}
// WHILE

public void iniciar_while()
{
    String temp = ((Funcion)pila.Pop()).valor();
    temp += "start_while"+cont_while+":\n";
    pila.Push(new Funcion(temp));
}
public void evaluar_while(Object pri,Object oper,Object seg)
{
    
    String temp = ((Funcion)pila.Pop()).valor();
    temp += "\tCMP "+pri.toString()+","+seg.toString()+"\n";
    
    if(oper.toString().equals("<=")){
        temp+= "\tJLE end_while"+cont_while+"\n";
    }
    else if(oper.toString().equals("=<")){
        temp+= "\tJGE end_while"+cont_while+"\n";    
    }
    else if(oper.toString().equals("!=")){
        temp+= "\tJNE end_while"+cont_while+"\n";    
    }
    else if(oper.toString().equals("==")){
        temp+= "\tJE end_while"+cont_while+"\n";    
    }
    else if(oper.toString().equals("<")){
        temp+= "\tJL end_while"+cont_while+"\n";    
    }
    else if(oper.toString().equals(">")){
        temp+= "\tJG end_while"+cont_while+"\n";    
    }
    else if(oper.toString().equals("||")){
        temp+= "\tJE end_while"+cont_while+"\n";    
    }
    else if(oper.toString().equals("&&")){
        temp+= "\tJNE end_while"+cont_while+"\n";    
    }
    pila.Push(new Funcion(temp));
}
public void evaluar_while_doble_identi(Object pri,Object oper,Object seg)
{
    
    String temp = ((Funcion)pila.Pop()).valor();
    temp += "\tmov al,"+seg.toString()+"\n";
    temp += "\tCMP "+pri.toString()+",al\n";
    
    if(oper.toString().equals("<=")){
        temp+= "\tJLE end_while"+cont_while+"\n";
    }
    else if(oper.toString().equals("=<")){
        temp+= "\tJGE end_while"+cont_while+"\n";    
    }
    else if(oper.toString().equals("!=")){
        temp+= "\tJNE end_while"+cont_while+"\n";    
    }
    else if(oper.toString().equals("==")){
        temp+= "\tJE end_while"+cont_while+"\n";    
    }
    else if(oper.toString().equals("<")){
        temp+= "\tJL end_while"+cont_while+"\n";    
    }
    else if(oper.toString().equals(">")){
        temp+= "\tJG end_while"+cont_while+"\n";    
    }
    else if(oper.toString().equals("||")){
        temp+= "\tJE end_while"+cont_while+"\n";    
    }
    else if(oper.toString().equals("&&")){
        temp+= "\tJNE end_while"+cont_while+"\n";    
    }
    pila.Push(new Funcion(temp));
}

public void evaluar_while_unario(Object pri,Object oper)
{
    String temp = ((Funcion)pila.Pop()).valor();
    temp += "\tCMP "+pri.toString()+",1\n";
    
    if(oper.toString().equals("!")){

        temp+= "\tJNE end_while"+cont_while+"\n";
    }
    else{
        temp+= "\tJE end_while"+cont_while+"\n";
    }
    pila.Push(new Funcion(temp));
}

public void terminar_while()
{
    String temp = ((Funcion)pila.Pop()).valor();
    temp +="\tJMP start_while"+cont_while+"\n";
    temp +="end_while"+cont_while+":\n";
    cont_while++;
    pila.Push(new Funcion(temp));
}

public void revisar_identi(Object pidenti)
{
    if(!identis.contains(pidenti.toString()))
    {
        System.err.println("ERROR SEMANTICO: Identificador => "+pidenti.toString()+" nunca declarado" );
    }
}

public void revisar_funcion(Object obj)
{
    if(!funciones.contains(obj.toString()))
    {
        System.err.println("ERROR SEMANTICO: Funcion => "+obj.toString()+" nunca declarada" );
    }
}

// IF-ELSE
public void iniciar_if()
{
    String temp = ((Funcion)pila.Pop()).valor();
    temp += "start_if"+cont_if+":\n";
    pila.Push(new Funcion(temp));
}
public void terminar_if()
{
    String temp = ((Funcion)pila.Pop()).valor();
    temp +="else"+cont_if+":\n";
    cont_if++;
    pila.Push(new Funcion(temp));
}
public void terminar_if_else()
{
    String temp = ((Funcion)pila.Pop()).valor();
    temp +="\tJMP end_else"+cont_if+"\n";
    temp +="else"+cont_if+":\n";
    pila.Push(new Funcion(temp));
}
public void terminar_else()
{
    String temp = ((Funcion)pila.Pop()).valor();
    temp +="end_else"+cont_if+":\n";
    cont_if++;
    pila.Push(new Funcion(temp));
}

public void evaluar_if(Object pri,Object oper,Object seg)
{
    
    String temp = ((Funcion)pila.Pop()).valor();
    temp += "\tCMP "+pri.toString()+","+seg.toString()+"\n";
    
    if(oper.toString().equals("<=")){
        temp+= "\tJLE else"+cont_if+"\n";
    }
    else if(oper.toString().equals("=<")){
        temp+= "\tJGE else"+cont_if+"\n";    
    }
    else if(oper.toString().equals("!=")){
        temp+= "\tJNE else"+cont_if+"\n";    
    }
    else if(oper.toString().equals("==")){
        temp+= "\tJE else"+cont_if+"\n";    
    }
    else if(oper.toString().equals("<")){
        temp+= "\tJL else"+cont_if+"\n";    
    }
    else if(oper.toString().equals(">")){
        temp+= "\tJG else"+cont_if+"\n";    
    }
    else if(oper.toString().equals("||")){
        temp+= "\tJE else"+cont_if+"\n";    
    }
    else if(oper.toString().equals("&&")){
        temp+= "\tJNE else"+cont_if+"\n";    
    }
    pila.Push(new Funcion(temp));
}
public void evaluar_if_doble_identi(Object pri,Object oper,Object seg)
{
    
    String temp = ((Funcion)pila.Pop()).valor();
    temp += "\tmov al,"+seg.toString()+"\n";
    temp += "\tCMP "+pri.toString()+",al\n";
    
    if(oper.toString().equals("<=")){
        temp+= "\tJLE else"+cont_if+"\n";
    }
    else if(oper.toString().equals("=<")){
        temp+= "\tJGE else"+cont_if+"\n";    
    }
    else if(oper.toString().equals("!=")){
        temp+= "\tJNE else"+cont_if+"\n";    
    }
    else if(oper.toString().equals("==")){
        temp+= "\tJE else"+cont_if+"\n";    
    }
    else if(oper.toString().equals("<")){
        temp+= "\tJL else"+cont_if+"\n";    
    }
    else if(oper.toString().equals(">")){
        temp+= "\tJG else"+cont_if+"\n";    
    }
    else if(oper.toString().equals("||")){
        temp+= "\tJE else"+cont_if+"\n";    
    }
    else if(oper.toString().equals("&&")){
        temp+= "\tJNE else"+cont_if+"\n";    
    }
    pila.Push(new Funcion(temp));
}

public void evaluar_if_unario(Object pri,Object oper)
{
    String temp = ((Funcion)pila.Pop()).valor();
    temp += "\tCMP "+pri.toString()+",1\n";
    
    if(oper.toString().equals("!")){

        temp+= "\tJNE else"+cont_if+"\n";
    }
    else{
        temp+= "\tJE else"+cont_if+"\n";
    }
    pila.Push(new Funcion(temp));
}

public void generar_read(Object obj)
{
    String temp = ((Funcion)pila.Pop()).valor();
    temp+= "\tread\n";
    temp+= "\tmov "+obj.toString()+",al\n";
    pila.Push(new Funcion(temp));       
}
public void generar_read()
{
    String temp = ((Funcion)pila.Pop()).valor();
    temp+= "\tread\n";
    pila.Push(new Funcion(temp));    
}

public void generar_write(Object obj)
{
    String temp = ((Funcion)pila.Pop()).valor();
    temp+= "\twrite "+obj.toString()+"\n";
    pila.Push(new Funcion(temp));    
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {


	


  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= estructura EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // estructura ::= statement_globales 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estructura",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // statement_globales ::= declaracion_identificador statement_globales 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_globales",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statement_globales ::= asignacion SEMICOLON statement_globales 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_globales",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statement_globales ::= declaracion_funciones statement_funciones 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_globales",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaracion_identificador ::= type IDENTIFIER varios_identificadores valor_inicial SEMICOLON 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		parser.recuerda_id(i);parser.inserta_TS();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_identificador",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$0 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.report_error("Error Sintactico: Declaracion Identificador",e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaracion_identificador ::= error NT$0 SEMICOLON 
            {
              String RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_identificador",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // varios_identificadores ::= COMMA IDENTIFIER varios_identificadores 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		parser.valor_id(null);parser.recuerda_id(i);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varios_identificadores",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // varios_identificadores ::= epsilon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varios_identificadores",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // valor_inicial ::= epsilon 
            {
              String RESULT =null;
		parser.valor_id(null);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_inicial",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // valor_inicial ::= EQ literal_numerico 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_inicial",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statement_funciones ::= declaracion_funciones statement_funciones 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_funciones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statement_funciones ::= epsilon 
            {
              String RESULT =null;
		parser.revisar_Main();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_funciones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$1 ::= 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.esReturn= true;parser.cont_bucles++;parser.crear_slot_funcion();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaracion_funciones ::= type IDENTIFIER NT$1 LPAREN RPAREN cuerpo_funcion 
            {
              String RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		parser.funcion_Insertar(i);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_funciones",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$2 ::= 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.esReturn= false;parser.cont_bucles++;parser.crear_slot_funcion();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declaracion_funciones ::= VOID IDENTIFIER NT$2 LPAREN RPAREN cuerpo_funcion 
            {
              String RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		parser.funcion_Insertar(i);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_funciones",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$3 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.report_error("Error Sintactico: Statement de Funciones",e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declaracion_funciones ::= error NT$3 RBRACE 
            {
              String RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_funciones",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // varios_tipos ::= COMMA type IDENTIFIER varios_tipos 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varios_tipos",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // varios_tipos ::= epsilon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varios_tipos",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // cuerpo_funcion ::= LBRACE cuerpo_funcion_aux 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_funcion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // cuerpo_funcion_aux ::= estructura_read cuerpo_funcion_aux 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_funcion_aux",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // cuerpo_funcion_aux ::= estructura_write cuerpo_funcion_aux 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_funcion_aux",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // cuerpo_funcion_aux ::= llamado_funcion cuerpo_funcion_aux 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_funcion_aux",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // cuerpo_funcion_aux ::= expresiones cuerpo_funcion_aux 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_funcion_aux",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // cuerpo_funcion_aux ::= statement_if cuerpo_funcion_aux 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_funcion_aux",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // cuerpo_funcion_aux ::= statement_while cuerpo_funcion_aux 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_funcion_aux",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // cuerpo_funcion_aux ::= RETURN IDENTIFIER SEMICOLON RBRACE 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		parser.revisar_identi(i);parser.esReturn=false;parser.cont_bucles=0;parser.generar_Return(i);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_funcion_aux",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // cuerpo_funcion_aux ::= RETURN INTEGER_LITERAL SEMICOLON RBRACE 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.lang.Number i = (java.lang.Number)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		parser.esReturn=false;parser.cont_bucles=0;parser.generar_Return(i);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_funcion_aux",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // cuerpo_funcion_aux ::= RBRACE 
            {
              String RESULT =null;
		parser.revisar_Return();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_funcion_aux",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$4 ::= 
            {
              String RESULT =null;
parser.cont_bucles++;parser.iniciar_if();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statement_if ::= IF NT$4 LPAREN expresiones_state_if RPAREN LBRACE cuerpo_funcion_aux statement_else 
            {
              String RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_if",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$5 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.report_error("Error Sintactico: Statement en IF",e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$5",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // statement_if ::= IF error NT$5 RBRACE 
            {
              String RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_if",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // statement_else ::= 
            {
              String RESULT =null;
		parser.terminar_if();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_else",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$6 ::= 
            {
              String RESULT =null;
parser.cont_bucles++;parser.terminar_if_else();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$6",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // statement_else ::= ELSE NT$6 LBRACE cuerpo_funcion_aux 
            {
              String RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		parser.terminar_else();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_else",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$7 ::= 
            {
              String RESULT =null;
parser.cont_bucles++;parser.iniciar_while();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$7",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // statement_while ::= WHILE NT$7 LPAREN expresiones_state RPAREN LBRACE cuerpo_funcion_aux 
            {
              String RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		parser.terminar_while();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_while",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$8 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.report_error("Error Sintactico: Statement en WHILE",e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$8",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // statement_while ::= WHILE error NT$8 RBRACE 
            {
              String RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_while",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // statement_for ::= FOR LPAREN expresiones_statement SEMICOLON expresiones_statement SEMICOLON expresiones_statement RPAREN LBRACE cuerpo_funcion_aux 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_for",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$9 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.report_error("Error Sintactico: Statement en FOR",e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$9",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // statement_for ::= FOR error NT$9 RBRACE 
            {
              String RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_for",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // statement_switch ::= SWITCH LPAREN expresiones_statement RPAREN LBRACE statement_switch_aux RBRACE 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_switch",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$10 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.report_error("Error Sintactico: Statement en SWITCH",e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$10",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // statement_switch ::= SWITCH error NT$10 RBRACE 
            {
              String RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_switch",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // statement_switch_aux ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_switch_aux",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // statement_switch_aux ::= CASE INTEGER_LITERAL COLON statement_cuerpo_case statement_switch_aux 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_switch_aux",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // statement_switch_aux ::= DEFAULT COLON statement_cuerpo_case statement_switch_aux 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_switch_aux",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NT$11 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.report_error("Error Sintactico: Statement en CASE",e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$11",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // statement_switch_aux ::= CASE error NT$11 SEMICOLON 
            {
              String RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_switch_aux",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$12 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.report_error("Error Sintactico: Statement en DEFAULT",e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$12",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // statement_switch_aux ::= DEFAULT error NT$12 SEMICOLON 
            {
              String RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_switch_aux",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // statement_cuerpo_case ::= estructura_read statement_cuerpo_case 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_cuerpo_case",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // statement_cuerpo_case ::= estructura_write statement_cuerpo_case 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_cuerpo_case",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // statement_cuerpo_case ::= llamado_funcion statement_cuerpo_case 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_cuerpo_case",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // statement_cuerpo_case ::= expresiones statement_cuerpo_case 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_cuerpo_case",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // statement_cuerpo_case ::= BREAK SEMICOLON 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_cuerpo_case",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // otras_palabras ::= CONTINUE SEMICOLON 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("otras_palabras",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // otras_palabras ::= BREAK SEMICOLON 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("otras_palabras",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // otras_palabras ::= RETURN return_variables SEMICOLON 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("otras_palabras",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // return_variables ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return_variables",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // return_variables ::= literal 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return_variables",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // return_variables ::= IDENTIFIER 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return_variables",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // statement_variables_locales_inicio ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_variables_locales_inicio",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // statement_variables_locales_inicio ::= epsilon statement_variables_locales 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_variables_locales_inicio",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // statement_variables_locales ::= declaracion_identificador 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_variables_locales",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // statement_variables_locales ::= declaracion_identificador statement_variables_locales 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_variables_locales",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // operadores_unarios ::= PLUS_PLUS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadores_unarios",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // operadores_unarios ::= MINUS_MINUS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadores_unarios",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // operadores_binarios ::= PLUS 
            {
              String RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.operador(o);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadores_binarios",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // operadores_binarios ::= MINUS 
            {
              String RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.operador(o);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadores_binarios",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // operadores_binarios ::= MULT 
            {
              String RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.operador(o);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadores_binarios",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // operadores_binarios ::= DIV 
            {
              String RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.operador(o);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadores_binarios",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // operadores_binarios ::= MOD 
            {
              String RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.operador(o);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadores_binarios",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // operadores_asignacion ::= EQ 
            {
              String RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.operador(o);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadores_asignacion",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // operadores_asignacion ::= PLUS_EQ 
            {
              String RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.operador(o);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadores_asignacion",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // operadores_asignacion ::= MINUS_EQ 
            {
              String RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.operador(o);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadores_asignacion",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // operadores_asignacion ::= MULT_EQ 
            {
              String RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.operador(o);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadores_asignacion",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // operadores_asignacion ::= DIV_EQ 
            {
              String RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.operador(o);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadores_asignacion",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // operadores_booleanos ::= OROR 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadores_booleanos",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // operadores_booleanos ::= ANDAND 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadores_booleanos",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // operadores_booleanos ::= EQEQ 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadores_booleanos",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // operadores_booleanos ::= GTEQ 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadores_booleanos",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // operadores_booleanos ::= GT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadores_booleanos",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // operadores_booleanos ::= LTEQ 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadores_booleanos",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // operadores_booleanos ::= LT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadores_booleanos",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // operadores_booleanos ::= NOTEQ 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadores_booleanos",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // literal ::= INTEGER_LITERAL 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // literal ::= FLOATING_POINT_LITERAL 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // literal ::= BOOLEAN_LITERAL 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // literal ::= CHARACTER_LITERAL 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // literal ::= STRING_LITERAL 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // literal ::= HEX_LITERAL 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // literal ::= OCT_LITERAL 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // literal ::= NULL_LITERAL 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // literal_numerico ::= INTEGER_LITERAL 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.Number v = (java.lang.Number)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.valor_id(v);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal_numerico",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // literal_numerico ::= FLOATING_POINT_LITERAL 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.Number v = (java.lang.Number)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.valor_id(v);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal_numerico",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // literal_numerico ::= HEX_LITERAL 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.valor_id(v);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal_numerico",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // literal_numerico ::= OCT_LITERAL 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.valor_id(v);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal_numerico",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // type ::= BOOLEAN 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // type ::= INT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // type ::= CHAR 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // type ::= FLOAT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // type ::= LONG 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // type ::= SHORT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // estructura_read ::= READ LPAREN RPAREN SEMICOLON 
            {
              String RESULT =null;
		parser.generar_read();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estructura_read",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // estructura_read ::= READ LPAREN IDENTIFIER RPAREN SEMICOLON 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		parser.generar_read(i);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estructura_read",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // NT$13 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.report_error("Error Sintactico: Uso de READ",e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$13",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // estructura_read ::= READ error NT$13 SEMICOLON 
            {
              String RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estructura_read",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // estructura_read_parametros ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estructura_read_parametros",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // estructura_write ::= WRITE LPAREN estructura_write_parametros_aux RPAREN SEMICOLON 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estructura_write",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // NT$14 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.report_error("Error Sintactico: Uso de WRITE",e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$14",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // estructura_write ::= WRITE error NT$14 SEMICOLON 
            {
              String RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estructura_write",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // estructura_write_parametros ::= estructura_write_parametros_aux 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estructura_write_parametros",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // estructura_write_parametros ::= estructura_write_parametros_aux COMMA estructura_write_parametros 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estructura_write_parametros",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // estructura_write_parametros_aux ::= IDENTIFIER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.generar_write(i);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estructura_write_parametros_aux",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // estructura_write_parametros_aux ::= INTEGER_LITERAL 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.Number i = (java.lang.Number)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.generar_write(i);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estructura_write_parametros_aux",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // llamado_funcion ::= IDENTIFIER LPAREN RPAREN SEMICOLON 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		parser.revisar_funcion(i);parser.generar_llamado_funcion(i);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamado_funcion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // NT$15 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.report_error("Error Sintactico: LLAMADO DE FUNCION",e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$15",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // llamado_funcion ::= IDENTIFIER error NT$15 SEMICOLON 
            {
              String RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamado_funcion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // expresiones ::= expresiones_statement SEMICOLON 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // expresiones_statement ::= asignacion 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones_statement",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // expresiones_statement ::= expresion_aritmetica 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones_statement",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // expresiones_statement ::= expresion_booleana 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones_statement",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // asignacion ::= IDENTIFIER operadores_asignacion expresion_aritmetica 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		parser.identificador(i);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // expresion_aritmetica ::= expresion_aritmetica_unaria 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // expresion_aritmetica ::= expresion_aritmetica_binaria 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // expresion_aritmetica ::= LPAREN expresion_aritmetica RPAREN 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // expresion_aritmetica ::= IDENTIFIER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.identificador(i);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // expresion_aritmetica ::= literal_numerico 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // expresion_aritmetica_unaria ::= operadores_unarios IDENTIFIER 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica_unaria",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // expresion_aritmetica_unaria ::= IDENTIFIER operadores_unarios 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica_unaria",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // expresion_aritmetica_unaria ::= MINUS literal_numerico 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica_unaria",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // expresion_aritmetica_unaria ::= MINUS IDENTIFIER 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica_unaria",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // expresion_aritmetica_binaria ::= expresion_aritmetica operadores_binarios expresion_aritmetica 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica_binaria",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // expresion_booleana ::= expresion_aritmetica operadores_booleanos expresion_aritmetica 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion_booleana",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // expresion_booleana ::= NOT expresion_aritmetica 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion_booleana",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // expresion_booleana ::= LPAREN expresion_booleana RPAREN 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion_booleana",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // expresiones_state ::= INTEGER_LITERAL EQEQ INTEGER_LITERAL 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.lang.Number i = (java.lang.Number)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.Number e = (java.lang.Number)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.evaluar_while(i,o,e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones_state",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // expresiones_state ::= INTEGER_LITERAL EQEQ IDENTIFIER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.lang.Number i = (java.lang.Number)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.String e = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.revisar_identi(e);parser.evaluar_while(i,o,e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones_state",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // expresiones_state ::= IDENTIFIER EQEQ INTEGER_LITERAL 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.Number e = (java.lang.Number)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.revisar_identi(i);parser.evaluar_while(i,o,e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones_state",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // expresiones_state ::= IDENTIFIER EQEQ IDENTIFIER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.String e = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.revisar_identi(i);parser.revisar_identi(e);parser.evaluar_while_doble_identi(i,o,e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones_state",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // expresiones_state ::= INTEGER_LITERAL LTEQ INTEGER_LITERAL 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.lang.Number i = (java.lang.Number)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.Number e = (java.lang.Number)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.evaluar_while(i,o,e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones_state",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // expresiones_state ::= INTEGER_LITERAL LTEQ IDENTIFIER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.lang.Number i = (java.lang.Number)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.String e = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.revisar_identi(e);parser.evaluar_while(i,o,e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones_state",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // expresiones_state ::= IDENTIFIER LTEQ INTEGER_LITERAL 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.Number e = (java.lang.Number)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.revisar_identi(i);parser.evaluar_while(i,o,e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones_state",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // expresiones_state ::= IDENTIFIER LTEQ IDENTIFIER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.String e = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.revisar_identi(i);parser.revisar_identi(e);parser.evaluar_while_doble_identi(i,o,e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones_state",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // expresiones_state ::= INTEGER_LITERAL GTEQ INTEGER_LITERAL 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.lang.Number i = (java.lang.Number)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.Number e = (java.lang.Number)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.evaluar_while(i,o,e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones_state",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // expresiones_state ::= INTEGER_LITERAL GTEQ IDENTIFIER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.lang.Number i = (java.lang.Number)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.String e = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.revisar_identi(e);parser.evaluar_while(i,o,e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones_state",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // expresiones_state ::= IDENTIFIER GTEQ INTEGER_LITERAL 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.Number e = (java.lang.Number)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.revisar_identi(i);parser.evaluar_while(i,o,e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones_state",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // expresiones_state ::= IDENTIFIER GTEQ IDENTIFIER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.String e = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.revisar_identi(i);parser.revisar_identi(e);parser.evaluar_while_doble_identi(i,o,e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones_state",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // expresiones_state ::= INTEGER_LITERAL NOTEQ INTEGER_LITERAL 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.lang.Number i = (java.lang.Number)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.Number e = (java.lang.Number)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.evaluar_while(i,o,e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones_state",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // expresiones_state ::= INTEGER_LITERAL NOTEQ IDENTIFIER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.lang.Number i = (java.lang.Number)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.String e = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.revisar_identi(e);parser.evaluar_while(i,o,e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones_state",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // expresiones_state ::= IDENTIFIER NOTEQ INTEGER_LITERAL 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.Number e = (java.lang.Number)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.revisar_identi(i);parser.evaluar_while(i,o,e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones_state",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // expresiones_state ::= IDENTIFIER NOTEQ IDENTIFIER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.String e = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.revisar_identi(i);parser.revisar_identi(e);parser.evaluar_while_doble_identi(i,o,e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones_state",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // expresiones_state ::= INTEGER_LITERAL ANDAND INTEGER_LITERAL 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.lang.Number i = (java.lang.Number)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.Number e = (java.lang.Number)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.evaluar_while(i,o,e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones_state",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // expresiones_state ::= INTEGER_LITERAL ANDAND IDENTIFIER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.lang.Number i = (java.lang.Number)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.String e = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.revisar_identi(e);parser.evaluar_while(i,o,e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones_state",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // expresiones_state ::= IDENTIFIER ANDAND INTEGER_LITERAL 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.Number e = (java.lang.Number)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.revisar_identi(i);parser.evaluar_while(i,o,e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones_state",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // expresiones_state ::= IDENTIFIER ANDAND IDENTIFIER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.String e = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.revisar_identi(i);parser.revisar_identi(e);parser.evaluar_while_doble_identi(i,o,e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones_state",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // expresiones_state ::= INTEGER_LITERAL OROR INTEGER_LITERAL 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.lang.Number i = (java.lang.Number)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.Number e = (java.lang.Number)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.evaluar_while(i,o,e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones_state",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // expresiones_state ::= INTEGER_LITERAL OROR IDENTIFIER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.lang.Number i = (java.lang.Number)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.String e = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.revisar_identi(e);parser.evaluar_while(i,o,e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones_state",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // expresiones_state ::= IDENTIFIER OROR INTEGER_LITERAL 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.Number e = (java.lang.Number)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.revisar_identi(i);parser.evaluar_while(i,o,e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones_state",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // expresiones_state ::= IDENTIFIER OROR IDENTIFIER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.String e = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.revisar_identi(i);parser.revisar_identi(e);parser.evaluar_while_doble_identi(i,o,e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones_state",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // expresiones_state ::= INTEGER_LITERAL GT INTEGER_LITERAL 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.lang.Number i = (java.lang.Number)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.Number e = (java.lang.Number)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.evaluar_while(i,o,e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones_state",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // expresiones_state ::= INTEGER_LITERAL GT IDENTIFIER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.lang.Number i = (java.lang.Number)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.String e = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.revisar_identi(e);parser.evaluar_while(i,o,e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones_state",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // expresiones_state ::= IDENTIFIER GT INTEGER_LITERAL 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.Number e = (java.lang.Number)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.revisar_identi(i);parser.evaluar_while(i,o,e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones_state",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // expresiones_state ::= IDENTIFIER GT IDENTIFIER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.String e = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.revisar_identi(i);parser.revisar_identi(e);parser.evaluar_while_doble_identi(i,o,e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones_state",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // expresiones_state ::= INTEGER_LITERAL LT INTEGER_LITERAL 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.lang.Number i = (java.lang.Number)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.Number e = (java.lang.Number)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.evaluar_while(i,o,e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones_state",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // expresiones_state ::= INTEGER_LITERAL LT IDENTIFIER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.lang.Number i = (java.lang.Number)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.String e = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.revisar_identi(e);parser.evaluar_while(i,o,e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones_state",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // expresiones_state ::= IDENTIFIER LT INTEGER_LITERAL 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.Number e = (java.lang.Number)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.revisar_identi(i);parser.evaluar_while(i,o,e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones_state",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // expresiones_state ::= IDENTIFIER LT IDENTIFIER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.String e = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.revisar_identi(i);parser.revisar_identi(e);parser.evaluar_while_doble_identi(i,o,e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones_state",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // expresiones_state ::= NOT IDENTIFIER 
            {
              String RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.revisar_identi(i);parser.evaluar_while_unario(i,o);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones_state",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // expresiones_state ::= NOT INTEGER_LITERAL 
            {
              String RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.Number i = (java.lang.Number)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.evaluar_while_unario(i,o);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones_state",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // expresiones_state ::= IDENTIFIER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.revisar_identi(i);parser.evaluar_while_unario(i,"n");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones_state",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // expresiones_state ::= INTEGER_LITERAL 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.Number i = (java.lang.Number)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.evaluar_while_unario(i,"n");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones_state",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // expresiones_state_if ::= INTEGER_LITERAL EQEQ INTEGER_LITERAL 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.lang.Number i = (java.lang.Number)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.Number e = (java.lang.Number)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.evaluar_if(i,o,e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones_state_if",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // expresiones_state_if ::= INTEGER_LITERAL EQEQ IDENTIFIER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.lang.Number i = (java.lang.Number)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.String e = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.revisar_identi(e);parser.evaluar_if(i,o,e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones_state_if",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // expresiones_state_if ::= IDENTIFIER EQEQ INTEGER_LITERAL 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.Number e = (java.lang.Number)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.revisar_identi(i);parser.evaluar_if(i,o,e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones_state_if",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // expresiones_state_if ::= IDENTIFIER EQEQ IDENTIFIER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.String e = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.revisar_identi(i);parser.revisar_identi(e);parser.evaluar_if_doble_identi(i,o,e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones_state_if",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // expresiones_state_if ::= INTEGER_LITERAL LTEQ INTEGER_LITERAL 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.lang.Number i = (java.lang.Number)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.Number e = (java.lang.Number)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.evaluar_if(i,o,e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones_state_if",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // expresiones_state_if ::= INTEGER_LITERAL LTEQ IDENTIFIER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.lang.Number i = (java.lang.Number)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.String e = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.revisar_identi(e);parser.evaluar_if(i,o,e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones_state_if",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // expresiones_state_if ::= IDENTIFIER LTEQ INTEGER_LITERAL 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.Number e = (java.lang.Number)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.revisar_identi(i);parser.evaluar_if(i,o,e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones_state_if",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // expresiones_state_if ::= IDENTIFIER LTEQ IDENTIFIER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.String e = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.revisar_identi(i);parser.revisar_identi(e);parser.evaluar_if_doble_identi(i,o,e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones_state_if",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // expresiones_state_if ::= INTEGER_LITERAL GTEQ INTEGER_LITERAL 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.lang.Number i = (java.lang.Number)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.Number e = (java.lang.Number)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.evaluar_if(i,o,e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones_state_if",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // expresiones_state_if ::= INTEGER_LITERAL GTEQ IDENTIFIER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.lang.Number i = (java.lang.Number)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.String e = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.revisar_identi(e);parser.evaluar_if(i,o,e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones_state_if",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // expresiones_state_if ::= IDENTIFIER GTEQ INTEGER_LITERAL 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.Number e = (java.lang.Number)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.revisar_identi(i);parser.evaluar_if(i,o,e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones_state_if",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // expresiones_state_if ::= IDENTIFIER GTEQ IDENTIFIER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.String e = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.revisar_identi(i);parser.revisar_identi(e);parser.evaluar_if_doble_identi(i,o,e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones_state_if",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // expresiones_state_if ::= INTEGER_LITERAL NOTEQ INTEGER_LITERAL 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.lang.Number i = (java.lang.Number)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.Number e = (java.lang.Number)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.evaluar_if(i,o,e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones_state_if",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // expresiones_state_if ::= INTEGER_LITERAL NOTEQ IDENTIFIER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.lang.Number i = (java.lang.Number)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.String e = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.revisar_identi(e);parser.evaluar_if(i,o,e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones_state_if",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // expresiones_state_if ::= IDENTIFIER NOTEQ INTEGER_LITERAL 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.Number e = (java.lang.Number)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.revisar_identi(i);parser.evaluar_if(i,o,e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones_state_if",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // expresiones_state_if ::= IDENTIFIER NOTEQ IDENTIFIER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.String e = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.revisar_identi(i);parser.revisar_identi(e);parser.evaluar_if_doble_identi(i,o,e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones_state_if",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // expresiones_state_if ::= INTEGER_LITERAL ANDAND INTEGER_LITERAL 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.lang.Number i = (java.lang.Number)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.Number e = (java.lang.Number)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.evaluar_if(i,o,e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones_state_if",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // expresiones_state_if ::= INTEGER_LITERAL ANDAND IDENTIFIER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.lang.Number i = (java.lang.Number)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.String e = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.revisar_identi(e);parser.evaluar_if(i,o,e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones_state_if",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // expresiones_state_if ::= IDENTIFIER ANDAND INTEGER_LITERAL 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.Number e = (java.lang.Number)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.revisar_identi(i);parser.evaluar_if(i,o,e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones_state_if",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // expresiones_state_if ::= IDENTIFIER ANDAND IDENTIFIER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.String e = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.revisar_identi(i);parser.revisar_identi(e);parser.evaluar_if_doble_identi(i,o,e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones_state_if",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // expresiones_state_if ::= INTEGER_LITERAL OROR INTEGER_LITERAL 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.lang.Number i = (java.lang.Number)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.Number e = (java.lang.Number)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.evaluar_if(i,o,e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones_state_if",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // expresiones_state_if ::= INTEGER_LITERAL OROR IDENTIFIER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.lang.Number i = (java.lang.Number)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.String e = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.revisar_identi(e);parser.evaluar_if(i,o,e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones_state_if",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // expresiones_state_if ::= IDENTIFIER OROR INTEGER_LITERAL 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.Number e = (java.lang.Number)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.revisar_identi(i);parser.evaluar_if(i,o,e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones_state_if",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // expresiones_state_if ::= IDENTIFIER OROR IDENTIFIER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.String e = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.revisar_identi(i);parser.revisar_identi(e);parser.evaluar_if_doble_identi(i,o,e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones_state_if",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // expresiones_state_if ::= INTEGER_LITERAL GT INTEGER_LITERAL 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.lang.Number i = (java.lang.Number)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.Number e = (java.lang.Number)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.evaluar_if(i,o,e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones_state_if",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // expresiones_state_if ::= INTEGER_LITERAL GT IDENTIFIER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.lang.Number i = (java.lang.Number)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.String e = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.revisar_identi(e);parser.evaluar_if(i,o,e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones_state_if",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // expresiones_state_if ::= IDENTIFIER GT INTEGER_LITERAL 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.Number e = (java.lang.Number)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.revisar_identi(i);parser.evaluar_if(i,o,e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones_state_if",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // expresiones_state_if ::= IDENTIFIER GT IDENTIFIER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.String e = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.revisar_identi(i);parser.revisar_identi(e);parser.evaluar_if_doble_identi(i,o,e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones_state_if",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // expresiones_state_if ::= INTEGER_LITERAL LT INTEGER_LITERAL 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.lang.Number i = (java.lang.Number)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.Number e = (java.lang.Number)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.evaluar_if(i,o,e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones_state_if",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // expresiones_state_if ::= INTEGER_LITERAL LT IDENTIFIER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.lang.Number i = (java.lang.Number)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.String e = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.revisar_identi(e);parser.evaluar_if(i,o,e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones_state_if",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // expresiones_state_if ::= IDENTIFIER LT INTEGER_LITERAL 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.Number e = (java.lang.Number)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.revisar_identi(i);parser.evaluar_if(i,o,e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones_state_if",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // expresiones_state_if ::= IDENTIFIER LT IDENTIFIER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.String e = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.revisar_identi(i);parser.revisar_identi(e);parser.evaluar_if_doble_identi(i,o,e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones_state_if",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // expresiones_state_if ::= NOT IDENTIFIER 
            {
              String RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.revisar_identi(i);parser.evaluar_if_unario(i,o);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones_state_if",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // expresiones_state_if ::= NOT INTEGER_LITERAL 
            {
              String RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.Number i = (java.lang.Number)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.evaluar_if_unario(i,o);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones_state_if",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // expresiones_state_if ::= IDENTIFIER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.revisar_identi(i);parser.evaluar_if_unario(i,"n");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones_state_if",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // expresiones_state_if ::= INTEGER_LITERAL 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.Number i = (java.lang.Number)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.evaluar_if_unario(i,"n");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones_state_if",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // epsilon ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("epsilon",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}


package analizador_semantico;


//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Thu Jun 19 13:13:47 CST 2014
//----------------------------------------------------

import Token.JavaSymbol;
import Token.sym.*;
import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import analizador_lexico.*;
import generador.*;
import java.util.ArrayList;
import Token.sym.*;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Thu Jun 19 13:13:47 CST 2014
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\215\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\004\000\002\023\007\000\002\056\002" +
    "\000\002\023\005\000\002\024\005\000\002\024\003\000" +
    "\002\025\003\000\002\025\004\000\002\004\004\000\002" +
    "\004\003\000\002\057\002\000\002\026\010\000\002\060" +
    "\002\000\002\026\010\000\002\061\002\000\002\026\005" +
    "\000\002\027\006\000\002\027\003\000\002\005\004\000" +
    "\002\006\004\000\002\006\004\000\002\006\004\000\002" +
    "\006\004\000\002\006\004\000\002\006\004\000\002\006" +
    "\006\000\002\006\003\000\002\012\011\000\002\062\002" +
    "\000\002\012\006\000\002\015\002\000\002\015\005\000" +
    "\002\063\002\000\002\064\002\000\002\013\012\000\002" +
    "\065\002\000\002\013\006\000\002\014\014\000\002\066" +
    "\002\000\002\014\006\000\002\016\011\000\002\067\002" +
    "\000\002\016\006\000\002\017\002\000\002\017\007\000" +
    "\002\017\006\000\002\070\002\000\002\017\006\000\002" +
    "\071\002\000\002\017\006\000\002\020\004\000\002\020" +
    "\004\000\002\020\004\000\002\020\004\000\002\020\004" +
    "\000\002\021\004\000\002\021\004\000\002\021\005\000" +
    "\002\022\002\000\002\022\003\000\002\022\003\000\002" +
    "\010\002\000\002\010\004\000\002\011\003\000\002\011" +
    "\004\000\002\042\003\000\002\042\003\000\002\043\003" +
    "\000\002\043\003\000\002\043\003\000\002\043\003\000" +
    "\002\043\003\000\002\044\003\000\002\044\003\000\002" +
    "\044\003\000\002\044\003\000\002\044\003\000\002\045" +
    "\003\000\002\045\003\000\002\045\003\000\002\045\003" +
    "\000\002\045\003\000\002\045\003\000\002\045\003\000" +
    "\002\045\003\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\030\003\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\032\003\000\002\032\003\000\002\046" +
    "\006\000\002\046\007\000\002\072\002\000\002\046\006" +
    "\000\002\047\003\000\002\050\007\000\002\073\002\000" +
    "\002\050\006\000\002\051\003\000\002\051\005\000\002" +
    "\052\003\000\002\052\003\000\002\007\006\000\002\007" +
    "\007\000\002\074\002\000\002\007\006\000\002\033\004" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\035\005\000\002\036\003\000\002\036\003\000\002" +
    "\036\005\000\002\036\003\000\002\036\003\000\002\037" +
    "\004\000\002\037\004\000\002\037\004\000\002\037\004" +
    "\000\002\040\005\000\002\041\005\000\002\041\004\000" +
    "\002\041\005\000\002\055\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\270\000\022\003\013\004\011\005\017\007\004\013" +
    "\012\015\016\016\005\017\020\001\002\000\004\121\uff9c" +
    "\001\002\000\004\121\uff99\001\002\000\022\003\013\004" +
    "\011\005\017\007\004\013\012\015\016\016\005\017\020" +
    "\001\002\000\004\002\000\001\002\000\024\002\uff75\003" +
    "\265\004\011\005\017\007\004\013\012\015\016\016\005" +
    "\017\020\001\002\000\004\121\uff9d\001\002\000\004\121" +
    "\256\001\002\000\006\047\ufff0\052\ufffc\001\002\000\004" +
    "\121\022\001\002\000\004\002\021\001\002\000\004\121" +
    "\uff9a\001\002\000\004\121\uff9b\001\002\000\004\121\uff98" +
    "\001\002\000\004\002\001\001\002\000\012\052\uff75\053" +
    "\023\105\ufff4\107\uff75\001\002\000\004\121\250\001\002" +
    "\000\004\105\040\001\002\000\006\052\uff75\107\027\001" +
    "\002\000\006\052\ufff9\107\ufff9\001\002\000\012\122\036" +
    "\123\033\127\034\130\037\001\002\000\004\052\032\001" +
    "\002\000\004\052\ufff8\001\002\000\022\003\ufffd\004\ufffd" +
    "\005\ufffd\007\ufffd\013\ufffd\015\ufffd\016\ufffd\017\ufffd\001" +
    "\002\000\040\052\uffa0\060\uffa0\061\uffa0\062\uffa0\063\uffa0" +
    "\064\uffa0\106\uffa0\110\uffa0\111\uffa0\112\uffa0\113\uffa0\114" +
    "\uffa0\116\uffa0\117\uffa0\120\uffa0\001\002\000\040\052\uff9f" +
    "\060\uff9f\061\uff9f\062\uff9f\063\uff9f\064\uff9f\106\uff9f\110" +
    "\uff9f\111\uff9f\112\uff9f\113\uff9f\114\uff9f\116\uff9f\117\uff9f" +
    "\120\uff9f\001\002\000\004\052\ufff7\001\002\000\040\052" +
    "\uffa1\060\uffa1\061\uffa1\062\uffa1\063\uffa1\064\uffa1\106\uffa1" +
    "\110\uffa1\111\uffa1\112\uffa1\113\uffa1\114\uffa1\116\uffa1\117" +
    "\uffa1\120\uffa1\001\002\000\040\052\uff9e\060\uff9e\061\uff9e" +
    "\062\uff9e\063\uff9e\064\uff9e\106\uff9e\110\uff9e\111\uff9e\112" +
    "\uff9e\113\uff9e\114\uff9e\116\uff9e\117\uff9e\120\uff9e\001\002" +
    "\000\004\106\041\001\002\000\004\046\042\001\002\000" +
    "\052\010\062\012\057\014\053\027\050\030\064\047\052" +
    "\055\055\061\071\065\056\066\101\105\063\121\060\122" +
    "\076\123\073\124\054\125\100\126\067\127\044\130\046" +
    "\131\104\001\002\000\024\002\ufff3\003\ufff3\004\ufff3\005" +
    "\ufff3\007\ufff3\013\ufff3\015\ufff3\016\ufff3\017\ufff3\001\002" +
    "\000\040\052\uffa4\060\uffa4\061\uffa4\062\uffa4\063\uffa4\064" +
    "\uffa4\106\uffa4\110\uffa4\111\uffa4\112\uffa4\113\uffa4\114\uffa4" +
    "\116\uffa4\117\uffa4\120\uffa4\001\002\000\052\010\062\012" +
    "\057\014\053\027\050\030\064\047\052\055\055\061\071" +
    "\065\056\066\101\105\063\121\060\122\076\123\073\124" +
    "\054\125\100\126\067\127\044\130\046\131\104\001\002" +
    "\000\040\052\uffa3\060\uffa3\061\uffa3\062\uffa3\063\uffa3\064" +
    "\uffa3\106\uffa3\110\uffa3\111\uffa3\112\uffa3\113\uffa3\114\uffa3" +
    "\116\uffa3\117\uffa3\120\uffa3\001\002\000\024\002\uffec\003" +
    "\uffec\004\uffec\005\uffec\007\uffec\013\uffec\015\uffec\016\uffec" +
    "\017\uffec\001\002\000\006\003\235\105\236\001\002\000" +
    "\004\052\234\001\002\000\076\002\uffe4\003\uffe4\004\uffe4" +
    "\005\uffe4\006\uffe4\007\uffe4\010\uffe4\012\uffe4\013\uffe4\014" +
    "\uffe4\015\uffe4\016\uffe4\017\uffe4\027\uffe4\030\uffe4\047\uffe4" +
    "\055\uffe4\061\uffe4\065\uffe4\066\uffe4\105\uffe4\121\uffe4\122" +
    "\uffe4\123\uffe4\124\uffe4\125\uffe4\126\uffe4\127\uffe4\130\uffe4" +
    "\131\uffe4\001\002\000\006\003\222\105\uffde\001\002\000" +
    "\040\052\uffa7\060\uffa7\061\uffa7\062\uffa7\063\uffa7\064\uffa7" +
    "\106\uffa7\110\uffa7\111\uffa7\112\uffa7\113\uffa7\114\uffa7\116" +
    "\uffa7\117\uffa7\120\uffa7\001\002\000\034\061\071\065\056" +
    "\066\101\105\131\121\130\122\076\123\073\124\054\125" +
    "\100\126\067\127\044\130\046\131\104\001\002\000\042" +
    "\052\uffbd\060\uffbd\061\uffbd\062\uffbd\063\uffbd\064\uffbd\106" +
    "\uffbd\110\uffbd\111\uffbd\112\uffbd\113\uffbd\114\uffbd\116\uffbd" +
    "\117\uffbd\120\uffbd\121\uffbd\001\002\000\012\122\036\123" +
    "\033\127\034\130\037\001\002\000\060\003\203\052\uff7f" +
    "\060\uff7f\061\uff7f\062\uff7f\063\uff7f\064\uff7f\065\056\066" +
    "\101\067\155\070\154\071\152\072\150\105\204\107\153" +
    "\110\uff7f\111\uff7f\112\uff7f\113\uff7f\114\uff7f\116\uff7f\117" +
    "\uff7f\120\uff7f\001\002\000\052\010\062\012\057\014\053" +
    "\027\050\030\064\047\052\055\055\061\071\065\056\066" +
    "\101\105\063\121\060\122\076\123\073\124\054\125\100" +
    "\126\067\127\044\130\046\131\104\001\002\000\006\003" +
    "\166\105\167\001\002\000\036\055\055\061\071\065\056" +
    "\066\101\105\063\121\130\122\076\123\073\124\054\125" +
    "\100\126\067\127\044\130\046\131\104\001\002\000\006" +
    "\003\144\105\145\001\002\000\006\052\uff86\106\uff86\001" +
    "\002\000\052\010\062\012\057\014\053\027\050\030\064" +
    "\047\052\055\055\061\071\065\056\066\101\105\063\121" +
    "\060\122\076\123\073\124\054\125\100\126\067\127\044" +
    "\130\046\131\104\001\002\000\040\052\uffa5\060\uffa5\061" +
    "\uffa5\062\uffa5\063\uffa5\064\uffa5\106\uffa5\110\uffa5\111\uffa5" +
    "\112\uffa5\113\uffa5\114\uffa5\116\uffa5\117\uffa5\120\uffa5\001" +
    "\002\000\052\010\062\012\057\014\053\027\050\030\064" +
    "\047\052\055\055\061\071\065\056\066\101\105\063\121" +
    "\060\122\076\123\073\124\054\125\100\126\067\127\044" +
    "\130\046\131\104\001\002\000\014\121\141\122\036\123" +
    "\033\127\034\130\037\001\002\000\040\052\uff82\060\uff82" +
    "\061\uff82\062\uff82\063\uff82\064\uff82\106\uff82\110\uff82\111" +
    "\uff82\112\uff82\113\uff82\114\uff82\116\uff82\117\uff82\120\uff82" +
    "\001\002\000\040\052\uffa8\060\uffa8\061\uffa8\062\uffa8\063" +
    "\uffa8\064\uffa8\106\uffa8\110\uffa8\111\uffa8\112\uffa8\113\uffa8" +
    "\114\uffa8\116\uffa8\117\uffa8\120\uffa8\001\002\000\040\052" +
    "\uff7e\060\uff7e\061\uff7e\062\uff7e\063\uff7e\064\uff7e\106\uff7e" +
    "\110\uff7e\111\uff7e\112\uff7e\113\uff7e\114\uff7e\116\uff7e\117" +
    "\uff7e\120\uff7e\001\002\000\052\010\062\012\057\014\053" +
    "\027\050\030\064\047\052\055\055\061\071\065\056\066" +
    "\101\105\063\121\060\122\076\123\073\124\054\125\100" +
    "\126\067\127\044\130\046\131\104\001\002\000\040\052" +
    "\uffa9\060\uffa9\061\uffa9\062\uffa9\063\uffa9\064\uffa9\106\uffa9" +
    "\110\uffa9\111\uffa9\112\uffa9\113\uffa9\114\uffa9\116\uffa9\117" +
    "\uffa9\120\uffa9\001\002\000\040\052\uff85\060\122\061\111" +
    "\062\116\063\125\064\120\106\uff85\110\113\111\126\112" +
    "\115\113\121\114\117\116\114\117\124\120\127\001\002" +
    "\000\040\052\uffa6\060\uffa6\061\uffa6\062\uffa6\063\uffa6\064" +
    "\uffa6\106\uffa6\110\uffa6\111\uffa6\112\uffa6\113\uffa6\114\uffa6" +
    "\116\uffa6\117\uffa6\120\uffa6\001\002\000\042\052\uffbc\060" +
    "\uffbc\061\uffbc\062\uffbc\063\uffbc\064\uffbc\106\uffbc\110\uffbc" +
    "\111\uffbc\112\uffbc\113\uffbc\114\uffbc\116\uffbc\117\uffbc\120" +
    "\uffbc\121\uffbc\001\002\000\040\052\uff81\060\uff81\061\uff81" +
    "\062\uff81\063\uff81\064\uff81\106\uff81\110\uff81\111\uff81\112" +
    "\uff81\113\uff81\114\uff81\116\uff81\117\uff81\120\uff81\001\002" +
    "\000\004\121\110\001\002\000\040\052\uffa2\060\uffa2\061" +
    "\uffa2\062\uffa2\063\uffa2\064\uffa2\106\uffa2\110\uffa2\111\uffa2" +
    "\112\uffa2\113\uffa2\114\uffa2\116\uffa2\117\uffa2\120\uffa2\001" +
    "\002\000\006\052\uff84\106\uff84\001\002\000\052\010\062" +
    "\012\057\014\053\027\050\030\064\047\052\055\055\061" +
    "\071\065\056\066\101\105\063\121\060\122\076\123\073" +
    "\124\054\125\100\126\067\127\044\130\046\131\104\001" +
    "\002\000\076\002\uffea\003\uffea\004\uffea\005\uffea\006\uffea" +
    "\007\uffea\010\uffea\012\uffea\013\uffea\014\uffea\015\uffea\016" +
    "\uffea\017\uffea\027\uffea\030\uffea\047\uffea\055\uffea\061\uffea" +
    "\065\uffea\066\uffea\105\uffea\121\uffea\122\uffea\123\uffea\124" +
    "\uffea\125\uffea\126\uffea\127\uffea\130\uffea\131\uffea\001\002" +
    "\000\040\052\uff7d\060\uff7d\061\uff7d\062\uff7d\063\uff7d\064" +
    "\uff7d\106\uff7d\110\uff7d\111\uff7d\112\uff7d\113\uff7d\114\uff7d" +
    "\116\uff7d\117\uff7d\120\uff7d\001\002\000\034\061\uffba\065" +
    "\uffba\066\uffba\105\uffba\121\uffba\122\uffba\123\uffba\124\uffba" +
    "\125\uffba\126\uffba\127\uffba\130\uffba\131\uffba\001\002\000" +
    "\034\061\071\065\056\066\101\105\131\121\130\122\076" +
    "\123\073\124\054\125\100\126\067\127\044\130\046\131" +
    "\104\001\002\000\034\061\uffaf\065\uffaf\066\uffaf\105\uffaf" +
    "\121\uffaf\122\uffaf\123\uffaf\124\uffaf\125\uffaf\126\uffaf\127" +
    "\uffaf\130\uffaf\131\uffaf\001\002\000\034\061\uffb1\065\uffb1" +
    "\066\uffb1\105\uffb1\121\uffb1\122\uffb1\123\uffb1\124\uffb1\125" +
    "\uffb1\126\uffb1\127\uffb1\130\uffb1\131\uffb1\001\002\000\034" +
    "\061\uffae\065\uffae\066\uffae\105\uffae\121\uffae\122\uffae\123" +
    "\uffae\124\uffae\125\uffae\126\uffae\127\uffae\130\uffae\131\uffae" +
    "\001\002\000\034\061\uffb9\065\uffb9\066\uffb9\105\uffb9\121" +
    "\uffb9\122\uffb9\123\uffb9\124\uffb9\125\uffb9\126\uffb9\127\uffb9" +
    "\130\uffb9\131\uffb9\001\002\000\034\061\uffb0\065\uffb0\066" +
    "\uffb0\105\uffb0\121\uffb0\122\uffb0\123\uffb0\124\uffb0\125\uffb0" +
    "\126\uffb0\127\uffb0\130\uffb0\131\uffb0\001\002\000\034\061" +
    "\uffb7\065\uffb7\066\uffb7\105\uffb7\121\uffb7\122\uffb7\123\uffb7" +
    "\124\uffb7\125\uffb7\126\uffb7\127\uffb7\130\uffb7\131\uffb7\001" +
    "\002\000\034\061\uffaa\065\uffaa\066\uffaa\105\uffaa\121\uffaa" +
    "\122\uffaa\123\uffaa\124\uffaa\125\uffaa\126\uffaa\127\uffaa\130" +
    "\uffaa\131\uffaa\001\002\000\034\061\uffbb\065\uffbb\066\uffbb" +
    "\105\uffbb\121\uffbb\122\uffbb\123\uffbb\124\uffbb\125\uffbb\126" +
    "\uffbb\127\uffbb\130\uffbb\131\uffbb\001\002\000\034\061\071" +
    "\065\056\066\101\105\131\121\130\122\076\123\073\124" +
    "\054\125\100\126\067\127\044\130\046\131\104\001\002" +
    "\000\034\061\uffad\065\uffad\066\uffad\105\uffad\121\uffad\122" +
    "\uffad\123\uffad\124\uffad\125\uffad\126\uffad\127\uffad\130\uffad" +
    "\131\uffad\001\002\000\034\061\uffb8\065\uffb8\066\uffb8\105" +
    "\uffb8\121\uffb8\122\uffb8\123\uffb8\124\uffb8\125\uffb8\126\uffb8" +
    "\127\uffb8\130\uffb8\131\uffb8\001\002\000\034\061\uffac\065" +
    "\uffac\066\uffac\105\uffac\121\uffac\122\uffac\123\uffac\124\uffac" +
    "\125\uffac\126\uffac\127\uffac\130\uffac\131\uffac\001\002\000" +
    "\034\061\uffab\065\uffab\066\uffab\105\uffab\121\uffab\122\uffab" +
    "\123\uffab\124\uffab\125\uffab\126\uffab\127\uffab\130\uffab\131" +
    "\uffab\001\002\000\044\052\uff7f\060\uff7f\061\uff7f\062\uff7f" +
    "\063\uff7f\064\uff7f\065\056\066\101\106\uff7f\110\uff7f\111" +
    "\uff7f\112\uff7f\113\uff7f\114\uff7f\116\uff7f\117\uff7f\120\uff7f" +
    "\001\002\000\034\061\071\065\056\066\101\105\131\121" +
    "\130\122\076\123\073\124\054\125\100\126\067\127\044" +
    "\130\046\131\104\001\002\000\020\052\uff78\060\122\061" +
    "\111\062\116\063\125\064\120\106\uff78\001\002\000\016" +
    "\060\122\061\111\062\116\063\125\064\120\106\134\001" +
    "\002\000\040\052\uff80\060\uff80\061\uff80\062\uff80\063\uff80" +
    "\064\uff80\106\uff80\110\uff80\111\uff80\112\uff80\113\uff80\114" +
    "\uff80\116\uff80\117\uff80\120\uff80\001\002\000\040\052\uff7c" +
    "\060\uff7c\061\uff7c\062\uff7c\063\uff7c\064\uff7c\106\uff7c\110" +
    "\uff7c\111\uff7c\112\uff7c\113\uff7c\114\uff7c\116\uff7c\117\uff7c" +
    "\120\uff7c\001\002\000\040\052\uff79\060\122\061\111\062" +
    "\116\063\125\064\120\106\uff79\110\uff79\111\uff79\112\uff79" +
    "\113\uff79\114\uff79\116\uff79\117\uff79\120\uff79\001\002\000" +
    "\076\002\uffe6\003\uffe6\004\uffe6\005\uffe6\006\uffe6\007\uffe6" +
    "\010\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\017" +
    "\uffe6\027\uffe6\030\uffe6\047\uffe6\055\uffe6\061\uffe6\065\uffe6" +
    "\066\uffe6\105\uffe6\121\uffe6\122\uffe6\123\uffe6\124\uffe6\125" +
    "\uffe6\126\uffe6\127\uffe6\130\uffe6\131\uffe6\001\002\000\040" +
    "\052\uff7b\060\uff7b\061\uff7b\062\uff7b\063\uff7b\064\uff7b\106" +
    "\uff7b\110\uff7b\111\uff7b\112\uff7b\113\uff7b\114\uff7b\116\uff7b" +
    "\117\uff7b\120\uff7b\001\002\000\040\052\uff7a\060\uff7a\061" +
    "\uff7a\062\uff7a\063\uff7a\064\uff7a\106\uff7a\110\uff7a\111\uff7a" +
    "\112\uff7a\113\uff7a\114\uff7a\116\uff7a\117\uff7a\120\uff7a\001" +
    "\002\000\076\002\uffeb\003\uffeb\004\uffeb\005\uffeb\006\uffeb" +
    "\007\uffeb\010\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb\016" +
    "\uffeb\017\uffeb\027\uffeb\030\uffeb\047\uffeb\055\uffeb\061\uffeb" +
    "\065\uffeb\066\uffeb\105\uffeb\121\uffeb\122\uffeb\123\uffeb\124" +
    "\uffeb\125\uffeb\126\uffeb\127\uffeb\130\uffeb\131\uffeb\001\002" +
    "\000\076\002\uffe7\003\uffe7\004\uffe7\005\uffe7\006\uffe7\007" +
    "\uffe7\010\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7" +
    "\017\uffe7\027\uffe7\030\uffe7\047\uffe7\055\uffe7\061\uffe7\065" +
    "\uffe7\066\uffe7\105\uffe7\121\uffe7\122\uffe7\123\uffe7\124\uffe7" +
    "\125\uffe7\126\uffe7\127\uffe7\130\uffe7\131\uffe7\001\002\000" +
    "\004\052\uff91\001\002\000\036\055\055\061\071\065\056" +
    "\066\101\105\063\121\147\122\076\123\073\124\054\125" +
    "\100\126\067\127\044\130\046\131\104\001\002\000\004" +
    "\106\157\001\002\000\056\052\uff7f\060\uff7f\061\uff7f\062" +
    "\uff7f\063\uff7f\064\uff7f\065\056\066\101\067\155\070\154" +
    "\071\152\072\150\106\uff7f\107\153\110\uff7f\111\uff7f\112" +
    "\uff7f\113\uff7f\114\uff7f\116\uff7f\117\uff7f\120\uff7f\001\002" +
    "\000\034\061\uffb2\065\uffb2\066\uffb2\105\uffb2\121\uffb2\122" +
    "\uffb2\123\uffb2\124\uffb2\125\uffb2\126\uffb2\127\uffb2\130\uffb2" +
    "\131\uffb2\001\002\000\034\061\071\065\056\066\101\105" +
    "\131\121\130\122\076\123\073\124\054\125\100\126\067" +
    "\127\044\130\046\131\104\001\002\000\034\061\uffb3\065" +
    "\uffb3\066\uffb3\105\uffb3\121\uffb3\122\uffb3\123\uffb3\124\uffb3" +
    "\125\uffb3\126\uffb3\127\uffb3\130\uffb3\131\uffb3\001\002\000" +
    "\034\061\uffb6\065\uffb6\066\uffb6\105\uffb6\121\uffb6\122\uffb6" +
    "\123\uffb6\124\uffb6\125\uffb6\126\uffb6\127\uffb6\130\uffb6\131" +
    "\uffb6\001\002\000\034\061\uffb4\065\uffb4\066\uffb4\105\uffb4" +
    "\121\uffb4\122\uffb4\123\uffb4\124\uffb4\125\uffb4\126\uffb4\127" +
    "\uffb4\130\uffb4\131\uffb4\001\002\000\034\061\uffb5\065\uffb5" +
    "\066\uffb5\105\uffb5\121\uffb5\122\uffb5\123\uffb5\124\uffb5\125" +
    "\uffb5\126\uffb5\127\uffb5\130\uffb5\131\uffb5\001\002\000\020" +
    "\052\uff83\060\122\061\111\062\116\063\125\064\120\106" +
    "\uff83\001\002\000\004\052\160\001\002\000\052\010\uff92" +
    "\012\uff92\014\uff92\027\uff92\030\uff92\047\uff92\055\uff92\061" +
    "\uff92\065\uff92\066\uff92\105\uff92\121\uff92\122\uff92\123\uff92" +
    "\124\uff92\125\uff92\126\uff92\127\uff92\130\uff92\131\uff92\001" +
    "\002\000\004\052\162\001\002\000\052\010\uff90\012\uff90" +
    "\014\uff90\027\uff90\030\uff90\047\uff90\055\uff90\061\uff90\065" +
    "\uff90\066\uff90\105\uff90\121\uff90\122\uff90\123\uff90\124\uff90" +
    "\125\uff90\126\uff90\127\uff90\130\uff90\131\uff90\001\002\000" +
    "\036\060\122\061\111\062\116\063\125\064\120\106\134" +
    "\110\113\111\126\112\115\113\121\114\117\116\114\117" +
    "\124\120\127\001\002\000\004\106\165\001\002\000\006" +
    "\052\uff76\106\uff76\001\002\000\004\047\uffe2\001\002\000" +
    "\036\055\055\061\071\065\056\066\101\105\063\121\147" +
    "\122\076\123\073\124\054\125\100\126\067\127\044\130" +
    "\046\131\104\001\002\000\004\106\171\001\002\000\004" +
    "\046\172\001\002\000\052\010\062\012\057\014\053\027" +
    "\050\030\064\047\052\055\055\061\071\065\056\066\101" +
    "\105\063\121\060\122\076\123\073\124\054\125\100\126" +
    "\067\127\044\130\046\131\104\001\002\000\054\006\175" +
    "\010\uffe0\012\uffe0\014\uffe0\027\uffe0\030\uffe0\047\uffe0\055" +
    "\uffe0\061\uffe0\065\uffe0\066\uffe0\105\uffe0\121\uffe0\122\uffe0" +
    "\123\uffe0\124\uffe0\125\uffe0\126\uffe0\127\uffe0\130\uffe0\131" +
    "\uffe0\001\002\000\052\010\uffe3\012\uffe3\014\uffe3\027\uffe3" +
    "\030\uffe3\047\uffe3\055\uffe3\061\uffe3\065\uffe3\066\uffe3\105" +
    "\uffe3\121\uffe3\122\uffe3\123\uffe3\124\uffe3\125\uffe3\126\uffe3" +
    "\127\uffe3\130\uffe3\131\uffe3\001\002\000\004\046\176\001" +
    "\002\000\052\010\062\012\057\014\053\027\050\030\064" +
    "\047\052\055\055\061\071\065\056\066\101\105\063\121" +
    "\060\122\076\123\073\124\054\125\100\126\067\127\044" +
    "\130\046\131\104\001\002\000\052\010\uffdf\012\uffdf\014" +
    "\uffdf\027\uffdf\030\uffdf\047\uffdf\055\uffdf\061\uffdf\065\uffdf" +
    "\066\uffdf\105\uffdf\121\uffdf\122\uffdf\123\uffdf\124\uffdf\125" +
    "\uffdf\126\uffdf\127\uffdf\130\uffdf\131\uffdf\001\002\000\004" +
    "\047\201\001\002\000\052\010\uffe1\012\uffe1\014\uffe1\027" +
    "\uffe1\030\uffe1\047\uffe1\055\uffe1\061\uffe1\065\uffe1\066\uffe1" +
    "\105\uffe1\121\uffe1\122\uffe1\123\uffe1\124\uffe1\125\uffe1\126" +
    "\uffe1\127\uffe1\130\uffe1\131\uffe1\001\002\000\076\002\uffe9" +
    "\003\uffe9\004\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9\012" +
    "\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9\027\uffe9" +
    "\030\uffe9\047\uffe9\055\uffe9\061\uffe9\065\uffe9\066\uffe9\105" +
    "\uffe9\121\uffe9\122\uffe9\123\uffe9\124\uffe9\125\uffe9\126\uffe9" +
    "\127\uffe9\130\uffe9\131\uffe9\001\002\000\004\052\uff89\001" +
    "\002\000\026\106\206\121\207\122\076\123\073\124\054" +
    "\125\100\126\067\127\044\130\046\131\104\001\002\000" +
    "\004\106\212\001\002\000\004\052\211\001\002\000\004" +
    "\106\uff8d\001\002\000\004\106\uff8c\001\002\000\052\010" +
    "\uff8b\012\uff8b\014\uff8b\027\uff8b\030\uff8b\047\uff8b\055\uff8b" +
    "\061\uff8b\065\uff8b\066\uff8b\105\uff8b\121\uff8b\122\uff8b\123" +
    "\uff8b\124\uff8b\125\uff8b\126\uff8b\127\uff8b\130\uff8b\131\uff8b" +
    "\001\002\000\004\052\213\001\002\000\052\010\uff8a\012" +
    "\uff8a\014\uff8a\027\uff8a\030\uff8a\047\uff8a\055\uff8a\061\uff8a" +
    "\065\uff8a\066\uff8a\105\uff8a\121\uff8a\122\uff8a\123\uff8a\124" +
    "\uff8a\125\uff8a\126\uff8a\127\uff8a\130\uff8a\131\uff8a\001\002" +
    "\000\004\052\215\001\002\000\052\010\uff88\012\uff88\014" +
    "\uff88\027\uff88\030\uff88\047\uff88\055\uff88\061\uff88\065\uff88" +
    "\066\uff88\105\uff88\121\uff88\122\uff88\123\uff88\124\uff88\125" +
    "\uff88\126\uff88\127\uff88\130\uff88\131\uff88\001\002\000\004" +
    "\052\217\001\002\000\004\047\220\001\002\000\076\002" +
    "\uffe5\003\uffe5\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5" +
    "\012\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5\027" +
    "\uffe5\030\uffe5\047\uffe5\055\uffe5\061\uffe5\065\uffe5\066\uffe5" +
    "\105\uffe5\121\uffe5\122\uffe5\123\uffe5\124\uffe5\125\uffe5\126" +
    "\uffe5\127\uffe5\130\uffe5\131\uffe5\001\002\000\020\052\uff77" +
    "\060\122\061\111\062\116\063\125\064\120\106\uff77\001" +
    "\002\000\004\047\uffdb\001\002\000\004\105\224\001\002" +
    "\000\036\055\055\061\071\065\056\066\101\105\063\121" +
    "\147\122\076\123\073\124\054\125\100\126\067\127\044" +
    "\130\046\131\104\001\002\000\004\106\uffdd\001\002\000" +
    "\004\106\227\001\002\000\004\046\230\001\002\000\052" +
    "\010\062\012\057\014\053\027\050\030\064\047\052\055" +
    "\055\061\071\065\056\066\101\105\063\121\060\122\076" +
    "\123\073\124\054\125\100\126\067\127\044\130\046\131" +
    "\104\001\002\000\052\010\uffdc\012\uffdc\014\uffdc\027\uffdc" +
    "\030\uffdc\047\uffdc\055\uffdc\061\uffdc\065\uffdc\066\uffdc\105" +
    "\uffdc\121\uffdc\122\uffdc\123\uffdc\124\uffdc\125\uffdc\126\uffdc" +
    "\127\uffdc\130\uffdc\131\uffdc\001\002\000\004\047\233\001" +
    "\002\000\052\010\uffda\012\uffda\014\uffda\027\uffda\030\uffda" +
    "\047\uffda\055\uffda\061\uffda\065\uffda\066\uffda\105\uffda\121" +
    "\uffda\122\uffda\123\uffda\124\uffda\125\uffda\126\uffda\127\uffda" +
    "\130\uffda\131\uffda\001\002\000\054\010\uff87\012\uff87\014" +
    "\uff87\027\uff87\030\uff87\047\uff87\055\uff87\061\uff87\065\uff87" +
    "\066\uff87\105\uff87\106\uff87\121\uff87\122\uff87\123\uff87\124" +
    "\uff87\125\uff87\126\uff87\127\uff87\130\uff87\131\uff87\001\002" +
    "\000\004\052\uff95\001\002\000\006\106\240\121\241\001" +
    "\002\000\004\106\243\001\002\000\004\052\242\001\002" +
    "\000\004\106\uff93\001\002\000\052\010\uff97\012\uff97\014" +
    "\uff97\027\uff97\030\uff97\047\uff97\055\uff97\061\uff97\065\uff97" +
    "\066\uff97\105\uff97\121\uff97\122\uff97\123\uff97\124\uff97\125" +
    "\uff97\126\uff97\127\uff97\130\uff97\131\uff97\001\002\000\004" +
    "\052\244\001\002\000\052\010\uff96\012\uff96\014\uff96\027" +
    "\uff96\030\uff96\047\uff96\055\uff96\061\uff96\065\uff96\066\uff96" +
    "\105\uff96\121\uff96\122\uff96\123\uff96\124\uff96\125\uff96\126" +
    "\uff96\127\uff96\130\uff96\131\uff96\001\002\000\004\052\246" +
    "\001\002\000\052\010\uff94\012\uff94\014\uff94\027\uff94\030" +
    "\uff94\047\uff94\055\uff94\061\uff94\065\uff94\066\uff94\105\uff94" +
    "\121\uff94\122\uff94\123\uff94\124\uff94\125\uff94\126\uff94\127" +
    "\uff94\130\uff94\131\uff94\001\002\000\076\002\uffe8\003\uffe8" +
    "\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8\012\uffe8\013" +
    "\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\027\uffe8\030\uffe8" +
    "\047\uffe8\055\uffe8\061\uffe8\065\uffe8\066\uffe8\105\uffe8\121" +
    "\uffe8\122\uffe8\123\uffe8\124\uffe8\125\uffe8\126\uffe8\127\uffe8" +
    "\130\uffe8\131\uffe8\001\002\000\010\052\uff75\053\023\107" +
    "\uff75\001\002\000\006\052\ufffa\107\ufffa\001\002\000\004" +
    "\047\255\001\002\000\004\052\254\001\002\000\022\003" +
    "\ufffb\004\ufffb\005\ufffb\007\ufffb\013\ufffb\015\ufffb\016\ufffb" +
    "\017\ufffb\001\002\000\024\002\uffef\003\uffef\004\uffef\005" +
    "\uffef\007\uffef\013\uffef\015\uffef\016\uffef\017\uffef\001\002" +
    "\000\004\105\ufff2\001\002\000\004\105\260\001\002\000" +
    "\004\106\261\001\002\000\004\046\042\001\002\000\024" +
    "\002\ufff1\003\ufff1\004\ufff1\005\ufff1\007\ufff1\013\ufff1\015" +
    "\ufff1\016\ufff1\017\ufff1\001\002\000\024\002\uff75\003\265" +
    "\004\011\005\017\007\004\013\012\015\016\016\005\017" +
    "\020\001\002\000\004\121\270\001\002\000\004\047\ufff0" +
    "\001\002\000\004\002\ufffe\001\002\000\004\002\ufff5\001" +
    "\002\000\004\105\ufff4\001\002\000\004\002\ufff6\001\002" +
    "\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\270\000\014\002\014\003\006\023\005\026\007\032" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\003\271\023\005\026\007\032\013\001\001\000\002\001" +
    "\001\000\012\004\265\026\262\032\263\055\266\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\056\252\061" +
    "\251\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\024\024\055\025\057\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\025\027\055\030\001" +
    "\001\000\002\001\001\000\004\031\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\042\001" +
    "\001\000\040\006\046\007\060\012\065\013\074\030\073" +
    "\033\044\034\050\035\064\036\076\037\071\040\101\041" +
    "\104\042\102\046\067\050\105\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\006\246\007\060\012\065\013" +
    "\074\030\073\033\044\034\050\035\064\036\076\037\071" +
    "\040\101\041\104\042\102\046\067\050\105\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\063\222\001\001\000" +
    "\002\001\001\000\014\030\073\036\220\037\071\040\101" +
    "\042\102\001\001\000\002\001\001\000\004\031\215\001" +
    "\001\000\006\042\134\044\150\001\001\000\040\006\201" +
    "\007\060\012\065\013\074\030\073\033\044\034\050\035" +
    "\064\036\076\037\071\040\101\041\104\042\102\046\067" +
    "\050\105\001\001\000\002\001\001\000\016\030\073\036" +
    "\162\037\071\040\101\041\163\042\102\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\006\142\007\060\012" +
    "\065\013\074\030\073\033\044\034\050\035\064\036\076" +
    "\037\071\040\101\041\104\042\102\046\067\050\105\001" +
    "\001\000\002\001\001\000\040\006\141\007\060\012\065" +
    "\013\074\030\073\033\044\034\050\035\064\036\076\037" +
    "\071\040\101\041\104\042\102\046\067\050\105\001\001" +
    "\000\004\031\137\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\006\136\007\060\012\065" +
    "\013\074\030\073\033\044\034\050\035\064\036\076\037" +
    "\071\040\101\041\104\042\102\046\067\050\105\001\001" +
    "\000\002\001\001\000\006\043\111\045\122\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\006" +
    "\106\007\060\012\065\013\074\030\073\033\044\034\050" +
    "\035\064\036\076\037\071\040\101\041\104\042\102\046" +
    "\067\050\105\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\030\073\036\135\037\071\040" +
    "\101\042\102\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\030\073\036\131\037\071\040\101\042\102\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\042\134\001\001\000\014\030\073\036" +
    "\132\037\071\040\101\042\102\001\001\000\004\043\111" +
    "\001\001\000\004\043\111\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\043\111\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\073\160\001\001\000\024\030\073" +
    "\033\145\034\050\035\064\036\076\037\071\040\101\041" +
    "\104\042\102\001\001\000\002\001\001\000\006\042\134" +
    "\044\150\001\001\000\002\001\001\000\014\030\073\036" +
    "\155\037\071\040\101\042\102\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\043\111\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\043\111\045" +
    "\122\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\062\177\001\001\000\022\030\073\034\167\035\064\036" +
    "\076\037\071\040\101\041\104\042\102\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\006\172\007\060\012" +
    "\065\013\074\030\073\033\044\034\050\035\064\036\076" +
    "\037\071\040\101\041\104\042\102\046\067\050\105\001" +
    "\001\000\004\015\173\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\006\176\007\060\012\065\013\074\030" +
    "\073\033\044\034\050\035\064\036\076\037\071\040\101" +
    "\041\104\042\102\046\067\050\105\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\074\213\001\001\000\006\030\207\052\204\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\043" +
    "\111\001\001\000\004\065\231\001\001\000\002\001\001" +
    "\000\022\030\073\034\224\035\064\036\076\037\071\040" +
    "\101\041\104\042\102\001\001\000\004\064\225\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\006\230\007" +
    "\060\012\065\013\074\030\073\033\044\034\050\035\064" +
    "\036\076\037\071\040\101\041\104\042\102\046\067\050" +
    "\105\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\072\244\001\001\000" +
    "\004\047\236\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\024\250\055\025\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\060\256\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\261\001\001\000\002" +
    "\001\001\000\012\004\270\026\262\032\263\055\266\001" +
    "\001\000\002\001\001\000\004\061\251\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\057\023\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
  public static int errors = 0;
  public static int warnings = 0;
  public static analizador_lexico.Scanner s;
  public static ArrayList<Token> tokens = new ArrayList<Token>();
    public static ArrayList<String> identis = new ArrayList<String>();
  public String RESULT= "Pila SEGMENT STACK\n\tdb 64 dup (?)\nPila ENDS\n\ndatos segment\n";
  public static ArrayList<String> funciones = new ArrayList<String>();
  public static Pila pila = new Pila();
  public String MAIN = "";
  public String FUNCIONES= "";
  public int cont_while=1;
  public int cont_if=1;
  public int cont_else=1;
  public int cont_bucles =0;
  public boolean esReturn=false;


  public static void main(String argv[]) {

    for (int i = 0; i < argv.length; i++) {
      try {
	  s = new analizador_lexico.Scanner(new FileReader(argv[i]));
        Parser p = new Parser(s);
        p.parse();
        System.out.println("Number of errors = " + errors + ".");
       

      }
      catch (Exception e) {
        e.printStackTrace(System.out);
        System.exit(1);
      }
    }
  }
    protected int error_sync_size () {
        //System.out.println(":error_sync_size was called.");
        return 1; // not recommended by the CUP manual
}
  public void report_error(String message, Object info) {
    if (info instanceof String){
	errors++; 
      System.err.println("  "+ errors + "==> " + info + " "+ message + 
					"\n       Parsing resumed from 2nd token before" + s.current_lexeme()+"\n");
    }
    else {
    	StringBuffer m = new StringBuffer("Error ");
    	if (info instanceof java_cup.runtime.Symbol) 
     	   m.append( "("+info.toString()+")" );     
    	m.append(" : "+message);   
    	System.err.println(m);
    }
  }
   
  public void report_fatal_error(String message, Object info) {
    report_error(message, info);
    throw new RuntimeException("Fatal Syntax Error");
  }

// IDENTIFICADORES
public void recuerda_tipo()
{
    Tipo Reg_Tipo = new Tipo(s.yytext());
    pila.Push(Reg_Tipo); 
}
public void recuerda_id(Object type)
{
    
    Identificador temp = new Identificador(type.toString(),-1);
    //tokens.add(new Token(new Symbol(79,type.toString())));
    pila.Push(temp);
}
public void valor_id(Object valor)
{
    if(valor!= null){
        Literal temp = new Literal(valor.toString());
        pila.Push(temp);
    }
    else{
        Literal temp = new Literal("0");
        pila.Push(temp);
    }
}

public void inserta_TS()
{
    IData temp;
    boolean pasa = true;
    while(!pila.isEmpty()){
        temp = pila.Pop();
        if(temp.getTipo()==1){
            if(identis.contains(temp.valor())){
                 // EL IDENTIFICADOR YA HA SIDO AGREGADO
                 System.err.println("ERROR SEMANTICO: identificador "+ temp.valor()+" anteriormente instanciado");
                 pasa = false;
            }
            else{
                RESULT += temp.CodigoGenerar();
                identis.add(temp.valor());
            }
        }
        else{
        if(pasa)
            RESULT += temp.CodigoGenerar();
        
        else{
            pasa = true;
            // SE DEBE OMITIR EL AGREGAR, ya que es un valor inicial para un Error Semantico
        }
        }
    }
}

// FUNCIONES
public void crear_slot_funcion()
{
    pila.Push(new Funcion(""));
}
public void funcion_Insertar(Object nombre)
{
    if(nombre.toString().equals("main"))
    {
        funciones.add(nombre.toString());
        MAIN += "main:\n";
        // HACER TODAS LAS COSAS CON LA PILA SEMENTICA
        Funcion temp = (Funcion) pila.Pop();
        MAIN += temp.valor();

        // VIENE EL CIERRE DEL PROGRAMA
        MAIN += "\ncierre:\n";
        MAIN += "\tmov ah,4ch\n";
        MAIN += "\tmov al,07h\n";
            
        MAIN += "\tint 21h\n\n";
        MAIN += "codigo endS\n";
        MAIN += "end main";

    }
    else{
        funciones.add(nombre.toString());
        FUNCIONES += nombre.toString()+" Proc Near\n";
        
        //HACER TODAS LAS COSAS CON LA PILA SEMANTICA
        Funcion temp = (Funcion) pila.Pop();
        FUNCIONES += temp.valor();

        FUNCIONES += nombre.toString()+" endP\n\n";
    }
}

public void revisar_Main()
{
    if(!funciones.contains("main"))
    {
        System.err.println("ERROR SEMANTICO: No se declaro ningun MAIN");
    }
    RESULT += FUNCIONES + MAIN;
}

// REVISAR RETURN
public void revisar_Return()
{
    cont_bucles--;
    System.out.println(cont_bucles);
    if(esReturn && cont_bucles==0)
    {
        System.err.println("ERROR SEMANTICO: No se declaro return en la funcion");
        esReturn = false;
    }
}

// WHILE

public void iniciar_while()
{
    String temp = ((Funcion)pila.Pop()).valor();
    temp += "start_while"+cont_while+":\n";
    pila.Push(new Funcion(temp));
}
public void evaluar_while()
{
    String oper="<=";
    String temp = ((Funcion)pila.Pop()).valor();
    temp += "\tCMP OBJ1,OBJ2\n";
    
    if(oper.equals("<=")){
        temp+= "\tJLE end_while"+cont_while+"\n";
    }
    else if(oper.equals("=<")){
        temp+= "\tJGE end_while"+cont_while+"\n";    
    }
    else if(oper.equals("!=")){
        temp+= "\tJNE end_while"+cont_while+"\n";    
    }
    else if(oper.equals("==")){
        temp+= "\tJE end_while"+cont_while+"\n";    
    }
    else if(oper.equals("<")){
        temp+= "\tJL end_while"+cont_while+"\n";    
    }
    else if(oper.equals(">")){
        temp+= "\tJG end_while"+cont_while+"\n";    
    }
    else if(oper.equals("||")){
        temp+= "\tNULL end_while"+cont_while+"\n";    
    }
    else if(oper.equals("&&")){
        temp+= "\tNULL end_while"+cont_while+"\n";    
    }
    pila.Push(new Funcion(temp));
}
public void terminar_while()
{
    String temp = ((Funcion)pila.Pop()).valor();
    temp +="\tJUMP start_while"+cont_while+"\n";
    temp +="end_while"+cont_while+":\n";
    cont_while++;
    pila.Push(new Funcion(temp));
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {


	


  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= estructura EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // estructura ::= statement_globales 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estructura",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // statement_globales ::= declaracion_identificador statement_globales 
            {
              String RESULT =null;
		RESULT += "datos endS\n\ncodigo segment\n\tASSUME CS:Codigo, DS:Datos, SS:Pila\n\n";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_globales",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statement_globales ::= declaracion_funciones statement_funciones 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_globales",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaracion_identificador ::= type IDENTIFIER varios_identificadores valor_inicial SEMICOLON 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		parser.recuerda_id(i);parser.inserta_TS();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_identificador",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$0 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.report_error("Error Sintactico: Declaracion Identificador",e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaracion_identificador ::= error NT$0 SEMICOLON 
            {
              String RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_identificador",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // varios_identificadores ::= COMMA IDENTIFIER varios_identificadores 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		parser.valor_id(null);parser.recuerda_id(i);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varios_identificadores",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // varios_identificadores ::= epsilon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varios_identificadores",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // valor_inicial ::= epsilon 
            {
              String RESULT =null;
		parser.valor_id(null);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_inicial",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // valor_inicial ::= EQ literal_numerico 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_inicial",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement_funciones ::= declaracion_funciones statement_funciones 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_funciones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statement_funciones ::= epsilon 
            {
              String RESULT =null;
		parser.revisar_Main();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_funciones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$1 ::= 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.esReturn= true;parser.cont_bucles++;parser.crear_slot_funcion();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declaracion_funciones ::= type IDENTIFIER NT$1 LPAREN RPAREN cuerpo_funcion 
            {
              String RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		parser.funcion_Insertar(i);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_funciones",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$2 ::= 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.esReturn= false;parser.cont_bucles++;parser.crear_slot_funcion();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declaracion_funciones ::= VOID IDENTIFIER NT$2 LPAREN RPAREN cuerpo_funcion 
            {
              String RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		parser.funcion_Insertar(i);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_funciones",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$3 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.report_error("Error Sintactico: Statement de Funciones",e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declaracion_funciones ::= error NT$3 RBRACE 
            {
              String RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_funciones",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // varios_tipos ::= COMMA type IDENTIFIER varios_tipos 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varios_tipos",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // varios_tipos ::= epsilon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varios_tipos",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // cuerpo_funcion ::= LBRACE cuerpo_funcion_aux 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_funcion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // cuerpo_funcion_aux ::= estructura_read cuerpo_funcion_aux 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_funcion_aux",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // cuerpo_funcion_aux ::= estructura_write cuerpo_funcion_aux 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_funcion_aux",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // cuerpo_funcion_aux ::= llamado_funcion cuerpo_funcion_aux 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_funcion_aux",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // cuerpo_funcion_aux ::= expresiones cuerpo_funcion_aux 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_funcion_aux",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // cuerpo_funcion_aux ::= statement_if cuerpo_funcion_aux 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_funcion_aux",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // cuerpo_funcion_aux ::= statement_while cuerpo_funcion_aux 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_funcion_aux",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // cuerpo_funcion_aux ::= RETURN literal_numerico SEMICOLON RBRACE 
            {
              String RESULT =null;
		parser.esReturn=false;parser.cont_bucles=0;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_funcion_aux",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // cuerpo_funcion_aux ::= RBRACE 
            {
              String RESULT =null;
		parser.revisar_Return();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_funcion_aux",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statement_if ::= IF LPAREN expresiones_statement RPAREN LBRACE cuerpo_funcion_aux statement_else 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_if",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$4 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.report_error("Error Sintactico: Statement en IF",e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statement_if ::= IF error NT$4 RBRACE 
            {
              String RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_if",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statement_else ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_else",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statement_else ::= ELSE LBRACE cuerpo_funcion_aux 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_else",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$5 ::= 
            {
              String RESULT =null;
parser.cont_bucles++;parser.iniciar_while();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$5",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$6 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
parser.evaluar_while();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$6",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // statement_while ::= WHILE NT$5 LPAREN expresiones_statement NT$6 RPAREN LBRACE cuerpo_funcion_aux 
            {
              String RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		parser.terminar_while();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_while",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$7 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.report_error("Error Sintactico: Statement en WHILE",e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$7",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // statement_while ::= WHILE error NT$7 RBRACE 
            {
              String RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_while",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // statement_for ::= FOR LPAREN expresiones_statement SEMICOLON expresiones_statement SEMICOLON expresiones_statement RPAREN LBRACE cuerpo_funcion_aux 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_for",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$8 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.report_error("Error Sintactico: Statement en FOR",e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$8",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // statement_for ::= FOR error NT$8 RBRACE 
            {
              String RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_for",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // statement_switch ::= SWITCH LPAREN expresiones_statement RPAREN LBRACE statement_switch_aux RBRACE 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_switch",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$9 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.report_error("Error Sintactico: Statement en SWITCH",e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$9",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // statement_switch ::= SWITCH error NT$9 RBRACE 
            {
              String RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_switch",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // statement_switch_aux ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_switch_aux",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // statement_switch_aux ::= CASE INTEGER_LITERAL COLON statement_cuerpo_case statement_switch_aux 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_switch_aux",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // statement_switch_aux ::= DEFAULT COLON statement_cuerpo_case statement_switch_aux 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_switch_aux",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$10 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.report_error("Error Sintactico: Statement en CASE",e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$10",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // statement_switch_aux ::= CASE error NT$10 SEMICOLON 
            {
              String RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_switch_aux",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$11 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.report_error("Error Sintactico: Statement en DEFAULT",e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$11",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // statement_switch_aux ::= DEFAULT error NT$11 SEMICOLON 
            {
              String RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_switch_aux",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // statement_cuerpo_case ::= estructura_read statement_cuerpo_case 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_cuerpo_case",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // statement_cuerpo_case ::= estructura_write statement_cuerpo_case 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_cuerpo_case",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // statement_cuerpo_case ::= llamado_funcion statement_cuerpo_case 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_cuerpo_case",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // statement_cuerpo_case ::= expresiones statement_cuerpo_case 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_cuerpo_case",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // statement_cuerpo_case ::= BREAK SEMICOLON 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_cuerpo_case",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // otras_palabras ::= CONTINUE SEMICOLON 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("otras_palabras",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // otras_palabras ::= BREAK SEMICOLON 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("otras_palabras",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // otras_palabras ::= RETURN return_variables SEMICOLON 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("otras_palabras",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // return_variables ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return_variables",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // return_variables ::= literal 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return_variables",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // return_variables ::= IDENTIFIER 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return_variables",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // statement_variables_locales_inicio ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_variables_locales_inicio",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // statement_variables_locales_inicio ::= epsilon statement_variables_locales 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_variables_locales_inicio",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // statement_variables_locales ::= declaracion_identificador 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_variables_locales",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // statement_variables_locales ::= declaracion_identificador statement_variables_locales 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_variables_locales",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // operadores_unarios ::= PLUS_PLUS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadores_unarios",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // operadores_unarios ::= MINUS_MINUS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadores_unarios",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // operadores_binarios ::= PLUS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadores_binarios",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // operadores_binarios ::= MINUS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadores_binarios",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // operadores_binarios ::= MULT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadores_binarios",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // operadores_binarios ::= DIV 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadores_binarios",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // operadores_binarios ::= MOD 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadores_binarios",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // operadores_asignacion ::= EQ 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadores_asignacion",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // operadores_asignacion ::= PLUS_EQ 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadores_asignacion",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // operadores_asignacion ::= MINUS_EQ 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadores_asignacion",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // operadores_asignacion ::= MULT_EQ 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadores_asignacion",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // operadores_asignacion ::= DIV_EQ 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadores_asignacion",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // operadores_booleanos ::= OROR 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadores_booleanos",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // operadores_booleanos ::= ANDAND 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadores_booleanos",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // operadores_booleanos ::= EQEQ 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadores_booleanos",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // operadores_booleanos ::= GTEQ 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadores_booleanos",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // operadores_booleanos ::= GT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadores_booleanos",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // operadores_booleanos ::= LTEQ 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadores_booleanos",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // operadores_booleanos ::= LT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadores_booleanos",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // operadores_booleanos ::= NOTEQ 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadores_booleanos",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // literal ::= INTEGER_LITERAL 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // literal ::= FLOATING_POINT_LITERAL 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // literal ::= BOOLEAN_LITERAL 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // literal ::= CHARACTER_LITERAL 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // literal ::= STRING_LITERAL 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // literal ::= HEX_LITERAL 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // literal ::= OCT_LITERAL 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // literal ::= NULL_LITERAL 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // literal_numerico ::= INTEGER_LITERAL 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.Number v = (java.lang.Number)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.valor_id(v);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal_numerico",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // literal_numerico ::= FLOATING_POINT_LITERAL 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.Number v = (java.lang.Number)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.valor_id(v);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal_numerico",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // literal_numerico ::= HEX_LITERAL 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.valor_id(v);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal_numerico",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // literal_numerico ::= OCT_LITERAL 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.valor_id(v);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal_numerico",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // type ::= BOOLEAN 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // type ::= INT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // type ::= CHAR 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // type ::= FLOAT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // type ::= LONG 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // type ::= SHORT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // estructura_read ::= READ LPAREN RPAREN SEMICOLON 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estructura_read",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // estructura_read ::= READ LPAREN estructura_read_parametros RPAREN SEMICOLON 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estructura_read",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // NT$12 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.report_error("Error Sintactico: Uso de READ",e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$12",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // estructura_read ::= READ error NT$12 SEMICOLON 
            {
              String RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estructura_read",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // estructura_read_parametros ::= IDENTIFIER 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estructura_read_parametros",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // estructura_write ::= WRITE LPAREN expresiones RPAREN SEMICOLON 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estructura_write",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // NT$13 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.report_error("Error Sintactico: Uso de WRITE",e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$13",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // estructura_write ::= WRITE error NT$13 SEMICOLON 
            {
              String RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estructura_write",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // estructura_write_parametros ::= estructura_write_parametros_aux 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estructura_write_parametros",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // estructura_write_parametros ::= estructura_write_parametros_aux COMMA estructura_write_parametros 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estructura_write_parametros",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // estructura_write_parametros_aux ::= IDENTIFIER 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estructura_write_parametros_aux",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // estructura_write_parametros_aux ::= literal 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estructura_write_parametros_aux",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // llamado_funcion ::= IDENTIFIER LPAREN RPAREN SEMICOLON 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamado_funcion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // llamado_funcion ::= IDENTIFIER LPAREN estructura_write_parametros_aux RPAREN SEMICOLON 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamado_funcion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // NT$14 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.report_error("Error Sintactico: LLAMADO DE FUNCION",e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$14",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // llamado_funcion ::= IDENTIFIER error NT$14 SEMICOLON 
            {
              String RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamado_funcion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // expresiones ::= expresiones_statement SEMICOLON 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // expresiones_statement ::= asignacion 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones_statement",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // expresiones_statement ::= expresion_aritmetica 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones_statement",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // expresiones_statement ::= expresion_booleana 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones_statement",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // asignacion ::= IDENTIFIER operadores_asignacion expresion_aritmetica 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // expresion_aritmetica ::= expresion_aritmetica_unaria 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // expresion_aritmetica ::= expresion_aritmetica_binaria 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // expresion_aritmetica ::= LPAREN expresion_aritmetica RPAREN 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // expresion_aritmetica ::= IDENTIFIER 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // expresion_aritmetica ::= literal 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // expresion_aritmetica_unaria ::= operadores_unarios IDENTIFIER 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica_unaria",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // expresion_aritmetica_unaria ::= IDENTIFIER operadores_unarios 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica_unaria",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // expresion_aritmetica_unaria ::= MINUS literal_numerico 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica_unaria",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // expresion_aritmetica_unaria ::= MINUS IDENTIFIER 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica_unaria",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // expresion_aritmetica_binaria ::= expresion_aritmetica operadores_binarios expresion_aritmetica 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica_binaria",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // expresion_booleana ::= expresion_aritmetica operadores_booleanos expresion_aritmetica 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion_booleana",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // expresion_booleana ::= NOT expresion_aritmetica 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion_booleana",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // expresion_booleana ::= LPAREN expresion_booleana RPAREN 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion_booleana",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // epsilon ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("epsilon",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}


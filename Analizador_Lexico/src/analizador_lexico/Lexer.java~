/* The following code was generated by JFlex 1.4.3 on 4/6/14 9:14 PM */

package analizador_lexico;
import static Token.Token.*;
import Token.Token;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 4/6/14 9:14 PM from the specification file
 * <tt>C:/Users/Fabian/Documents/GitHub/Compilador/Analizador_Lexico/src/analizador_lexico/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\7\1\3\1\2\1\0\1\3\1\1\16\7\4\0\1\3\1\62"+
    "\1\21\1\31\1\6\1\56\1\63\3\0\1\5\1\54\1\30\1\55"+
    "\1\20\1\4\1\10\10\22\1\11\1\0\1\27\1\60\1\57\1\61"+
    "\2\0\4\25\1\12\1\25\24\6\1\66\1\0\1\67\1\56\1\6"+
    "\1\0\1\32\1\34\1\36\1\42\1\15\1\43\1\46\1\40\1\41"+
    "\1\6\1\35\1\44\1\45\1\13\1\17\1\52\1\6\1\16\1\37"+
    "\1\14\1\33\1\53\1\50\1\26\1\51\1\47\1\0\1\64\1\0"+
    "\1\65\41\7\2\0\4\6\4\0\1\6\2\0\1\7\7\0\1\6"+
    "\4\0\1\6\5\0\27\6\1\0\37\6\1\0\u01ca\6\4\0\14\6"+
    "\16\0\5\6\7\0\1\6\1\0\1\6\21\0\160\7\5\6\1\0"+
    "\2\6\2\0\4\6\10\0\1\6\1\0\3\6\1\0\1\6\1\0"+
    "\24\6\1\0\123\6\1\0\213\6\1\0\5\7\2\0\236\6\11\0"+
    "\46\6\2\0\1\6\7\0\47\6\11\0\55\7\1\0\1\7\1\0"+
    "\2\7\1\0\2\7\1\0\1\7\10\0\33\6\5\0\3\6\15\0"+
    "\4\7\7\0\1\6\4\0\13\7\5\0\53\6\37\7\4\0\2\6"+
    "\1\7\143\6\1\0\1\6\10\7\1\0\6\7\2\6\2\7\1\0"+
    "\4\7\2\6\12\7\3\6\2\0\1\6\17\0\1\7\1\6\1\7"+
    "\36\6\33\7\2\0\131\6\13\7\1\6\16\0\12\7\41\6\11\7"+
    "\2\6\4\0\1\6\5\0\26\6\4\7\1\6\11\7\1\6\3\7"+
    "\1\6\5\7\22\0\31\6\3\7\244\0\4\7\66\6\3\7\1\6"+
    "\22\7\1\6\7\7\12\6\2\7\2\0\12\7\1\0\7\6\1\0"+
    "\7\6\1\0\3\7\1\0\10\6\2\0\2\6\2\0\26\6\1\0"+
    "\7\6\1\0\1\6\3\0\4\6\2\0\1\7\1\6\7\7\2\0"+
    "\2\7\2\0\3\7\1\6\10\0\1\7\4\0\2\6\1\0\3\6"+
    "\2\7\2\0\12\7\4\6\7\0\1\6\5\0\3\7\1\0\6\6"+
    "\4\0\2\6\2\0\26\6\1\0\7\6\1\0\2\6\1\0\2\6"+
    "\1\0\2\6\2\0\1\7\1\0\5\7\4\0\2\7\2\0\3\7"+
    "\3\0\1\7\7\0\4\6\1\0\1\6\7\0\14\7\3\6\1\7"+
    "\13\0\3\7\1\0\11\6\1\0\3\6\1\0\26\6\1\0\7\6"+
    "\1\0\2\6\1\0\5\6\2\0\1\7\1\6\10\7\1\0\3\7"+
    "\1\0\3\7\2\0\1\6\17\0\2\6\2\7\2\0\12\7\1\0"+
    "\1\6\17\0\3\7\1\0\10\6\2\0\2\6\2\0\26\6\1\0"+
    "\7\6\1\0\2\6\1\0\5\6\2\0\1\7\1\6\7\7\2\0"+
    "\2\7\2\0\3\7\10\0\2\7\4\0\2\6\1\0\3\6\2\7"+
    "\2\0\12\7\1\0\1\6\20\0\1\7\1\6\1\0\6\6\3\0"+
    "\3\6\1\0\4\6\3\0\2\6\1\0\1\6\1\0\2\6\3\0"+
    "\2\6\3\0\3\6\3\0\14\6\4\0\5\7\3\0\3\7\1\0"+
    "\4\7\2\0\1\6\6\0\1\7\16\0\12\7\11\0\1\6\7\0"+
    "\3\7\1\0\10\6\1\0\3\6\1\0\27\6\1\0\12\6\1\0"+
    "\5\6\3\0\1\6\7\7\1\0\3\7\1\0\4\7\7\0\2\7"+
    "\1\0\2\6\6\0\2\6\2\7\2\0\12\7\22\0\2\7\1\0"+
    "\10\6\1\0\3\6\1\0\27\6\1\0\12\6\1\0\5\6\2\0"+
    "\1\7\1\6\7\7\1\0\3\7\1\0\4\7\7\0\2\7\7\0"+
    "\1\6\1\0\2\6\2\7\2\0\12\7\1\0\2\6\17\0\2\7"+
    "\1\0\10\6\1\0\3\6\1\0\51\6\2\0\1\6\7\7\1\0"+
    "\3\7\1\0\4\7\1\6\10\0\1\7\10\0\2\6\2\7\2\0"+
    "\12\7\12\0\6\6\2\0\2\7\1\0\22\6\3\0\30\6\1\0"+
    "\11\6\1\0\1\6\2\0\7\6\3\0\1\7\4\0\6\7\1\0"+
    "\1\7\1\0\10\7\22\0\2\7\15\0\60\6\1\7\2\6\7\7"+
    "\4\0\10\6\10\7\1\0\12\7\47\0\2\6\1\0\1\6\2\0"+
    "\2\6\1\0\1\6\2\0\1\6\6\0\4\6\1\0\7\6\1\0"+
    "\3\6\1\0\1\6\1\0\1\6\2\0\2\6\1\0\4\6\1\7"+
    "\2\6\6\7\1\0\2\7\1\6\2\0\5\6\1\0\1\6\1\0"+
    "\6\7\2\0\12\7\2\0\2\6\42\0\1\6\27\0\2\7\6\0"+
    "\12\7\13\0\1\7\1\0\1\7\1\0\1\7\4\0\2\7\10\6"+
    "\1\0\44\6\4\0\24\7\1\0\2\7\5\6\13\7\1\0\44\7"+
    "\11\0\1\7\71\0\53\6\24\7\1\6\12\7\6\0\6\6\4\7"+
    "\4\6\3\7\1\6\3\7\2\6\7\7\3\6\4\7\15\6\14\7"+
    "\1\6\17\7\2\0\46\6\12\0\53\6\1\0\1\6\3\0\u0149\6"+
    "\1\0\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0\51\6"+
    "\1\0\4\6\2\0\41\6\1\0\4\6\2\0\7\6\1\0\1\6"+
    "\1\0\4\6\2\0\17\6\1\0\71\6\1\0\4\6\2\0\103\6"+
    "\2\0\3\7\40\0\20\6\20\0\125\6\14\0\u026c\6\2\0\21\6"+
    "\1\0\32\6\5\0\113\6\3\0\3\6\17\0\15\6\1\0\4\6"+
    "\3\7\13\0\22\6\3\7\13\0\22\6\2\7\14\0\15\6\1\0"+
    "\3\6\1\0\2\7\14\0\64\6\40\7\3\0\1\6\3\0\2\6"+
    "\1\7\2\0\12\7\41\0\3\7\2\0\12\7\6\0\130\6\10\0"+
    "\51\6\1\7\1\6\5\0\106\6\12\0\35\6\3\0\14\7\4\0"+
    "\14\7\12\0\12\7\36\6\2\0\5\6\13\0\54\6\4\0\21\7"+
    "\7\6\2\7\6\0\12\7\46\0\27\6\5\7\4\0\65\6\12\7"+
    "\1\0\35\7\2\0\13\7\6\0\12\7\15\0\1\6\130\0\5\7"+
    "\57\6\21\7\7\6\4\0\12\7\21\0\11\7\14\0\3\7\36\6"+
    "\12\7\3\0\2\6\12\7\6\0\46\6\16\7\14\0\44\6\24\7"+
    "\10\0\12\7\3\0\3\6\12\7\44\6\122\0\3\7\1\0\25\7"+
    "\4\6\1\7\4\6\1\7\15\0\300\6\47\7\25\0\4\7\u0116\6"+
    "\2\0\6\6\2\0\46\6\2\0\6\6\2\0\10\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\37\6\2\0\65\6\1\0\7\6"+
    "\1\0\1\6\3\0\3\6\1\0\7\6\3\0\4\6\2\0\6\6"+
    "\4\0\15\6\5\0\3\6\1\0\7\6\16\0\5\7\15\0\1\23"+
    "\14\0\5\7\4\0\1\24\13\0\2\6\23\0\1\6\13\0\5\7"+
    "\5\0\6\7\1\0\1\6\15\0\1\6\20\0\15\6\3\0\32\6"+
    "\26\0\15\7\4\0\1\7\3\0\14\7\21\0\1\6\4\0\1\6"+
    "\2\0\12\6\1\0\1\6\3\0\5\6\6\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\1\0\13\6\2\0\4\6\5\0\5\6"+
    "\4\0\1\6\21\0\51\6\u0a77\0\57\6\1\0\57\6\1\0\205\6"+
    "\6\0\4\6\3\7\16\0\46\6\12\0\66\6\11\0\1\6\17\0"+
    "\1\7\27\6\11\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6"+
    "\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0\40\7"+
    "\57\0\1\6\u01d5\0\3\6\31\0\11\6\6\7\1\0\5\6\2\0"+
    "\5\6\4\0\126\6\2\0\2\7\2\0\3\6\1\0\132\6\1\0"+
    "\4\6\5\0\51\6\3\0\136\6\21\0\33\6\65\0\20\6\u0200\0"+
    "\u19b6\6\112\0\u51cc\6\64\0\u048d\6\103\0\56\6\2\0\u010d\6\3\0"+
    "\20\6\12\7\2\6\24\0\57\6\1\7\14\0\2\7\1\0\31\6"+
    "\10\0\120\6\2\7\45\0\11\6\2\0\147\6\2\0\4\6\1\0"+
    "\2\6\16\0\12\6\120\0\10\6\1\7\3\6\1\7\4\6\1\7"+
    "\27\6\5\7\20\0\1\6\7\0\64\6\14\0\2\7\62\6\21\7"+
    "\13\0\12\7\6\0\22\7\6\6\3\0\1\6\4\0\12\7\34\6"+
    "\10\7\2\0\27\6\15\7\14\0\35\6\3\0\4\7\57\6\16\7"+
    "\16\0\1\6\12\7\46\0\51\6\16\7\11\0\3\6\1\7\10\6"+
    "\2\7\2\0\12\7\6\0\27\6\3\0\1\6\1\7\4\0\60\6"+
    "\1\7\1\6\3\7\2\6\2\7\5\6\2\7\1\6\1\7\1\6"+
    "\30\0\3\6\43\0\6\6\2\0\6\6\2\0\6\6\11\0\7\6"+
    "\1\0\7\6\221\0\43\6\10\7\1\0\2\7\2\0\12\7\6\0"+
    "\u2ba4\6\14\0\27\6\4\0\61\6\u2104\0\u012e\6\2\0\76\6\2\0"+
    "\152\6\46\0\7\6\14\0\5\6\5\0\1\6\1\7\12\6\1\0"+
    "\15\6\1\0\5\6\1\0\1\6\1\0\2\6\1\0\2\6\1\0"+
    "\154\6\41\0\u016b\6\22\0\100\6\2\0\66\6\50\0\15\6\3\0"+
    "\20\7\20\0\7\7\14\0\2\6\30\0\3\6\31\0\1\6\6\0"+
    "\5\6\1\0\207\6\2\0\1\7\4\0\1\6\13\0\12\7\7\0"+
    "\32\6\4\0\1\6\1\0\32\6\13\0\131\6\3\0\6\6\2\0"+
    "\6\6\2\0\6\6\2\0\3\6\3\0\2\6\3\0\2\6\22\0"+
    "\3\7\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\3\1\4\3\5\1\4\1\5"+
    "\1\4\2\1\1\5\1\2\1\1\1\5\1\4\2\5"+
    "\2\4\2\5\4\4\1\1\7\3\2\0\4\3\3\0"+
    "\6\4\3\0\2\6\12\4\1\7\1\4\1\7\5\4"+
    "\1\2\1\0\1\3\10\0\7\4\1\5\2\0\22\4"+
    "\1\0\2\3\5\0\4\4\1\5\1\0\13\4\2\3"+
    "\5\0\3\4\1\0\5\4\1\3\2\0\1\3\2\0"+
    "\3\4\1\3\25\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[186];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\u0118\0\70\0\u0150"+
    "\0\u0188\0\u01c0\0\u01f8\0\u0230\0\u0268\0\u02a0\0\u0118\0\70"+
    "\0\u02d8\0\u0310\0\u0348\0\u0380\0\u03b8\0\u03f0\0\u0428\0\u0460"+
    "\0\u0498\0\u04d0\0\u0508\0\u0540\0\u0578\0\u05b0\0\u05e8\0\u0620"+
    "\0\u0658\0\u0690\0\u06c8\0\u0700\0\u0738\0\u0770\0\u07a8\0\70"+
    "\0\u07e0\0\u0818\0\u0850\0\u0888\0\u08c0\0\u08f8\0\u0930\0\u0968"+
    "\0\u09a0\0\u09d8\0\u0a10\0\u0a48\0\u0a80\0\u0ab8\0\u02d8\0\u0af0"+
    "\0\70\0\u0b28\0\u0b60\0\u0b98\0\u0bd0\0\u0c08\0\u0c40\0\u0c78"+
    "\0\u0cb0\0\u0ce8\0\u0d20\0\u0118\0\u0d58\0\u0d90\0\u0dc8\0\u0e00"+
    "\0\u0e38\0\u0e70\0\u0ea8\0\u0ee0\0\u0f18\0\u0f50\0\u0f88\0\u0fc0"+
    "\0\u0ff8\0\u1030\0\u1068\0\u10a0\0\u10d8\0\u1110\0\u1148\0\u1180"+
    "\0\u11b8\0\u11f0\0\u1228\0\u1260\0\u1298\0\u0a80\0\u12d0\0\u1308"+
    "\0\u1340\0\u1378\0\u13b0\0\u13e8\0\u1420\0\u1458\0\u1490\0\u14c8"+
    "\0\u1500\0\u1538\0\u1570\0\u15a8\0\u15e0\0\u1618\0\u1650\0\u1688"+
    "\0\u16c0\0\u16f8\0\u1730\0\u1768\0\u0f88\0\u17a0\0\u17d8\0\u1810"+
    "\0\u1848\0\u1880\0\u18b8\0\u18f0\0\u1928\0\u1960\0\u12d0\0\u1998"+
    "\0\u19d0\0\u1a08\0\u1a40\0\u1a78\0\u1ab0\0\u1ae8\0\u1b20\0\u1b58"+
    "\0\u1b90\0\u1bc8\0\u1c00\0\u1c38\0\u17a0\0\u1c70\0\u1ca8\0\u1ce0"+
    "\0\u1d18\0\u1d50\0\u1d88\0\u1dc0\0\u1df8\0\u1e30\0\u1e68\0\u1ea0"+
    "\0\u1ed8\0\u1f10\0\u1f48\0\u1f80\0\u1fb8\0\u1ff0\0\u1848\0\u2028"+
    "\0\u2060\0\u2098\0\u20d0\0\u2108\0\u2140\0\u2178\0\u21b0\0\u21e8"+
    "\0\u2220\0\u2258\0\u2290\0\u22c8\0\u2300\0\u2338\0\u2370\0\u23a8"+
    "\0\u23e0\0\u2418\0\u2450\0\u2488\0\u24c0\0\u24f8\0\u2530\0\u2568"+
    "\0\u25a0\0\u25d8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[186];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\5\1\6\1\2\1\7\1\10"+
    "\1\11\1\6\1\12\1\13\1\14\1\6\1\2\1\15"+
    "\1\10\1\16\1\2\1\17\1\6\1\2\1\20\1\21"+
    "\1\22\1\23\1\24\1\6\1\25\1\26\1\6\1\27"+
    "\1\30\1\31\1\32\1\6\1\33\1\6\1\34\2\6"+
    "\1\35\1\36\1\37\2\40\1\41\1\42\1\5\1\43"+
    "\1\44\1\45\2\2\71\0\3\3\70\0\1\46\1\47"+
    "\51\0\1\50\16\0\1\51\1\0\1\50\1\52\1\53"+
    "\5\51\1\0\1\54\1\52\1\55\1\0\2\51\3\0"+
    "\22\51\3\0\1\50\16\0\12\6\2\0\1\6\2\0"+
    "\2\6\3\0\22\6\12\0\1\56\11\0\2\10\10\0"+
    "\1\10\53\0\5\6\1\57\4\6\2\0\1\6\2\0"+
    "\2\6\3\0\22\6\12\0\1\56\7\0\12\6\2\0"+
    "\1\6\2\0\2\6\3\0\17\6\1\60\2\6\12\0"+
    "\1\56\7\0\5\6\1\61\4\6\2\0\1\6\2\0"+
    "\1\6\1\62\3\0\12\6\1\63\7\6\12\0\1\56"+
    "\7\0\7\6\1\64\2\6\2\0\1\6\2\0\2\6"+
    "\3\0\22\6\12\0\1\56\1\0\2\65\1\0\65\65"+
    "\10\0\1\66\57\0\1\67\1\70\1\71\65\67\6\0"+
    "\12\6\2\0\1\6\2\0\2\6\3\0\1\6\1\72"+
    "\20\6\12\0\1\56\7\0\5\6\1\73\4\6\2\0"+
    "\1\6\2\0\2\6\3\0\22\6\12\0\1\56\7\0"+
    "\10\6\1\74\1\6\2\0\1\6\2\0\2\6\3\0"+
    "\22\6\12\0\1\56\7\0\11\6\1\75\2\0\1\6"+
    "\2\0\2\6\3\0\1\63\5\6\1\76\13\6\12\0"+
    "\1\56\7\0\6\6\1\77\3\6\2\0\1\6\2\0"+
    "\2\6\3\0\6\6\1\100\1\101\6\6\1\102\3\6"+
    "\12\0\1\56\7\0\5\6\1\103\4\6\2\0\1\6"+
    "\2\0\2\6\3\0\11\6\1\104\10\6\12\0\1\56"+
    "\7\0\7\6\1\105\1\6\1\106\2\0\1\6\2\0"+
    "\2\6\3\0\22\6\12\0\1\56\7\0\11\6\1\107"+
    "\2\0\1\6\2\0\2\6\3\0\12\6\1\110\7\6"+
    "\12\0\1\56\7\0\11\6\1\111\2\0\1\6\2\0"+
    "\2\6\3\0\22\6\12\0\1\56\7\0\11\6\1\72"+
    "\2\0\1\6\2\0\2\6\3\0\22\6\12\0\1\56"+
    "\7\0\12\6\2\0\1\6\2\0\2\6\3\0\6\6"+
    "\1\112\13\6\12\0\1\56\7\0\11\6\1\113\2\0"+
    "\1\6\2\0\2\6\3\0\22\6\12\0\1\56\55\0"+
    "\1\50\2\0\1\50\65\0\1\50\1\0\1\50\1\0"+
    "\1\50\65\0\1\50\67\0\1\50\1\40\66\0\1\50"+
    "\1\0\1\50\14\0\1\51\1\0\1\50\1\52\1\53"+
    "\5\51\1\0\1\54\1\52\1\55\1\0\2\51\3\0"+
    "\22\51\3\0\1\50\3\0\1\50\63\0\1\50\4\0"+
    "\1\50\11\0\1\51\1\0\1\50\1\52\1\53\5\51"+
    "\1\0\1\54\1\52\1\55\1\0\2\51\3\0\22\51"+
    "\14\0\1\46\1\114\1\20\65\46\5\115\1\0\62\115"+
    "\6\0\12\51\2\0\1\51\2\0\2\51\3\0\22\51"+
    "\24\0\2\52\10\0\1\52\53\0\5\51\1\116\4\51"+
    "\2\0\1\51\2\0\2\51\3\0\22\51\14\0\2\117"+
    "\1\0\65\117\10\0\1\120\65\0\1\121\1\0\1\122"+
    "\1\123\1\124\5\121\1\0\1\125\1\123\1\126\1\0"+
    "\2\121\3\0\22\121\22\0\6\6\1\127\3\6\2\0"+
    "\1\6\2\0\2\6\3\0\22\6\12\0\1\56\7\0"+
    "\12\6\2\0\1\6\2\0\2\6\3\0\20\6\1\130"+
    "\1\6\12\0\1\56\7\0\12\6\2\0\1\6\2\0"+
    "\2\6\3\0\1\6\1\131\20\6\12\0\1\56\7\0"+
    "\6\6\1\132\3\6\2\0\1\6\2\0\2\6\3\0"+
    "\22\6\12\0\1\56\7\0\12\6\2\0\1\6\2\0"+
    "\2\6\3\0\5\6\1\133\14\6\12\0\1\56\7\0"+
    "\6\6\1\134\3\6\2\0\1\6\2\0\2\6\3\0"+
    "\14\6\1\135\5\6\12\0\1\56\1\0\2\65\1\0"+
    "\16\65\1\136\46\65\24\0\1\137\1\0\1\140\43\0"+
    "\1\71\73\0\6\6\1\141\3\6\2\0\1\6\2\0"+
    "\2\6\3\0\22\6\12\0\1\56\7\0\12\6\2\0"+
    "\1\6\2\0\2\6\3\0\5\6\1\142\1\6\1\143"+
    "\12\6\12\0\1\56\7\0\7\6\1\144\2\6\2\0"+
    "\1\6\2\0\2\6\3\0\22\6\12\0\1\56\7\0"+
    "\5\6\1\145\4\6\2\0\1\6\2\0\2\6\3\0"+
    "\22\6\12\0\1\56\7\0\12\6\2\0\1\6\2\0"+
    "\2\6\3\0\1\107\21\6\12\0\1\56\7\0\10\6"+
    "\1\146\1\6\2\0\1\6\2\0\2\6\3\0\1\147"+
    "\21\6\12\0\1\56\7\0\11\6\1\150\2\0\1\6"+
    "\2\0\2\6\3\0\22\6\12\0\1\56\7\0\12\6"+
    "\2\0\1\6\2\0\2\6\3\0\14\6\1\151\1\152"+
    "\4\6\12\0\1\56\7\0\12\6\2\0\1\6\2\0"+
    "\2\6\3\0\7\6\1\153\12\6\12\0\1\56\7\0"+
    "\6\6\1\104\3\6\2\0\1\6\2\0\2\6\3\0"+
    "\22\6\12\0\1\56\7\0\12\6\2\0\1\6\2\0"+
    "\2\6\3\0\11\6\1\154\10\6\12\0\1\56\7\0"+
    "\12\6\2\0\1\6\2\0\2\6\3\0\1\6\1\155"+
    "\20\6\12\0\1\56\7\0\10\6\1\104\1\6\2\0"+
    "\1\6\2\0\2\6\3\0\22\6\12\0\1\56\7\0"+
    "\11\6\1\156\2\0\1\6\2\0\2\6\3\0\22\6"+
    "\12\0\1\56\7\0\5\6\1\157\4\6\2\0\1\6"+
    "\2\0\2\6\3\0\22\6\12\0\1\56\7\0\12\6"+
    "\2\0\1\6\2\0\2\6\3\0\7\6\1\160\12\6"+
    "\12\0\1\56\7\0\12\6\2\0\1\6\2\0\2\6"+
    "\3\0\7\6\1\161\2\6\1\162\7\6\12\0\1\56"+
    "\3\0\1\20\65\0\5\115\1\163\62\115\6\0\6\51"+
    "\1\164\3\51\2\0\1\51\2\0\2\51\3\0\22\51"+
    "\14\0\2\117\1\0\16\117\1\165\46\117\24\0\1\166"+
    "\1\0\1\167\47\0\12\121\2\0\1\121\2\0\2\121"+
    "\3\0\22\121\13\0\1\50\67\0\1\50\10\0\2\123"+
    "\10\0\1\123\44\0\1\50\6\0\5\121\1\170\4\121"+
    "\2\0\1\121\2\0\2\121\3\0\22\121\13\0\1\50"+
    "\2\171\1\0\65\171\10\0\1\172\65\0\7\6\1\173"+
    "\2\6\2\0\1\6\2\0\2\6\3\0\22\6\12\0"+
    "\1\56\7\0\7\6\1\174\2\6\2\0\1\6\2\0"+
    "\2\6\3\0\22\6\12\0\1\56\7\0\12\6\2\0"+
    "\1\6\2\0\2\6\3\0\13\6\1\104\6\6\12\0"+
    "\1\56\7\0\7\6\1\175\2\6\2\0\1\6\2\0"+
    "\2\6\3\0\22\6\12\0\1\56\7\0\7\6\1\104"+
    "\2\6\2\0\1\6\2\0\2\6\3\0\22\6\12\0"+
    "\1\56\7\0\12\6\2\0\1\6\2\0\2\6\3\0"+
    "\1\6\1\175\20\6\12\0\1\56\7\0\12\6\2\0"+
    "\1\6\2\0\2\6\3\0\7\6\1\176\12\6\12\0"+
    "\1\56\11\0\1\177\11\0\1\177\70\0\1\200\52\0"+
    "\11\6\1\104\2\0\1\6\2\0\2\6\3\0\22\6"+
    "\12\0\1\56\7\0\12\6\2\0\1\6\2\0\2\6"+
    "\3\0\7\6\1\201\12\6\12\0\1\56\7\0\11\6"+
    "\1\202\2\0\1\6\2\0\2\6\3\0\22\6\12\0"+
    "\1\56\7\0\12\6\2\0\1\6\2\0\2\6\3\0"+
    "\1\203\21\6\12\0\1\56\7\0\6\6\1\204\3\6"+
    "\2\0\1\6\2\0\2\6\3\0\5\6\1\103\14\6"+
    "\12\0\1\56\7\0\12\6\2\0\1\6\2\0\2\6"+
    "\3\0\1\6\1\205\20\6\12\0\1\56\7\0\6\6"+
    "\1\206\3\6\2\0\1\6\2\0\2\6\3\0\22\6"+
    "\12\0\1\56\7\0\10\6\1\103\1\6\2\0\1\6"+
    "\2\0\2\6\3\0\22\6\12\0\1\56\7\0\5\6"+
    "\1\207\4\6\2\0\1\6\2\0\2\6\3\0\22\6"+
    "\12\0\1\56\7\0\7\6\1\210\2\6\2\0\1\6"+
    "\2\0\2\6\3\0\22\6\12\0\1\56\7\0\6\6"+
    "\1\211\3\6\2\0\1\6\2\0\2\6\3\0\22\6"+
    "\12\0\1\56\7\0\12\6\2\0\1\6\2\0\2\6"+
    "\3\0\1\212\21\6\12\0\1\56\7\0\12\6\2\0"+
    "\1\6\2\0\2\6\3\0\2\6\1\160\17\6\12\0"+
    "\1\56\7\0\12\6\2\0\1\6\2\0\2\6\3\0"+
    "\1\103\21\6\12\0\1\56\7\0\12\6\2\0\1\6"+
    "\2\0\2\6\3\0\14\6\1\104\5\6\12\0\1\56"+
    "\7\0\12\6\2\0\1\6\2\0\2\6\3\0\12\6"+
    "\1\133\7\6\12\0\1\56\7\0\12\6\2\0\1\6"+
    "\2\0\2\6\3\0\10\6\1\104\11\6\12\0\1\56"+
    "\7\0\12\6\2\0\1\6\2\0\2\6\3\0\1\213"+
    "\21\6\12\0\1\56\1\0\4\115\1\20\1\163\62\115"+
    "\6\0\7\51\1\214\2\51\2\0\1\51\2\0\2\51"+
    "\3\0\22\51\24\0\1\215\11\0\1\215\70\0\1\216"+
    "\52\0\6\121\1\217\3\121\2\0\1\121\2\0\2\121"+
    "\3\0\22\121\13\0\1\50\2\171\1\0\16\171\1\220"+
    "\46\171\24\0\1\221\1\0\1\222\47\0\10\6\1\223"+
    "\1\6\2\0\1\6\2\0\2\6\3\0\22\6\12\0"+
    "\1\56\7\0\12\6\2\0\1\6\2\0\2\6\3\0"+
    "\10\6\1\224\11\6\12\0\1\56\7\0\10\6\1\202"+
    "\1\6\2\0\1\6\2\0\2\6\3\0\22\6\12\0"+
    "\1\56\7\0\12\6\2\0\1\6\2\0\2\6\3\0"+
    "\5\6\1\225\14\6\12\0\1\56\11\0\3\226\2\0"+
    "\1\226\4\0\1\226\2\0\1\226\4\0\1\226\1\0"+
    "\1\226\1\0\1\226\3\0\2\226\32\0\12\6\2\0"+
    "\1\6\2\0\2\6\3\0\14\6\1\151\5\6\12\0"+
    "\1\56\7\0\5\6\1\104\4\6\2\0\1\6\2\0"+
    "\2\6\3\0\22\6\12\0\1\56\7\0\12\6\2\0"+
    "\1\6\2\0\2\6\3\0\3\6\1\104\16\6\12\0"+
    "\1\56\7\0\12\6\2\0\1\6\2\0\2\6\3\0"+
    "\7\6\1\227\12\6\12\0\1\56\7\0\12\6\2\0"+
    "\1\6\2\0\2\6\3\0\4\6\1\103\15\6\12\0"+
    "\1\56\7\0\12\6\2\0\1\6\2\0\2\6\3\0"+
    "\7\6\1\230\12\6\12\0\1\56\7\0\7\6\1\161"+
    "\2\6\2\0\1\6\2\0\2\6\3\0\22\6\12\0"+
    "\1\56\7\0\11\6\1\231\2\0\1\6\2\0\2\6"+
    "\3\0\22\6\12\0\1\56\7\0\12\6\2\0\1\6"+
    "\2\0\2\6\3\0\4\6\1\232\15\6\12\0\1\56"+
    "\7\0\12\6\2\0\1\6\2\0\2\6\3\0\1\6"+
    "\1\233\20\6\12\0\1\56\7\0\6\6\1\112\3\6"+
    "\2\0\1\6\2\0\2\6\3\0\22\6\12\0\1\56"+
    "\7\0\10\51\1\234\1\51\2\0\1\51\2\0\2\51"+
    "\3\0\22\51\24\0\3\235\2\0\1\235\4\0\1\235"+
    "\2\0\1\235\4\0\1\235\1\0\1\235\1\0\1\235"+
    "\3\0\2\235\32\0\7\121\1\236\2\121\2\0\1\121"+
    "\2\0\2\121\3\0\22\121\13\0\1\50\2\171\1\0"+
    "\16\171\1\220\45\171\1\237\10\0\1\240\11\0\1\240"+
    "\70\0\1\241\52\0\11\6\1\242\2\0\1\6\2\0"+
    "\2\6\3\0\22\6\12\0\1\56\7\0\7\6\1\231"+
    "\2\6\2\0\1\6\2\0\2\6\3\0\22\6\12\0"+
    "\1\56\7\0\6\6\1\243\3\6\2\0\1\6\2\0"+
    "\2\6\3\0\22\6\12\0\1\56\11\0\3\226\2\0"+
    "\1\226\4\0\1\226\2\0\1\226\1\0\1\7\2\0"+
    "\1\226\1\0\1\226\1\0\1\226\3\0\2\226\32\0"+
    "\5\6\1\244\4\6\2\0\1\6\2\0\2\6\3\0"+
    "\22\6\12\0\1\56\7\0\12\6\2\0\1\6\2\0"+
    "\2\6\3\0\4\6\1\104\15\6\12\0\1\56\7\0"+
    "\12\6\2\0\1\6\2\0\2\6\3\0\11\6\1\104"+
    "\10\6\12\0\1\56\7\0\12\6\2\0\1\6\2\0"+
    "\2\6\3\0\6\6\1\104\13\6\12\0\1\56\7\0"+
    "\12\6\2\0\1\6\2\0\2\6\3\0\12\6\1\103"+
    "\7\6\12\0\1\56\7\0\11\51\1\245\2\0\1\51"+
    "\2\0\2\51\3\0\22\51\24\0\3\235\2\0\1\235"+
    "\4\0\1\235\2\0\1\235\1\0\1\50\2\0\1\235"+
    "\1\0\1\235\1\0\1\235\3\0\2\235\32\0\10\121"+
    "\1\246\1\121\2\0\1\121\2\0\2\121\3\0\22\121"+
    "\13\0\1\50\10\0\1\240\11\0\1\240\44\0\1\50"+
    "\10\0\3\247\2\0\1\247\4\0\1\247\2\0\1\247"+
    "\4\0\1\247\1\0\1\247\1\0\1\247\3\0\2\247"+
    "\32\0\12\6\1\250\1\0\1\6\2\0\2\6\3\0"+
    "\22\6\12\0\1\56\7\0\7\6\1\107\2\6\2\0"+
    "\1\6\2\0\2\6\3\0\22\6\12\0\1\56\7\0"+
    "\12\6\2\0\1\6\2\0\2\6\3\0\1\6\1\133"+
    "\20\6\12\0\1\56\7\0\12\51\1\251\1\0\1\51"+
    "\2\0\2\51\3\0\22\51\22\0\11\121\1\252\2\0"+
    "\1\121\2\0\2\121\3\0\22\121\13\0\1\50\10\0"+
    "\3\247\2\0\1\247\4\0\1\247\2\0\1\247\1\0"+
    "\1\122\2\0\1\247\1\0\1\247\1\0\1\247\3\0"+
    "\2\247\36\0\1\253\67\0\1\254\63\0\12\121\1\255"+
    "\1\0\1\121\2\0\2\121\3\0\22\121\13\0\1\50"+
    "\13\0\1\256\67\0\1\257\66\0\1\260\71\0\1\261"+
    "\67\0\1\262\66\0\1\263\71\0\1\264\67\0\1\265"+
    "\66\0\1\266\71\0\1\267\67\0\1\270\66\0\1\271"+
    "\71\0\1\7\67\0\1\50\66\0\1\272\70\0\1\122"+
    "\50\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9744];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\10\1\1\11\25\1\2\0"+
    "\1\11\3\1\3\0\6\1\3\0\1\1\1\11\23\1"+
    "\1\0\1\1\10\0\10\1\2\0\22\1\1\0\2\1"+
    "\5\0\5\1\1\0\15\1\5\0\3\1\1\0\6\1"+
    "\2\0\1\1\2\0\4\1\25\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[186];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
public String lexeme;   
public int linea;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2224) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 5: 
          { lexeme=yytext();linea = yyline; return LITERAL;
          }
        case 8: break;
        case 3: 
          { lexeme=yytext();linea = yyline; return OPERADOR;
          }
        case 9: break;
        case 1: 
          { lexeme=yytext();linea = yyline;return ERROR;
          }
        case 10: break;
        case 6: 
          { lexeme=yytext();linea = yyline; return ETIQUETA;
          }
        case 11: break;
        case 7: 
          { lexeme=yytext();linea = yyline; return PALABRA_RESERVADA;
          }
        case 12: break;
        case 4: 
          { lexeme=yytext();linea = yyline; return IDENTIFICADOR;
          }
        case 13: break;
        case 2: 
          { 
          }
        case 14: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}

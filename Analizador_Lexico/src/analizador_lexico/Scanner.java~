/* The following code was generated by JFlex 1.4.3 on 5/25/14 6:12 PM */



package analizador_lexico;
import java_cup.runtime.*;
import Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 5/25/14 6:12 PM from the specification file
 * <tt>src/analizador_lexico/Lexer.flex</tt>
 */
public class Scanner implements sym, java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;
  public static final int CHARLITERAL = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\7\1\3\1\2\1\0\1\3\1\1\16\7\4\0\1\3\1\71"+
    "\1\22\1\25\1\6\1\77\1\74\1\23\1\56\1\57\1\5\1\76"+
    "\1\65\1\14\1\12\1\4\1\10\1\21\2\20\4\20\2\11\1\73"+
    "\1\64\1\70\1\66\1\67\1\72\1\0\4\17\1\13\1\17\5\6"+
    "\1\16\13\6\1\15\2\6\1\62\1\24\1\63\1\100\1\6\1\0"+
    "\1\32\1\26\1\34\1\46\1\31\1\42\1\50\1\35\1\40\1\6"+
    "\1\51\1\30\1\52\1\33\1\27\1\43\1\6\1\36\1\37\1\41"+
    "\1\44\1\45\1\47\1\53\1\55\1\54\1\60\1\75\1\61\1\101"+
    "\41\7\2\0\4\6\4\0\1\6\2\0\1\7\7\0\1\6\4\0"+
    "\1\6\5\0\27\6\1\0\37\6\1\0\u01ca\6\4\0\14\6\16\0"+
    "\5\6\7\0\1\6\1\0\1\6\21\0\160\7\5\6\1\0\2\6"+
    "\2\0\4\6\10\0\1\6\1\0\3\6\1\0\1\6\1\0\24\6"+
    "\1\0\123\6\1\0\213\6\1\0\5\7\2\0\236\6\11\0\46\6"+
    "\2\0\1\6\7\0\47\6\11\0\55\7\1\0\1\7\1\0\2\7"+
    "\1\0\2\7\1\0\1\7\10\0\33\6\5\0\3\6\15\0\4\7"+
    "\7\0\1\6\4\0\13\7\5\0\53\6\37\7\4\0\2\6\1\7"+
    "\143\6\1\0\1\6\10\7\1\0\6\7\2\6\2\7\1\0\4\7"+
    "\2\6\12\7\3\6\2\0\1\6\17\0\1\7\1\6\1\7\36\6"+
    "\33\7\2\0\131\6\13\7\1\6\16\0\12\7\41\6\11\7\2\6"+
    "\4\0\1\6\5\0\26\6\4\7\1\6\11\7\1\6\3\7\1\6"+
    "\5\7\22\0\31\6\3\7\244\0\4\7\66\6\3\7\1\6\22\7"+
    "\1\6\7\7\12\6\2\7\2\0\12\7\1\0\7\6\1\0\7\6"+
    "\1\0\3\7\1\0\10\6\2\0\2\6\2\0\26\6\1\0\7\6"+
    "\1\0\1\6\3\0\4\6\2\0\1\7\1\6\7\7\2\0\2\7"+
    "\2\0\3\7\1\6\10\0\1\7\4\0\2\6\1\0\3\6\2\7"+
    "\2\0\12\7\4\6\7\0\1\6\5\0\3\7\1\0\6\6\4\0"+
    "\2\6\2\0\26\6\1\0\7\6\1\0\2\6\1\0\2\6\1\0"+
    "\2\6\2\0\1\7\1\0\5\7\4\0\2\7\2\0\3\7\3\0"+
    "\1\7\7\0\4\6\1\0\1\6\7\0\14\7\3\6\1\7\13\0"+
    "\3\7\1\0\11\6\1\0\3\6\1\0\26\6\1\0\7\6\1\0"+
    "\2\6\1\0\5\6\2\0\1\7\1\6\10\7\1\0\3\7\1\0"+
    "\3\7\2\0\1\6\17\0\2\6\2\7\2\0\12\7\1\0\1\6"+
    "\17\0\3\7\1\0\10\6\2\0\2\6\2\0\26\6\1\0\7\6"+
    "\1\0\2\6\1\0\5\6\2\0\1\7\1\6\7\7\2\0\2\7"+
    "\2\0\3\7\10\0\2\7\4\0\2\6\1\0\3\6\2\7\2\0"+
    "\12\7\1\0\1\6\20\0\1\7\1\6\1\0\6\6\3\0\3\6"+
    "\1\0\4\6\3\0\2\6\1\0\1\6\1\0\2\6\3\0\2\6"+
    "\3\0\3\6\3\0\14\6\4\0\5\7\3\0\3\7\1\0\4\7"+
    "\2\0\1\6\6\0\1\7\16\0\12\7\11\0\1\6\7\0\3\7"+
    "\1\0\10\6\1\0\3\6\1\0\27\6\1\0\12\6\1\0\5\6"+
    "\3\0\1\6\7\7\1\0\3\7\1\0\4\7\7\0\2\7\1\0"+
    "\2\6\6\0\2\6\2\7\2\0\12\7\22\0\2\7\1\0\10\6"+
    "\1\0\3\6\1\0\27\6\1\0\12\6\1\0\5\6\2\0\1\7"+
    "\1\6\7\7\1\0\3\7\1\0\4\7\7\0\2\7\7\0\1\6"+
    "\1\0\2\6\2\7\2\0\12\7\1\0\2\6\17\0\2\7\1\0"+
    "\10\6\1\0\3\6\1\0\51\6\2\0\1\6\7\7\1\0\3\7"+
    "\1\0\4\7\1\6\10\0\1\7\10\0\2\6\2\7\2\0\12\7"+
    "\12\0\6\6\2\0\2\7\1\0\22\6\3\0\30\6\1\0\11\6"+
    "\1\0\1\6\2\0\7\6\3\0\1\7\4\0\6\7\1\0\1\7"+
    "\1\0\10\7\22\0\2\7\15\0\60\6\1\7\2\6\7\7\4\0"+
    "\10\6\10\7\1\0\12\7\47\0\2\6\1\0\1\6\2\0\2\6"+
    "\1\0\1\6\2\0\1\6\6\0\4\6\1\0\7\6\1\0\3\6"+
    "\1\0\1\6\1\0\1\6\2\0\2\6\1\0\4\6\1\7\2\6"+
    "\6\7\1\0\2\7\1\6\2\0\5\6\1\0\1\6\1\0\6\7"+
    "\2\0\12\7\2\0\2\6\42\0\1\6\27\0\2\7\6\0\12\7"+
    "\13\0\1\7\1\0\1\7\1\0\1\7\4\0\2\7\10\6\1\0"+
    "\44\6\4\0\24\7\1\0\2\7\5\6\13\7\1\0\44\7\11\0"+
    "\1\7\71\0\53\6\24\7\1\6\12\7\6\0\6\6\4\7\4\6"+
    "\3\7\1\6\3\7\2\6\7\7\3\6\4\7\15\6\14\7\1\6"+
    "\17\7\2\0\46\6\12\0\53\6\1\0\1\6\3\0\u0149\6\1\0"+
    "\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0\51\6\1\0"+
    "\4\6\2\0\41\6\1\0\4\6\2\0\7\6\1\0\1\6\1\0"+
    "\4\6\2\0\17\6\1\0\71\6\1\0\4\6\2\0\103\6\2\0"+
    "\3\7\40\0\20\6\20\0\125\6\14\0\u026c\6\2\0\21\6\1\0"+
    "\32\6\5\0\113\6\3\0\3\6\17\0\15\6\1\0\4\6\3\7"+
    "\13\0\22\6\3\7\13\0\22\6\2\7\14\0\15\6\1\0\3\6"+
    "\1\0\2\7\14\0\64\6\40\7\3\0\1\6\3\0\2\6\1\7"+
    "\2\0\12\7\41\0\3\7\2\0\12\7\6\0\130\6\10\0\51\6"+
    "\1\7\1\6\5\0\106\6\12\0\35\6\3\0\14\7\4\0\14\7"+
    "\12\0\12\7\36\6\2\0\5\6\13\0\54\6\4\0\21\7\7\6"+
    "\2\7\6\0\12\7\46\0\27\6\5\7\4\0\65\6\12\7\1\0"+
    "\35\7\2\0\13\7\6\0\12\7\15\0\1\6\130\0\5\7\57\6"+
    "\21\7\7\6\4\0\12\7\21\0\11\7\14\0\3\7\36\6\12\7"+
    "\3\0\2\6\12\7\6\0\46\6\16\7\14\0\44\6\24\7\10\0"+
    "\12\7\3\0\3\6\12\7\44\6\122\0\3\7\1\0\25\7\4\6"+
    "\1\7\4\6\1\7\15\0\300\6\47\7\25\0\4\7\u0116\6\2\0"+
    "\6\6\2\0\46\6\2\0\6\6\2\0\10\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\37\6\2\0\65\6\1\0\7\6\1\0"+
    "\1\6\3\0\3\6\1\0\7\6\3\0\4\6\2\0\6\6\4\0"+
    "\15\6\5\0\3\6\1\0\7\6\16\0\5\7\32\0\5\7\20\0"+
    "\2\6\23\0\1\6\13\0\5\7\5\0\6\7\1\0\1\6\15\0"+
    "\1\6\20\0\15\6\3\0\32\6\26\0\15\7\4\0\1\7\3\0"+
    "\14\7\21\0\1\6\4\0\1\6\2\0\12\6\1\0\1\6\3\0"+
    "\5\6\6\0\1\6\1\0\1\6\1\0\1\6\1\0\4\6\1\0"+
    "\13\6\2\0\4\6\5\0\5\6\4\0\1\6\21\0\51\6\u0a77\0"+
    "\57\6\1\0\57\6\1\0\205\6\6\0\4\6\3\7\16\0\46\6"+
    "\12\0\66\6\11\0\1\6\17\0\1\7\27\6\11\0\7\6\1\0"+
    "\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0"+
    "\7\6\1\0\7\6\1\0\40\7\57\0\1\6\u01d5\0\3\6\31\0"+
    "\11\6\6\7\1\0\5\6\2\0\5\6\4\0\126\6\2\0\2\7"+
    "\2\0\3\6\1\0\132\6\1\0\4\6\5\0\51\6\3\0\136\6"+
    "\21\0\33\6\65\0\20\6\u0200\0\u19b6\6\112\0\u51cc\6\64\0\u048d\6"+
    "\103\0\56\6\2\0\u010d\6\3\0\20\6\12\7\2\6\24\0\57\6"+
    "\1\7\14\0\2\7\1\0\31\6\10\0\120\6\2\7\45\0\11\6"+
    "\2\0\147\6\2\0\4\6\1\0\2\6\16\0\12\6\120\0\10\6"+
    "\1\7\3\6\1\7\4\6\1\7\27\6\5\7\20\0\1\6\7\0"+
    "\64\6\14\0\2\7\62\6\21\7\13\0\12\7\6\0\22\7\6\6"+
    "\3\0\1\6\4\0\12\7\34\6\10\7\2\0\27\6\15\7\14\0"+
    "\35\6\3\0\4\7\57\6\16\7\16\0\1\6\12\7\46\0\51\6"+
    "\16\7\11\0\3\6\1\7\10\6\2\7\2\0\12\7\6\0\27\6"+
    "\3\0\1\6\1\7\4\0\60\6\1\7\1\6\3\7\2\6\2\7"+
    "\5\6\2\7\1\6\1\7\1\6\30\0\3\6\43\0\6\6\2\0"+
    "\6\6\2\0\6\6\11\0\7\6\1\0\7\6\221\0\43\6\10\7"+
    "\1\0\2\7\2\0\12\7\6\0\u2ba4\6\14\0\27\6\4\0\61\6"+
    "\u2104\0\u012e\6\2\0\76\6\2\0\152\6\46\0\7\6\14\0\5\6"+
    "\5\0\1\6\1\7\12\6\1\0\15\6\1\0\5\6\1\0\1\6"+
    "\1\0\2\6\1\0\2\6\1\0\154\6\41\0\u016b\6\22\0\100\6"+
    "\2\0\66\6\50\0\15\6\3\0\20\7\20\0\7\7\14\0\2\6"+
    "\30\0\3\6\31\0\1\6\6\0\5\6\1\0\207\6\2\0\1\7"+
    "\4\0\1\6\13\0\12\7\7\0\32\6\4\0\1\6\1\0\32\6"+
    "\13\0\131\6\3\0\6\6\2\0\6\6\2\0\6\6\2\0\3\6"+
    "\3\0\2\6\3\0\2\6\22\0\3\7\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\1\3\1\4\1\5\2\6\1\7"+
    "\1\6\1\10\1\11\1\12\1\1\1\6\1\5\2\6"+
    "\1\5\1\6\4\5\1\6\3\5\1\6\3\5\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\1\1\32"+
    "\1\33\1\34\1\35\1\36\2\37\1\40\2\1\2\41"+
    "\1\1\1\2\1\0\1\42\1\43\3\44\2\0\2\44"+
    "\1\45\1\46\1\47\1\50\1\0\2\51\21\5\1\52"+
    "\10\5\1\53\5\5\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100"+
    "\1\101\1\102\1\103\11\0\1\104\1\44\3\0\1\44"+
    "\24\5\1\105\2\5\1\106\13\5\1\107\1\110\1\111"+
    "\1\112\1\113\1\114\1\115\1\116\1\117\1\120\1\6"+
    "\1\0\1\44\2\5\1\121\1\122\1\123\1\5\1\124"+
    "\1\125\2\5\1\126\1\127\1\130\10\5\1\131\6\5"+
    "\1\132\3\5\1\133\1\134\1\0\1\44\1\5\1\135"+
    "\1\5\1\136\3\5\1\137\6\5\1\140\1\141\4\5"+
    "\1\142\1\143\1\0\1\44\1\5\1\144\1\5\1\145"+
    "\1\5\1\146\1\147\1\150\1\151\1\152\1\5\1\153"+
    "\3\5\1\0\1\44\1\154\2\5\1\155\2\5\1\156"+
    "\1\0\1\44\1\157\1\160\1\161\1\162\1\0\1\44"+
    "\1\0\1\44\1\0\1\44\1\0\1\44\1\0\1\44"+
    "\1\0\1\44\1\0\1\44\1\0\1\44\1\0\1\44"+
    "\1\0\5\44";

  private static int [] zzUnpackAction() {
    int [] result = new int[315];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\204\0\306\0\u0108\0\306\0\u014a\0\u018c"+
    "\0\u01ce\0\u0210\0\u0252\0\u0294\0\u01ce\0\u02d6\0\306\0\306"+
    "\0\u0318\0\u035a\0\u039c\0\u03de\0\u0420\0\u0462\0\u04a4\0\u04e6"+
    "\0\u0528\0\u056a\0\u05ac\0\u05ee\0\u0630\0\u0672\0\u06b4\0\u06f6"+
    "\0\u0738\0\u077a\0\u07bc\0\306\0\306\0\306\0\306\0\306"+
    "\0\306\0\306\0\306\0\u07fe\0\u0840\0\u0882\0\u08c4\0\306"+
    "\0\306\0\u0906\0\u0948\0\u098a\0\u09cc\0\u0a0e\0\306\0\u0a50"+
    "\0\u0a92\0\306\0\306\0\u0ad4\0\u0b16\0\u0b58\0\306\0\u0b9a"+
    "\0\u0bdc\0\u0c1e\0\306\0\306\0\u0c60\0\u0ca2\0\u0ce4\0\u0d26"+
    "\0\u0d68\0\u0daa\0\u0dec\0\u0252\0\306\0\306\0\306\0\u0318"+
    "\0\u0e2e\0\306\0\u0e70\0\u0eb2\0\u0ef4\0\u0f36\0\u0f78\0\u0fba"+
    "\0\u0ffc\0\u103e\0\u1080\0\u10c2\0\u1104\0\u1146\0\u1188\0\u11ca"+
    "\0\u120c\0\u124e\0\u1290\0\u01ce\0\u12d2\0\u1314\0\u1356\0\u1398"+
    "\0\u13da\0\u141c\0\u145e\0\u14a0\0\u01ce\0\u14e2\0\u1524\0\u1566"+
    "\0\u15a8\0\u15ea\0\306\0\306\0\u162c\0\306\0\u166e\0\306"+
    "\0\306\0\306\0\306\0\306\0\306\0\306\0\306\0\306"+
    "\0\306\0\306\0\306\0\306\0\306\0\306\0\306\0\306"+
    "\0\306\0\306\0\u16b0\0\u16f2\0\u1734\0\u1776\0\u17b8\0\u17fa"+
    "\0\u183c\0\u187e\0\u18c0\0\306\0\u1902\0\u1902\0\u1944\0\u1986"+
    "\0\u19c8\0\u1a0a\0\u1a4c\0\u1a8e\0\u1ad0\0\u1b12\0\u1b54\0\u1b96"+
    "\0\u1bd8\0\u1c1a\0\u1c5c\0\u1c9e\0\u1ce0\0\u1d22\0\u1d64\0\u1da6"+
    "\0\u1de8\0\u1e2a\0\u1e6c\0\u1eae\0\u1ef0\0\u01ce\0\u1f32\0\u1f74"+
    "\0\u01ce\0\u1fb6\0\u1ff8\0\u203a\0\u207c\0\u20be\0\u2100\0\u2142"+
    "\0\u2184\0\u21c6\0\u2208\0\u224a\0\306\0\306\0\306\0\306"+
    "\0\306\0\306\0\306\0\306\0\306\0\306\0\306\0\u228c"+
    "\0\u22ce\0\u2310\0\u2352\0\u01ce\0\u01ce\0\u01ce\0\u2394\0\u01ce"+
    "\0\u01ce\0\u23d6\0\u2418\0\u01ce\0\u01ce\0\u01ce\0\u245a\0\u249c"+
    "\0\u24de\0\u2520\0\u2562\0\u25a4\0\u25e6\0\u2628\0\u01ce\0\u266a"+
    "\0\u26ac\0\u26ee\0\u2730\0\u2772\0\u27b4\0\u01ce\0\u27f6\0\u2838"+
    "\0\u287a\0\u01ce\0\u01ce\0\u28bc\0\u28fe\0\u2940\0\u01ce\0\u2982"+
    "\0\u01ce\0\u29c4\0\u2a06\0\u2a48\0\u01ce\0\u2a8a\0\u2acc\0\u2b0e"+
    "\0\u2b50\0\u2b92\0\u2bd4\0\u01ce\0\u01ce\0\u2c16\0\u2c58\0\u2c9a"+
    "\0\u2cdc\0\u01ce\0\u01ce\0\u2d1e\0\u2d60\0\u2da2\0\u01ce\0\u2de4"+
    "\0\u01ce\0\u2e26\0\u01ce\0\u01ce\0\u01ce\0\u01ce\0\u01ce\0\u2e68"+
    "\0\u01ce\0\u2eaa\0\u2eec\0\u2f2e\0\u2f70\0\u2fb2\0\u01ce\0\u2ff4"+
    "\0\u3036\0\u01ce\0\u3078\0\u30ba\0\u01ce\0\u30fc\0\u313e\0\u01ce"+
    "\0\u01ce\0\u01ce\0\u01ce\0\u3180\0\u31c2\0\u3204\0\u3246\0\u3288"+
    "\0\u32ca\0\u330c\0\u334e\0\u3390\0\u33d2\0\u3414\0\u3456\0\u3498"+
    "\0\u34da\0\u351c\0\u355e\0\u35a0\0\u35e2\0\u3624\0\u3666\0\u36a8"+
    "\0\u36ea\0\u372c\0\u376e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[315];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\2\6\1\7\1\10\1\11\1\4\1\12"+
    "\1\13\1\14\1\15\1\16\2\11\1\15\2\13\1\17"+
    "\1\20\1\4\1\21\1\22\1\11\1\23\1\24\1\25"+
    "\1\26\1\27\1\11\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\11\1\43"+
    "\3\11\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72"+
    "\17\70\1\73\1\70\1\74\55\70\1\75\1\76\1\77"+
    "\20\75\1\4\1\100\55\75\104\0\1\6\103\0\1\101"+
    "\1\102\60\0\1\103\101\0\1\104\21\0\4\11\1\0"+
    "\1\11\1\0\5\11\4\0\30\11\34\0\1\105\1\106"+
    "\1\107\1\110\1\0\1\111\2\0\1\112\1\113\7\0"+
    "\1\110\21\0\1\111\36\0\2\114\1\107\1\110\4\0"+
    "\2\114\7\0\1\110\60\0\2\107\6\0\2\107\74\0"+
    "\1\115\51\0\1\116\1\117\12\0\1\120\1\121\1\122"+
    "\77\120\6\0\4\11\1\0\1\11\1\0\5\11\4\0"+
    "\1\11\1\123\6\11\1\124\17\11\32\0\4\11\1\0"+
    "\1\11\1\0\5\11\4\0\1\11\1\125\26\11\32\0"+
    "\4\11\1\0\1\11\1\0\5\11\4\0\2\11\1\126"+
    "\2\11\1\127\17\11\1\130\2\11\32\0\4\11\1\0"+
    "\1\11\1\0\5\11\4\0\16\11\1\131\11\11\32\0"+
    "\4\11\1\0\1\11\1\0\5\11\4\0\16\11\1\132"+
    "\11\11\32\0\4\11\1\0\1\11\1\0\5\11\4\0"+
    "\1\11\1\133\2\11\1\134\2\11\1\135\20\11\32\0"+
    "\4\11\1\0\1\11\1\0\5\11\4\0\3\11\1\136"+
    "\24\11\32\0\4\11\1\0\1\11\1\0\5\11\4\0"+
    "\7\11\1\137\2\11\1\140\1\141\5\11\1\142\6\11"+
    "\32\0\4\11\1\0\1\11\1\0\5\11\4\0\5\11"+
    "\1\143\6\11\1\144\13\11\32\0\4\11\1\0\1\11"+
    "\1\0\5\11\4\0\10\11\1\145\16\11\1\146\32\0"+
    "\4\11\1\0\1\11\1\0\5\11\4\0\1\11\1\147"+
    "\1\150\1\11\1\151\23\11\32\0\4\11\1\0\1\11"+
    "\1\0\5\11\4\0\16\11\1\152\11\11\32\0\4\11"+
    "\1\0\1\11\1\0\5\11\4\0\5\11\1\153\22\11"+
    "\32\0\4\11\1\0\1\11\1\0\5\11\4\0\1\11"+
    "\1\154\26\11\32\0\4\11\1\0\1\11\1\0\5\11"+
    "\4\0\1\11\1\155\1\11\1\156\24\11\32\0\4\11"+
    "\1\0\1\11\1\0\5\11\4\0\7\11\1\157\1\160"+
    "\17\11\32\0\4\11\1\0\1\11\1\0\5\11\4\0"+
    "\1\11\1\161\26\11\32\0\4\11\1\0\1\11\1\0"+
    "\5\11\4\0\4\11\1\162\23\11\112\0\1\163\101\0"+
    "\1\164\1\165\100\0\1\166\1\0\1\167\77\0\1\170"+
    "\101\0\1\171\5\0\1\172\73\0\1\173\6\0\1\174"+
    "\72\0\1\175\7\0\1\176\71\0\1\177\101\0\1\200"+
    "\13\0\1\70\2\0\17\70\1\0\1\70\1\0\55\70"+
    "\2\0\1\72\77\0\2\201\1\0\17\201\1\202\1\203"+
    "\1\204\1\201\1\205\4\201\1\206\2\201\1\207\2\201"+
    "\1\210\1\211\37\201\23\0\1\212\60\0\1\77\121\0"+
    "\1\213\1\214\1\215\1\0\1\216\4\0\1\217\2\0"+
    "\1\220\2\0\1\221\1\222\37\0\1\101\1\5\1\6"+
    "\77\101\5\102\1\223\74\102\10\0\1\105\1\106\1\107"+
    "\1\110\2\0\1\224\1\0\1\112\1\113\6\0\1\224"+
    "\1\110\60\0\2\106\1\107\1\110\4\0\2\106\7\0"+
    "\1\110\60\0\2\107\1\0\1\110\4\0\2\107\7\0"+
    "\1\110\60\0\2\225\2\0\1\226\3\0\2\225\54\0"+
    "\1\226\13\0\1\227\1\230\1\0\1\230\3\0\3\230"+
    "\4\0\1\230\2\0\2\230\1\0\1\230\5\0\1\230"+
    "\3\0\1\230\43\0\1\231\1\106\1\107\1\110\2\0"+
    "\1\224\1\0\2\231\6\0\1\224\1\110\60\0\1\112"+
    "\1\106\1\107\1\110\2\0\1\224\1\0\2\112\6\0"+
    "\1\224\1\110\52\0\1\122\105\0\4\11\1\0\1\11"+
    "\1\0\5\11\4\0\1\11\1\232\26\11\32\0\4\11"+
    "\1\0\1\11\1\0\5\11\4\0\3\11\1\233\24\11"+
    "\32\0\4\11\1\0\1\11\1\0\5\11\4\0\5\11"+
    "\1\234\22\11\32\0\4\11\1\0\1\11\1\0\5\11"+
    "\4\0\11\11\1\235\16\11\32\0\4\11\1\0\1\11"+
    "\1\0\5\11\4\0\16\11\1\236\11\11\32\0\4\11"+
    "\1\0\1\11\1\0\5\11\4\0\13\11\1\237\14\11"+
    "\32\0\4\11\1\0\1\11\1\0\5\11\4\0\13\11"+
    "\1\240\14\11\32\0\4\11\1\0\1\11\1\0\5\11"+
    "\4\0\2\11\1\241\25\11\32\0\4\11\1\0\1\11"+
    "\1\0\5\11\4\0\5\11\1\242\22\11\32\0\4\11"+
    "\1\0\1\11\1\0\5\11\4\0\11\11\1\243\16\11"+
    "\32\0\4\11\1\0\1\11\1\0\5\11\4\0\4\11"+
    "\1\244\23\11\32\0\4\11\1\0\1\11\1\0\5\11"+
    "\4\0\4\11\1\245\6\11\1\246\6\11\1\247\5\11"+
    "\32\0\4\11\1\0\1\11\1\0\5\11\4\0\1\11"+
    "\1\250\26\11\32\0\4\11\1\0\1\11\1\0\5\11"+
    "\4\0\22\11\1\251\3\11\1\252\1\11\32\0\4\11"+
    "\1\0\1\11\1\0\5\11\4\0\4\11\1\253\3\11"+
    "\1\254\17\11\32\0\4\11\1\0\1\11\1\0\5\11"+
    "\4\0\12\11\1\255\15\11\32\0\4\11\1\0\1\11"+
    "\1\0\5\11\4\0\13\11\1\256\14\11\32\0\4\11"+
    "\1\0\1\11\1\0\5\11\4\0\16\11\1\257\11\11"+
    "\32\0\4\11\1\0\1\11\1\0\5\11\4\0\15\11"+
    "\1\260\12\11\32\0\4\11\1\0\1\11\1\0\5\11"+
    "\4\0\10\11\1\261\17\11\32\0\4\11\1\0\1\11"+
    "\1\0\5\11\4\0\1\11\1\262\26\11\32\0\4\11"+
    "\1\0\1\11\1\0\5\11\4\0\2\11\1\263\25\11"+
    "\32\0\4\11\1\0\1\11\1\0\5\11\4\0\1\264"+
    "\27\11\32\0\4\11\1\0\1\11\1\0\5\11\4\0"+
    "\11\11\1\265\16\11\32\0\4\11\1\0\1\11\1\0"+
    "\5\11\4\0\2\11\1\266\7\11\1\267\15\11\32\0"+
    "\4\11\1\0\1\11\1\0\5\11\4\0\14\11\1\270"+
    "\13\11\32\0\4\11\1\0\1\11\1\0\5\11\4\0"+
    "\12\11\1\271\15\11\32\0\4\11\1\0\1\11\1\0"+
    "\5\11\4\0\12\11\1\272\15\11\32\0\4\11\1\0"+
    "\1\11\1\0\5\11\4\0\13\11\1\273\14\11\32\0"+
    "\4\11\1\0\1\11\1\0\5\11\4\0\12\11\1\274"+
    "\15\11\112\0\1\275\101\0\1\276\36\0\1\277\101\0"+
    "\1\300\101\0\1\301\101\0\1\302\101\0\1\303\101\0"+
    "\1\304\101\0\1\305\101\0\1\306\56\0\4\102\1\6"+
    "\1\223\74\102\10\0\2\225\6\0\2\225\70\0\1\227"+
    "\1\230\1\0\1\230\2\0\1\307\3\230\4\0\1\230"+
    "\1\0\1\307\2\230\1\0\1\230\5\0\1\230\3\0"+
    "\1\230\43\0\2\310\1\0\1\310\2\0\1\307\3\310"+
    "\4\0\1\310\1\0\1\307\2\310\1\0\1\310\5\0"+
    "\1\310\3\0\1\310\43\0\1\311\1\106\1\107\1\110"+
    "\2\0\1\224\1\0\2\311\6\0\1\224\1\110\56\0"+
    "\4\11\1\0\1\11\1\0\5\11\4\0\2\11\1\312"+
    "\25\11\32\0\4\11\1\0\1\11\1\0\5\11\4\0"+
    "\4\11\1\313\23\11\32\0\4\11\1\0\1\11\1\0"+
    "\5\11\4\0\22\11\1\314\5\11\32\0\4\11\1\0"+
    "\1\11\1\0\5\11\4\0\3\11\1\315\24\11\32\0"+
    "\4\11\1\0\1\11\1\0\5\11\4\0\24\11\1\316"+
    "\3\11\32\0\4\11\1\0\1\11\1\0\5\11\4\0"+
    "\3\11\1\317\24\11\32\0\4\11\1\0\1\11\1\0"+
    "\5\11\4\0\1\11\1\320\26\11\32\0\4\11\1\0"+
    "\1\11\1\0\5\11\4\0\2\11\1\321\25\11\32\0"+
    "\4\11\1\0\1\11\1\0\5\11\4\0\11\11\1\322"+
    "\1\11\1\323\14\11\32\0\4\11\1\0\1\11\1\0"+
    "\5\11\4\0\3\11\1\324\24\11\32\0\4\11\1\0"+
    "\1\11\1\0\5\11\4\0\10\11\1\325\17\11\32\0"+
    "\4\11\1\0\1\11\1\0\5\11\4\0\20\11\1\326"+
    "\7\11\32\0\4\11\1\0\1\11\1\0\5\11\4\0"+
    "\16\11\1\327\11\11\32\0\4\11\1\0\1\11\1\0"+
    "\5\11\4\0\12\11\1\330\15\11\32\0\4\11\1\0"+
    "\1\11\1\0\5\11\4\0\10\11\1\331\17\11\32\0"+
    "\4\11\1\0\1\11\1\0\5\11\4\0\5\11\1\332"+
    "\22\11\32\0\4\11\1\0\1\11\1\0\5\11\4\0"+
    "\3\11\1\333\24\11\32\0\4\11\1\0\1\11\1\0"+
    "\5\11\4\0\13\11\1\334\14\11\32\0\4\11\1\0"+
    "\1\11\1\0\5\11\4\0\16\11\1\335\11\11\32\0"+
    "\4\11\1\0\1\11\1\0\5\11\4\0\13\11\1\336"+
    "\14\11\32\0\4\11\1\0\1\11\1\0\5\11\4\0"+
    "\3\11\1\337\24\11\32\0\4\11\1\0\1\11\1\0"+
    "\5\11\4\0\3\11\1\340\24\11\32\0\4\11\1\0"+
    "\1\11\1\0\5\11\4\0\4\11\1\341\23\11\32\0"+
    "\4\11\1\0\1\11\1\0\5\11\4\0\11\11\1\342"+
    "\16\11\32\0\4\11\1\0\1\11\1\0\5\11\4\0"+
    "\2\11\1\343\25\11\32\0\4\11\1\0\1\11\1\0"+
    "\5\11\4\0\12\11\1\344\15\11\32\0\4\11\1\0"+
    "\1\11\1\0\5\11\4\0\4\11\1\345\23\11\32\0"+
    "\4\11\1\0\1\11\1\0\5\11\4\0\20\11\1\346"+
    "\7\11\32\0\4\11\1\0\1\11\1\0\5\11\4\0"+
    "\4\11\1\347\23\11\32\0\4\11\1\0\1\11\1\0"+
    "\5\11\4\0\2\11\1\350\25\11\32\0\4\11\1\0"+
    "\1\11\1\0\5\11\4\0\13\11\1\351\14\11\32\0"+
    "\4\11\1\0\1\11\1\0\5\11\4\0\1\11\1\352"+
    "\26\11\32\0\4\11\1\0\1\11\1\0\5\11\4\0"+
    "\5\11\1\353\22\11\34\0\2\354\1\0\1\354\2\0"+
    "\1\307\3\354\4\0\1\354\1\0\1\307\2\354\1\0"+
    "\1\354\5\0\1\354\3\0\1\354\43\0\1\355\1\106"+
    "\1\107\1\110\2\0\1\224\1\0\2\355\6\0\1\224"+
    "\1\110\56\0\4\11\1\0\1\11\1\0\5\11\4\0"+
    "\3\11\1\356\24\11\32\0\4\11\1\0\1\11\1\0"+
    "\5\11\4\0\23\11\1\357\4\11\32\0\4\11\1\0"+
    "\1\11\1\0\5\11\4\0\10\11\1\360\17\11\32\0"+
    "\4\11\1\0\1\11\1\0\5\11\4\0\13\11\1\361"+
    "\14\11\32\0\4\11\1\0\1\11\1\0\5\11\4\0"+
    "\12\11\1\362\15\11\32\0\4\11\1\0\1\11\1\0"+
    "\5\11\4\0\10\11\1\363\17\11\32\0\4\11\1\0"+
    "\1\11\1\0\5\11\4\0\11\11\1\364\16\11\32\0"+
    "\4\11\1\0\1\11\1\0\5\11\4\0\13\11\1\365"+
    "\14\11\32\0\4\11\1\0\1\11\1\0\5\11\4\0"+
    "\3\11\1\366\24\11\32\0\4\11\1\0\1\11\1\0"+
    "\5\11\4\0\1\11\1\367\26\11\32\0\4\11\1\0"+
    "\1\11\1\0\5\11\4\0\12\11\1\370\15\11\32\0"+
    "\4\11\1\0\1\11\1\0\5\11\4\0\6\11\1\371"+
    "\21\11\32\0\4\11\1\0\1\11\1\0\5\11\4\0"+
    "\6\11\1\372\21\11\32\0\4\11\1\0\1\11\1\0"+
    "\5\11\4\0\20\11\1\373\7\11\32\0\4\11\1\0"+
    "\1\11\1\0\5\11\4\0\13\11\1\374\14\11\32\0"+
    "\4\11\1\0\1\11\1\0\5\11\4\0\3\11\1\375"+
    "\24\11\32\0\4\11\1\0\1\11\1\0\5\11\4\0"+
    "\12\11\1\376\15\11\32\0\4\11\1\0\1\11\1\0"+
    "\5\11\4\0\22\11\1\377\5\11\32\0\4\11\1\0"+
    "\1\11\1\0\5\11\4\0\13\11\1\u0100\14\11\32\0"+
    "\4\11\1\0\1\11\1\0\5\11\4\0\16\11\1\u0101"+
    "\11\11\32\0\4\11\1\0\1\11\1\0\5\11\4\0"+
    "\3\11\1\u0102\24\11\32\0\4\11\1\0\1\11\1\0"+
    "\5\11\4\0\3\11\1\u0103\24\11\34\0\2\u0104\1\0"+
    "\1\u0104\2\0\1\307\3\u0104\4\0\1\u0104\1\0\1\307"+
    "\2\u0104\1\0\1\u0104\5\0\1\u0104\3\0\1\u0104\43\0"+
    "\1\u0105\1\106\1\107\1\110\2\0\1\224\1\0\2\u0105"+
    "\6\0\1\224\1\110\56\0\4\11\1\0\1\11\1\0"+
    "\5\11\4\0\4\11\1\u0106\23\11\32\0\4\11\1\0"+
    "\1\11\1\0\5\11\4\0\5\11\1\u0107\22\11\32\0"+
    "\4\11\1\0\1\11\1\0\5\11\4\0\5\11\1\u0108"+
    "\22\11\32\0\4\11\1\0\1\11\1\0\5\11\4\0"+
    "\5\11\1\u0109\22\11\32\0\4\11\1\0\1\11\1\0"+
    "\5\11\4\0\13\11\1\u010a\14\11\32\0\4\11\1\0"+
    "\1\11\1\0\5\11\4\0\20\11\1\u010b\7\11\32\0"+
    "\4\11\1\0\1\11\1\0\5\11\4\0\14\11\1\u010c"+
    "\13\11\32\0\4\11\1\0\1\11\1\0\5\11\4\0"+
    "\6\11\1\u010d\21\11\32\0\4\11\1\0\1\11\1\0"+
    "\5\11\4\0\13\11\1\u010e\14\11\32\0\4\11\1\0"+
    "\1\11\1\0\5\11\4\0\7\11\1\u010f\20\11\32\0"+
    "\4\11\1\0\1\11\1\0\5\11\4\0\3\11\1\u0110"+
    "\24\11\32\0\4\11\1\0\1\11\1\0\5\11\4\0"+
    "\6\11\1\u0111\21\11\32\0\4\11\1\0\1\11\1\0"+
    "\5\11\4\0\5\11\1\u0112\22\11\32\0\4\11\1\0"+
    "\1\11\1\0\5\11\4\0\12\11\1\u0113\15\11\32\0"+
    "\4\11\1\0\1\11\1\0\5\11\4\0\2\11\1\u0114"+
    "\25\11\34\0\2\u0115\1\0\1\u0115\2\0\1\307\3\u0115"+
    "\4\0\1\u0115\1\0\1\307\2\u0115\1\0\1\u0115\5\0"+
    "\1\u0115\3\0\1\u0115\43\0\1\u0116\1\106\1\107\1\110"+
    "\2\0\1\224\1\0\2\u0116\6\0\1\224\1\110\56\0"+
    "\4\11\1\0\1\11\1\0\5\11\4\0\5\11\1\u0117"+
    "\22\11\32\0\4\11\1\0\1\11\1\0\5\11\4\0"+
    "\16\11\1\u0118\11\11\32\0\4\11\1\0\1\11\1\0"+
    "\5\11\4\0\3\11\1\u0119\24\11\32\0\4\11\1\0"+
    "\1\11\1\0\5\11\4\0\14\11\1\u011a\13\11\32\0"+
    "\4\11\1\0\1\11\1\0\5\11\4\0\3\11\1\u011b"+
    "\24\11\32\0\4\11\1\0\1\11\1\0\5\11\4\0"+
    "\2\11\1\u011c\25\11\32\0\4\11\1\0\1\11\1\0"+
    "\5\11\4\0\13\11\1\u011d\14\11\34\0\2\u011e\1\0"+
    "\1\u011e\2\0\1\307\3\u011e\4\0\1\u011e\1\0\1\307"+
    "\2\u011e\1\0\1\u011e\5\0\1\u011e\3\0\1\u011e\43\0"+
    "\1\u011f\1\106\1\107\1\110\2\0\1\224\1\0\2\u011f"+
    "\6\0\1\224\1\110\56\0\4\11\1\0\1\11\1\0"+
    "\5\11\4\0\3\11\1\u0120\24\11\32\0\4\11\1\0"+
    "\1\11\1\0\5\11\4\0\10\11\1\u0121\17\11\32\0"+
    "\4\11\1\0\1\11\1\0\5\11\4\0\20\11\1\u0122"+
    "\7\11\32\0\4\11\1\0\1\11\1\0\5\11\4\0"+
    "\3\11\1\u0123\24\11\34\0\2\u0124\1\0\1\u0124\2\0"+
    "\1\307\3\u0124\4\0\1\u0124\1\0\1\307\2\u0124\1\0"+
    "\1\u0124\5\0\1\u0124\3\0\1\u0124\43\0\1\u0125\1\106"+
    "\1\107\1\110\2\0\1\224\1\0\2\u0125\6\0\1\224"+
    "\1\110\60\0\2\u0126\1\0\1\u0126\2\0\1\307\3\u0126"+
    "\4\0\1\u0126\1\0\1\307\2\u0126\1\0\1\u0126\5\0"+
    "\1\u0126\3\0\1\u0126\43\0\1\u0127\1\106\1\107\1\110"+
    "\2\0\1\224\1\0\2\u0127\6\0\1\224\1\110\60\0"+
    "\2\u0128\1\0\1\u0128\2\0\1\307\3\u0128\4\0\1\u0128"+
    "\1\0\1\307\2\u0128\1\0\1\u0128\5\0\1\u0128\3\0"+
    "\1\u0128\43\0\1\u0129\1\106\1\107\1\110\2\0\1\224"+
    "\1\0\2\u0129\6\0\1\224\1\110\60\0\2\u012a\1\0"+
    "\1\u012a\2\0\1\307\3\u012a\4\0\1\u012a\1\0\1\307"+
    "\2\u012a\1\0\1\u012a\5\0\1\u012a\3\0\1\u012a\43\0"+
    "\1\u012b\1\106\1\107\1\110\2\0\1\224\1\0\2\u012b"+
    "\6\0\1\224\1\110\60\0\2\u012c\1\0\1\u012c\2\0"+
    "\1\307\3\u012c\4\0\1\u012c\1\0\1\307\2\u012c\1\0"+
    "\1\u012c\5\0\1\u012c\3\0\1\u012c\43\0\1\u012d\1\106"+
    "\1\107\1\110\2\0\1\224\1\0\2\u012d\6\0\1\224"+
    "\1\110\60\0\2\u012e\1\0\1\u012e\2\0\1\307\3\u012e"+
    "\4\0\1\u012e\1\0\1\307\2\u012e\1\0\1\u012e\5\0"+
    "\1\u012e\3\0\1\u012e\43\0\1\u012f\1\106\1\107\1\110"+
    "\2\0\1\224\1\0\2\u012f\6\0\1\224\1\110\60\0"+
    "\2\u0130\1\0\1\u0130\2\0\1\307\3\u0130\4\0\1\u0130"+
    "\1\0\1\307\2\u0130\1\0\1\u0130\5\0\1\u0130\3\0"+
    "\1\u0130\43\0\1\u0131\1\106\1\107\1\110\2\0\1\224"+
    "\1\0\2\u0131\6\0\1\224\1\110\60\0\2\u0132\1\0"+
    "\1\u0132\2\0\1\307\3\u0132\4\0\1\u0132\1\0\1\307"+
    "\2\u0132\1\0\1\u0132\5\0\1\u0132\3\0\1\u0132\43\0"+
    "\1\u0133\1\106\1\107\1\110\2\0\1\224\1\0\2\u0133"+
    "\6\0\1\224\1\110\60\0\2\u0134\1\0\1\u0134\2\0"+
    "\1\307\3\u0134\4\0\1\u0134\1\0\1\307\2\u0134\1\0"+
    "\1\u0134\5\0\1\u0134\3\0\1\u0134\43\0\1\u0135\1\106"+
    "\1\107\1\110\2\0\1\224\1\0\2\u0135\6\0\1\224"+
    "\1\110\60\0\2\u0136\1\0\1\u0136\2\0\1\307\3\u0136"+
    "\4\0\1\u0136\1\0\1\307\2\u0136\1\0\1\u0136\5\0"+
    "\1\u0136\3\0\1\u0136\43\0\1\u0137\1\106\1\107\1\110"+
    "\2\0\1\224\1\0\2\u0137\6\0\1\224\1\110\66\0"+
    "\1\307\11\0\1\307\61\0\1\u0138\1\106\1\107\1\110"+
    "\2\0\1\224\1\0\2\u0138\6\0\1\224\1\110\60\0"+
    "\1\u0139\1\106\1\107\1\110\2\0\1\224\1\0\2\u0139"+
    "\6\0\1\224\1\110\60\0\1\u013a\1\106\1\107\1\110"+
    "\2\0\1\224\1\0\2\u013a\6\0\1\224\1\110\60\0"+
    "\1\u013b\1\106\1\107\1\110\2\0\1\224\1\0\2\u013b"+
    "\6\0\1\224\1\110\60\0\2\106\1\107\1\110\2\0"+
    "\1\224\1\0\2\106\6\0\1\224\1\110\50\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14256];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\10\1\2\11\23\1\10\11"+
    "\4\1\2\11\5\1\1\11\2\1\2\11\3\1\1\11"+
    "\2\1\1\0\2\11\3\1\2\0\3\1\3\11\1\0"+
    "\1\1\1\11\40\1\2\11\1\1\1\11\1\1\23\11"+
    "\11\0\1\11\1\1\3\0\44\1\13\11\1\0\43\1"+
    "\1\0\27\1\1\0\20\1\1\0\10\1\1\0\5\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[315];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  StringBuffer string = new StringBuffer();
  
  private Symbol symbol(int type) {
    return new JavaSymbol(type, yyline+1, yycolumn+1, yytext());
  }

  private Symbol symbol(int type, Object value) {
    return new JavaSymbol(type, yyline+1, yycolumn+1, yytext(), value);
  }

  public String current_lexeme(){
    int l = yyline+1;
    int c = yycolumn+1;
    return " (line: "+l+" , column: "+c+" , lexeme: '"+yytext()+"')";
  }

  private long parseLong(int start, int end, int radix) {
    long result = 0;
    long digit;

    for (int i = start; i < end; i++) {
      digit  = Character.digit(yycharat(i),radix);
      result*= radix;
      result+= digit;
    }

    return result;
  }
public int getLine(){return yyline;}

public int getColumn(){return yycolumn;}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2234) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 45: 
          { return symbol(GTEQ);
          }
        case 115: break;
        case 39: 
          { return symbol(MINUS_EQ);
          }
        case 116: break;
        case 20: 
          { return symbol(GT);
          }
        case 117: break;
        case 50: 
          { return symbol(AT_EQ);
          }
        case 118: break;
        case 49: 
          { return symbol(NOTEQ);
          }
        case 119: break;
        case 102: 
          { return symbol(SIGNED);
          }
        case 120: break;
        case 56: 
          { return symbol(MOD_EQ);
          }
        case 121: break;
        case 9: 
          { yybegin(STRING); string.setLength(0);
          }
        case 122: break;
        case 13: 
          { return symbol(LBRACE);
          }
        case 123: break;
        case 19: 
          { return symbol(EQ);
          }
        case 124: break;
        case 111: 
          { return symbol(CONTINUE);
          }
        case 125: break;
        case 104: 
          { return symbol(STATIC);
          }
        case 126: break;
        case 43: 
          { return symbol(DO);
          }
        case 127: break;
        case 48: 
          { return symbol(LT_LT);
          }
        case 128: break;
        case 114: 
          { return symbol(VOLATILE);
          }
        case 129: break;
        case 35: 
          { return symbol(MULT_EQ);
          }
        case 130: break;
        case 21: 
          { return symbol(LT);
          }
        case 131: break;
        case 65: 
          { string.append( '\t' );
          }
        case 132: break;
        case 107: 
          { return symbol(PUBLIC);
          }
        case 133: break;
        case 52: 
          { return symbol(OR_EQ);
          }
        case 134: break;
        case 79: 
          { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, new Character('\t'));
          }
        case 135: break;
        case 108: 
          { return symbol(BOOLEAN);
          }
        case 136: break;
        case 95: 
          { return symbol(SHORT);
          }
        case 137: break;
        case 10: 
          { yybegin(CHARLITERAL);
          }
        case 138: break;
        case 44: 
          { return symbol(EQEQ);
          }
        case 139: break;
        case 89: 
          { return symbol(BOOLEAN_LITERAL, new Boolean(true));
          }
        case 140: break;
        case 81: 
          { return symbol(LONG);
          }
        case 141: break;
        case 26: 
          { return symbol(PLUS);
          }
        case 142: break;
        case 63: 
          { string.append( '\n' );
          }
        case 143: break;
        case 68: 
          { return symbol(OCT_LITERAL, new Integer(yytext()));
          }
        case 144: break;
        case 72: 
          { return symbol(LT_LT_EQ);
          }
        case 145: break;
        case 12: 
          { return symbol(RPAREN);
          }
        case 146: break;
        case 94: 
          { return symbol(CONST);
          }
        case 147: break;
        case 84: 
          { return symbol(AUTO);
          }
        case 148: break;
        case 77: 
          { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, new Character('\n'));
          }
        case 149: break;
        case 6: 
          { return symbol(HEX_LITERAL, new Integer(yytext()));
          }
        case 150: break;
        case 83: 
          { return symbol(ENUM);
          }
        case 151: break;
        case 40: 
          { return symbol(POINTER);
          }
        case 152: break;
        case 41: 
          { return symbol(ETIQUETA);
          }
        case 153: break;
        case 91: 
          { return symbol(GOTO);
          }
        case 154: break;
        case 70: 
          { return symbol(FOR);
          }
        case 155: break;
        case 36: 
          { return symbol(FLOATING_POINT_LITERAL, new Float(yytext().substring(0,yylength())));
          }
        case 156: break;
        case 1: 
          { return symbol(ERROR, yytext());
          }
        case 157: break;
        case 110: 
          { return symbol(DEFAULT);
          }
        case 158: break;
        case 23: 
          { return symbol(QUESTION);
          }
        case 159: break;
        case 3: 
          { return symbol(DIV);
          }
        case 160: break;
        case 87: 
          { return symbol(CHAR);
          }
        case 161: break;
        case 71: 
          { return symbol(GT_GT_EQ);
          }
        case 162: break;
        case 42: 
          { return symbol(IF);
          }
        case 163: break;
        case 28: 
          { return symbol(UP);
          }
        case 164: break;
        case 5: 
          { return symbol(IDENTIFIER, yytext());
          }
        case 165: break;
        case 58: 
          { throw new RuntimeException("Illegal escape sequence \""+yytext()+"\"");
          }
        case 166: break;
        case 106: 
          { return symbol(SWITCH);
          }
        case 167: break;
        case 27: 
          { return symbol(MOD);
          }
        case 168: break;
        case 54: 
          { return symbol(PLUS_EQ);
          }
        case 169: break;
        case 11: 
          { return symbol(LPAREN);
          }
        case 170: break;
        case 64: 
          { string.append( '\r' );
          }
        case 171: break;
        case 93: 
          { return symbol(BREAK);
          }
        case 172: break;
        case 85: 
          { return symbol(NULL_LITERAL);
          }
        case 173: break;
        case 62: 
          { string.append( '\b' );
          }
        case 174: break;
        case 100: 
          { return symbol(EXTERN);
          }
        case 175: break;
        case 78: 
          { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, new Character('\r'));
          }
        case 176: break;
        case 76: 
          { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, new Character('\b'));
          }
        case 177: break;
        case 38: 
          { return symbol(MINUS_MINUS);
          }
        case 178: break;
        case 31: 
          { throw new RuntimeException("Unterminated string at end of line");
          }
        case 179: break;
        case 109: 
          { return symbol(TYPEDEF);
          }
        case 180: break;
        case 59: 
          { string.append( '\"' );
          }
        case 181: break;
        case 16: 
          { return symbol(RBRACK);
          }
        case 182: break;
        case 17: 
          { return symbol(SEMICOLON);
          }
        case 183: break;
        case 37: 
          { return symbol(INTEGER_LITERAL, new Integer(yytext()));
          }
        case 184: break;
        case 73: 
          { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, new Character('\"'));
          }
        case 185: break;
        case 60: 
          { string.append( '\'' );
          }
        case 186: break;
        case 96: 
          { return symbol(FLOAT);
          }
        case 187: break;
        case 61: 
          { string.append( '\\' );
          }
        case 188: break;
        case 99: 
          { return symbol(WRITE);
          }
        case 189: break;
        case 86: 
          { return symbol(CASE);
          }
        case 190: break;
        case 8: 
          { return symbol(MINUS);
          }
        case 191: break;
        case 74: 
          { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, new Character('\''));
          }
        case 192: break;
        case 7: 
          { return symbol(DOT);
          }
        case 193: break;
        case 55: 
          { return symbol(PLUS_PLUS);
          }
        case 194: break;
        case 112: 
          { return symbol(REGISTER);
          }
        case 195: break;
        case 92: 
          { return symbol(MAIN);
          }
        case 196: break;
        case 75: 
          { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, new Character('\\'));
          }
        case 197: break;
        case 29: 
          { return symbol(TOS);
          }
        case 198: break;
        case 69: 
          { return symbol(INT);
          }
        case 199: break;
        case 34: 
          { return symbol(DIV_EQ);
          }
        case 200: break;
        case 24: 
          { return symbol(COLON);
          }
        case 201: break;
        case 47: 
          { return symbol(LTEQ);
          }
        case 202: break;
        case 113: 
          { return symbol(UNSIGNED);
          }
        case 203: break;
        case 103: 
          { return symbol(SIZEOF);
          }
        case 204: break;
        case 66: 
          { string.append( '\f' );
          }
        case 205: break;
        case 90: 
          { return symbol(VOID);
          }
        case 206: break;
        case 22: 
          { return symbol(NOT);
          }
        case 207: break;
        case 32: 
          { yybegin(YYINITIAL); return symbol(STRING_LITERAL, string.toString());
          }
        case 208: break;
        case 14: 
          { return symbol(RBRACE);
          }
        case 209: break;
        case 80: 
          { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, new Character('\f'));
          }
        case 210: break;
        case 46: 
          { return symbol(GT_GT);
          }
        case 211: break;
        case 57: 
          { return symbol(UP_EQ);
          }
        case 212: break;
        case 4: 
          { return symbol(MULT);
          }
        case 213: break;
        case 2: 
          { /* ignore */
          }
        case 214: break;
        case 25: 
          { return symbol(AT);
          }
        case 215: break;
        case 88: 
          { return symbol(READ);
          }
        case 216: break;
        case 15: 
          { return symbol(LBRACK);
          }
        case 217: break;
        case 53: 
          { return symbol(OROR);
          }
        case 218: break;
        case 105: 
          { return symbol(STRUCT);
          }
        case 219: break;
        case 30: 
          { string.append( yytext() );
          }
        case 220: break;
        case 97: 
          { return symbol(BOOLEAN_LITERAL, new Boolean(false));
          }
        case 221: break;
        case 51: 
          { return symbol(ANDAND);
          }
        case 222: break;
        case 98: 
          { return symbol(WHILE);
          }
        case 223: break;
        case 33: 
          { throw new RuntimeException("Unterminated character literal at end of line");
          }
        case 224: break;
        case 82: 
          { return symbol(ELSE);
          }
        case 225: break;
        case 67: 
          { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, new Character(yytext().charAt(0)));
          }
        case 226: break;
        case 18: 
          { return symbol(COMMA);
          }
        case 227: break;
        case 101: 
          { return symbol(RETURN);
          }
        case 228: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Scanner <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        Scanner scanner = null;
        try {
          scanner = new Scanner( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}

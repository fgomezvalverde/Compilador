/* The following code was generated by JFlex 1.4.3 on 5/15/14 12:41 PM */

package analizador_lexico;
import static Token.Token.*;
import Token.Token;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 5/15/14 12:41 PM from the specification file
 * <tt>C:/Users/Fabian/Documents/GitHub/Compilador/Analizador_Lexico/src/analizador_lexico/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\16\1\3\1\2\1\0\1\3\1\1\16\16\4\0\1\3\1\65"+
    "\1\32\1\34\1\15\1\61\1\66\1\0\1\35\1\36\1\5\1\57"+
    "\1\6\1\60\1\31\1\4\1\17\10\20\1\24\1\0\1\33\1\63"+
    "\1\62\1\64\2\0\2\23\1\7\1\23\1\27\1\23\24\15\1\71"+
    "\1\0\1\72\1\61\1\15\1\0\1\10\1\40\1\12\1\45\1\14"+
    "\1\46\1\51\1\43\1\44\1\15\1\41\1\47\1\50\1\30\1\26"+
    "\1\55\1\15\1\11\1\42\1\13\1\37\1\56\1\53\1\25\1\54"+
    "\1\52\1\6\1\67\1\6\1\70\41\16\2\0\4\15\4\0\1\15"+
    "\2\0\1\16\7\0\1\15\4\0\1\15\5\0\27\15\1\0\37\15"+
    "\1\0\u01ca\15\4\0\14\15\16\0\5\15\7\0\1\15\1\0\1\15"+
    "\21\0\160\16\5\15\1\0\2\15\2\0\4\15\10\0\1\15\1\0"+
    "\3\15\1\0\1\15\1\0\24\15\1\0\123\15\1\0\213\15\1\0"+
    "\5\16\2\0\236\15\11\0\46\15\2\0\1\15\7\0\47\15\11\0"+
    "\55\16\1\0\1\16\1\0\2\16\1\0\2\16\1\0\1\16\10\0"+
    "\33\15\5\0\3\15\15\0\4\16\7\0\1\15\4\0\13\16\5\0"+
    "\53\15\37\16\4\0\2\15\1\16\143\15\1\0\1\15\10\16\1\0"+
    "\6\16\2\15\2\16\1\0\4\16\2\15\12\16\3\15\2\0\1\15"+
    "\17\0\1\16\1\15\1\16\36\15\33\16\2\0\131\15\13\16\1\15"+
    "\16\0\12\16\41\15\11\16\2\15\4\0\1\15\5\0\26\15\4\16"+
    "\1\15\11\16\1\15\3\16\1\15\5\16\22\0\31\15\3\16\244\0"+
    "\4\16\66\15\3\16\1\15\22\16\1\15\7\16\12\15\2\16\2\0"+
    "\12\16\1\0\7\15\1\0\7\15\1\0\3\16\1\0\10\15\2\0"+
    "\2\15\2\0\26\15\1\0\7\15\1\0\1\15\3\0\4\15\2\0"+
    "\1\16\1\15\7\16\2\0\2\16\2\0\3\16\1\15\10\0\1\16"+
    "\4\0\2\15\1\0\3\15\2\16\2\0\12\16\4\15\7\0\1\15"+
    "\5\0\3\16\1\0\6\15\4\0\2\15\2\0\26\15\1\0\7\15"+
    "\1\0\2\15\1\0\2\15\1\0\2\15\2\0\1\16\1\0\5\16"+
    "\4\0\2\16\2\0\3\16\3\0\1\16\7\0\4\15\1\0\1\15"+
    "\7\0\14\16\3\15\1\16\13\0\3\16\1\0\11\15\1\0\3\15"+
    "\1\0\26\15\1\0\7\15\1\0\2\15\1\0\5\15\2\0\1\16"+
    "\1\15\10\16\1\0\3\16\1\0\3\16\2\0\1\15\17\0\2\15"+
    "\2\16\2\0\12\16\1\0\1\15\17\0\3\16\1\0\10\15\2\0"+
    "\2\15\2\0\26\15\1\0\7\15\1\0\2\15\1\0\5\15\2\0"+
    "\1\16\1\15\7\16\2\0\2\16\2\0\3\16\10\0\2\16\4\0"+
    "\2\15\1\0\3\15\2\16\2\0\12\16\1\0\1\15\20\0\1\16"+
    "\1\15\1\0\6\15\3\0\3\15\1\0\4\15\3\0\2\15\1\0"+
    "\1\15\1\0\2\15\3\0\2\15\3\0\3\15\3\0\14\15\4\0"+
    "\5\16\3\0\3\16\1\0\4\16\2\0\1\15\6\0\1\16\16\0"+
    "\12\16\11\0\1\15\7\0\3\16\1\0\10\15\1\0\3\15\1\0"+
    "\27\15\1\0\12\15\1\0\5\15\3\0\1\15\7\16\1\0\3\16"+
    "\1\0\4\16\7\0\2\16\1\0\2\15\6\0\2\15\2\16\2\0"+
    "\12\16\22\0\2\16\1\0\10\15\1\0\3\15\1\0\27\15\1\0"+
    "\12\15\1\0\5\15\2\0\1\16\1\15\7\16\1\0\3\16\1\0"+
    "\4\16\7\0\2\16\7\0\1\15\1\0\2\15\2\16\2\0\12\16"+
    "\1\0\2\15\17\0\2\16\1\0\10\15\1\0\3\15\1\0\51\15"+
    "\2\0\1\15\7\16\1\0\3\16\1\0\4\16\1\15\10\0\1\16"+
    "\10\0\2\15\2\16\2\0\12\16\12\0\6\15\2\0\2\16\1\0"+
    "\22\15\3\0\30\15\1\0\11\15\1\0\1\15\2\0\7\15\3\0"+
    "\1\16\4\0\6\16\1\0\1\16\1\0\10\16\22\0\2\16\15\0"+
    "\60\15\1\16\2\15\7\16\4\0\10\15\10\16\1\0\12\16\47\0"+
    "\2\15\1\0\1\15\2\0\2\15\1\0\1\15\2\0\1\15\6\0"+
    "\4\15\1\0\7\15\1\0\3\15\1\0\1\15\1\0\1\15\2\0"+
    "\2\15\1\0\4\15\1\16\2\15\6\16\1\0\2\16\1\15\2\0"+
    "\5\15\1\0\1\15\1\0\6\16\2\0\12\16\2\0\2\15\42\0"+
    "\1\15\27\0\2\16\6\0\12\16\13\0\1\16\1\0\1\16\1\0"+
    "\1\16\4\0\2\16\10\15\1\0\44\15\4\0\24\16\1\0\2\16"+
    "\5\15\13\16\1\0\44\16\11\0\1\16\71\0\53\15\24\16\1\15"+
    "\12\16\6\0\6\15\4\16\4\15\3\16\1\15\3\16\2\15\7\16"+
    "\3\15\4\16\15\15\14\16\1\15\17\16\2\0\46\15\12\0\53\15"+
    "\1\0\1\15\3\0\u0149\15\1\0\4\15\2\0\7\15\1\0\1\15"+
    "\1\0\4\15\2\0\51\15\1\0\4\15\2\0\41\15\1\0\4\15"+
    "\2\0\7\15\1\0\1\15\1\0\4\15\2\0\17\15\1\0\71\15"+
    "\1\0\4\15\2\0\103\15\2\0\3\16\40\0\20\15\20\0\125\15"+
    "\14\0\u026c\15\2\0\21\15\1\0\32\15\5\0\113\15\3\0\3\15"+
    "\17\0\15\15\1\0\4\15\3\16\13\0\22\15\3\16\13\0\22\15"+
    "\2\16\14\0\15\15\1\0\3\15\1\0\2\16\14\0\64\15\40\16"+
    "\3\0\1\15\3\0\2\15\1\16\2\0\12\16\41\0\3\16\2\0"+
    "\12\16\6\0\130\15\10\0\51\15\1\16\1\15\5\0\106\15\12\0"+
    "\35\15\3\0\14\16\4\0\14\16\12\0\12\16\36\15\2\0\5\15"+
    "\13\0\54\15\4\0\21\16\7\15\2\16\6\0\12\16\46\0\27\15"+
    "\5\16\4\0\65\15\12\16\1\0\35\16\2\0\13\16\6\0\12\16"+
    "\15\0\1\15\130\0\5\16\57\15\21\16\7\15\4\0\12\16\21\0"+
    "\11\16\14\0\3\16\36\15\12\16\3\0\2\15\12\16\6\0\46\15"+
    "\16\16\14\0\44\15\24\16\10\0\12\16\3\0\3\15\12\16\44\15"+
    "\122\0\3\16\1\0\25\16\4\15\1\16\4\15\1\16\15\0\300\15"+
    "\47\16\25\0\4\16\u0116\15\2\0\6\15\2\0\46\15\2\0\6\15"+
    "\2\0\10\15\1\0\1\15\1\0\1\15\1\0\1\15\1\0\37\15"+
    "\2\0\65\15\1\0\7\15\1\0\1\15\3\0\3\15\1\0\7\15"+
    "\3\0\4\15\2\0\6\15\4\0\15\15\5\0\3\15\1\0\7\15"+
    "\16\0\5\16\15\0\1\21\14\0\5\16\4\0\1\22\13\0\2\15"+
    "\23\0\1\15\13\0\5\16\5\0\6\16\1\0\1\15\15\0\1\15"+
    "\20\0\15\15\3\0\32\15\26\0\15\16\4\0\1\16\3\0\14\16"+
    "\21\0\1\15\4\0\1\15\2\0\12\15\1\0\1\15\3\0\5\15"+
    "\6\0\1\15\1\0\1\15\1\0\1\15\1\0\4\15\1\0\13\15"+
    "\2\0\4\15\5\0\5\15\4\0\1\15\21\0\51\15\u0a77\0\57\15"+
    "\1\0\57\15\1\0\205\15\6\0\4\15\3\16\16\0\46\15\12\0"+
    "\66\15\11\0\1\15\17\0\1\16\27\15\11\0\7\15\1\0\7\15"+
    "\1\0\7\15\1\0\7\15\1\0\7\15\1\0\7\15\1\0\7\15"+
    "\1\0\7\15\1\0\40\16\57\0\1\15\u01d5\0\3\15\31\0\11\15"+
    "\6\16\1\0\5\15\2\0\5\15\4\0\126\15\2\0\2\16\2\0"+
    "\3\15\1\0\132\15\1\0\4\15\5\0\51\15\3\0\136\15\21\0"+
    "\33\15\65\0\20\15\u0200\0\u19b6\15\112\0\u51cc\15\64\0\u048d\15\103\0"+
    "\56\15\2\0\u010d\15\3\0\20\15\12\16\2\15\24\0\57\15\1\16"+
    "\14\0\2\16\1\0\31\15\10\0\120\15\2\16\45\0\11\15\2\0"+
    "\147\15\2\0\4\15\1\0\2\15\16\0\12\15\120\0\10\15\1\16"+
    "\3\15\1\16\4\15\1\16\27\15\5\16\20\0\1\15\7\0\64\15"+
    "\14\0\2\16\62\15\21\16\13\0\12\16\6\0\22\16\6\15\3\0"+
    "\1\15\4\0\12\16\34\15\10\16\2\0\27\15\15\16\14\0\35\15"+
    "\3\0\4\16\57\15\16\16\16\0\1\15\12\16\46\0\51\15\16\16"+
    "\11\0\3\15\1\16\10\15\2\16\2\0\12\16\6\0\27\15\3\0"+
    "\1\15\1\16\4\0\60\15\1\16\1\15\3\16\2\15\2\16\5\15"+
    "\2\16\1\15\1\16\1\15\30\0\3\15\43\0\6\15\2\0\6\15"+
    "\2\0\6\15\11\0\7\15\1\0\7\15\221\0\43\15\10\16\1\0"+
    "\2\16\2\0\12\16\6\0\u2ba4\15\14\0\27\15\4\0\61\15\u2104\0"+
    "\u012e\15\2\0\76\15\2\0\152\15\46\0\7\15\14\0\5\15\5\0"+
    "\1\15\1\16\12\15\1\0\15\15\1\0\5\15\1\0\1\15\1\0"+
    "\2\15\1\0\2\15\1\0\154\15\41\0\u016b\15\22\0\100\15\2\0"+
    "\66\15\50\0\15\15\3\0\20\16\20\0\7\16\14\0\2\15\30\0"+
    "\3\15\31\0\1\15\6\0\5\15\1\0\207\15\2\0\1\16\4\0"+
    "\1\15\13\0\12\16\7\0\32\15\4\0\1\15\1\0\32\15\13\0"+
    "\131\15\3\0\6\15\2\0\6\15\2\0\6\15\2\0\3\15\3\0"+
    "\2\15\3\0\2\15\22\0\3\16\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\1\2\3\1\4\7\5\2\1\1\2"+
    "\1\5\3\2\1\4\12\5\1\2\7\3\1\2\2\0"+
    "\1\3\1\5\2\0\13\5\1\0\1\6\1\0\3\5"+
    "\2\0\2\5\2\0\2\7\1\0\1\1\7\5\1\10"+
    "\1\5\1\10\5\5\1\0\1\5\2\11\1\0\1\5"+
    "\1\0\13\5\1\6\2\0\2\5\2\0\1\5\1\11"+
    "\11\5\1\10\7\5\1\0\1\5\2\0\1\5\1\1"+
    "\5\5\1\6\2\5\3\0\11\5\1\10\5\5\1\0"+
    "\7\5\1\0\16\5\1\0\1\5\21\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[206];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\73\0\u0127\0\u0162"+
    "\0\u019d\0\u01d8\0\u0213\0\u024e\0\u0289\0\u02c4\0\u02ff\0\u033a"+
    "\0\u0375\0\u03b0\0\u03eb\0\u0426\0\u0461\0\u049c\0\u04d7\0\u0512"+
    "\0\u054d\0\u0588\0\u05c3\0\u05fe\0\u0639\0\u0674\0\u06af\0\u06ea"+
    "\0\u0725\0\u0760\0\u079b\0\u07d6\0\u0811\0\u084c\0\u0887\0\u08c2"+
    "\0\u08fd\0\u0938\0\73\0\u0973\0\u09ae\0\u09e9\0\u0a24\0\73"+
    "\0\u0a5f\0\u0a9a\0\u0ad5\0\u0b10\0\u0b4b\0\u0b86\0\u0bc1\0\u0bfc"+
    "\0\u0c37\0\u0c72\0\73\0\u0cad\0\u0ce8\0\u0d23\0\u0d5e\0\u0d99"+
    "\0\u0dd4\0\u0e0f\0\u0e4a\0\u0e85\0\u0426\0\u0ec0\0\73\0\u0461"+
    "\0\u0461\0\u0efb\0\u0f36\0\u0f71\0\u0fac\0\u0fe7\0\u1022\0\u105d"+
    "\0\u0289\0\u1098\0\u10d3\0\u110e\0\u1149\0\u1184\0\u11bf\0\u11fa"+
    "\0\u08c2\0\u08c2\0\u1235\0\73\0\u1270\0\u12ab\0\u12e6\0\u1321"+
    "\0\u135c\0\u1397\0\u13d2\0\u140d\0\u1448\0\u1483\0\u14be\0\u14f9"+
    "\0\u1534\0\u156f\0\u0c72\0\u15aa\0\u15e5\0\u1620\0\u165b\0\u1696"+
    "\0\u16d1\0\u170c\0\u0e85\0\u1747\0\u1782\0\u17bd\0\u17f8\0\u1833"+
    "\0\u186e\0\u18a9\0\u18e4\0\u191f\0\u195a\0\u1995\0\u19d0\0\u1a0b"+
    "\0\u1a46\0\u1a81\0\u1abc\0\u1af7\0\u1b32\0\u1b6d\0\u1ba8\0\u1be3"+
    "\0\u1c1e\0\u1c59\0\u1c94\0\u1ccf\0\u1d0a\0\u1d45\0\u1d80\0\u15aa"+
    "\0\u1dbb\0\u1df6\0\u1e31\0\u1e6c\0\u1ea7\0\u1ee2\0\u1f1d\0\u1f58"+
    "\0\u1f93\0\u1fce\0\u2009\0\u2044\0\u207f\0\u20ba\0\u20f5\0\u2130"+
    "\0\u216b\0\u21a6\0\u21e1\0\u1ba8\0\u221c\0\u2257\0\u2292\0\u22cd"+
    "\0\u2308\0\u2343\0\u237e\0\u23b9\0\u23f4\0\u242f\0\u246a\0\u24a5"+
    "\0\u24e0\0\u251b\0\u2556\0\u221c\0\u2591\0\u25cc\0\u2607\0\u2642"+
    "\0\u267d\0\u26b8\0\u26f3\0\u272e\0\u2769\0\u27a4\0\u27df\0\u281a"+
    "\0\u2855\0\u2890\0\u28cb\0\u2906\0\u2941\0\u297c\0\u29b7\0\u29f2"+
    "\0\u2a2d\0\u2a68\0\u2aa3\0\u2ade\0\u2b19\0\u2b54";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[206];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\2\1\16\1\17\1\20"+
    "\1\2\1\15\1\17\2\15\1\21\1\15\1\22\1\23"+
    "\1\6\1\24\1\25\1\6\1\26\1\27\1\15\1\30"+
    "\1\15\1\31\1\32\1\33\1\34\1\15\1\35\1\15"+
    "\1\36\2\15\1\37\1\40\1\41\2\42\1\43\1\44"+
    "\1\5\1\45\1\46\1\47\1\50\1\2\74\0\3\3"+
    "\73\0\1\51\1\52\54\0\1\53\17\0\1\54\6\15"+
    "\1\0\2\55\1\56\1\0\1\15\1\55\2\15\1\57"+
    "\1\15\2\0\1\60\3\0\20\15\3\0\1\53\17\0"+
    "\5\15\1\61\4\15\2\0\6\15\6\0\20\15\23\0"+
    "\12\15\2\0\6\15\6\0\1\62\17\15\23\0\5\15"+
    "\1\63\4\15\2\0\6\15\6\0\20\15\23\0\1\15"+
    "\1\64\10\15\2\0\3\15\1\65\2\15\6\0\4\15"+
    "\1\66\13\15\23\0\12\15\2\0\6\15\6\0\15\15"+
    "\1\67\2\15\23\0\12\15\2\0\2\15\1\70\2\15"+
    "\1\71\6\0\10\15\1\64\7\15\23\0\12\15\2\0"+
    "\6\15\6\0\20\15\33\0\2\17\3\0\1\17\1\72"+
    "\5\0\1\73\56\0\2\17\3\0\1\17\6\0\1\73"+
    "\56\0\1\74\62\0\12\15\2\0\5\15\1\75\6\0"+
    "\20\15\23\0\1\76\6\77\1\0\2\100\1\101\1\0"+
    "\1\77\1\100\2\77\1\102\1\77\2\0\1\103\3\0"+
    "\20\77\14\0\2\104\1\0\70\104\1\105\1\106\1\107"+
    "\70\105\1\110\2\0\33\110\1\111\34\110\7\0\12\15"+
    "\2\0\5\15\1\112\6\0\20\15\23\0\2\15\1\113"+
    "\7\15\2\0\6\15\6\0\20\15\23\0\4\15\1\114"+
    "\5\15\2\0\6\15\6\0\4\15\1\115\1\116\6\15"+
    "\1\117\3\15\23\0\12\15\2\0\5\15\1\120\6\0"+
    "\7\15\1\121\10\15\23\0\5\15\1\122\4\15\2\0"+
    "\3\15\1\123\2\15\6\0\20\15\23\0\12\15\2\0"+
    "\3\15\1\124\2\15\6\0\10\15\1\125\7\15\23\0"+
    "\12\15\2\0\3\15\1\126\2\15\6\0\20\15\23\0"+
    "\12\15\2\0\3\15\1\62\2\15\6\0\20\15\23\0"+
    "\12\15\2\0\6\15\6\0\4\15\1\127\13\15\23\0"+
    "\12\15\2\0\3\15\1\130\2\15\6\0\20\15\73\0"+
    "\1\53\2\0\1\53\70\0\1\53\1\0\1\53\1\0"+
    "\1\53\70\0\1\53\72\0\1\53\1\42\71\0\1\53"+
    "\1\0\1\53\15\0\1\54\6\15\1\0\2\55\1\56"+
    "\1\0\1\15\1\55\2\15\1\57\1\15\2\0\1\60"+
    "\3\0\20\15\3\0\1\53\3\0\1\53\66\0\1\53"+
    "\4\0\1\53\12\0\1\54\6\15\1\0\2\55\1\56"+
    "\1\0\1\15\1\55\2\15\1\57\1\15\2\0\1\60"+
    "\3\0\20\15\14\0\1\131\2\0\67\131\1\132\1\51"+
    "\1\133\1\134\70\51\5\135\1\0\65\135\7\0\5\15"+
    "\1\136\4\15\2\0\6\15\6\0\20\15\33\0\2\55"+
    "\3\0\1\55\6\0\1\60\56\0\1\137\62\0\12\15"+
    "\2\0\5\15\1\140\6\0\20\15\23\0\2\15\1\141"+
    "\7\15\2\0\6\15\6\0\20\15\23\0\4\15\1\142"+
    "\5\15\2\0\6\15\6\0\20\15\23\0\4\15\1\143"+
    "\5\15\2\0\6\15\6\0\12\15\1\144\5\15\23\0"+
    "\12\15\2\0\6\15\6\0\3\15\1\145\14\15\23\0"+
    "\12\15\2\0\5\15\1\146\6\0\20\15\23\0\1\15"+
    "\1\147\10\15\2\0\6\15\6\0\20\15\23\0\12\15"+
    "\2\0\6\15\6\0\16\15\1\150\1\15\23\0\4\15"+
    "\1\151\5\15\2\0\6\15\6\0\20\15\23\0\12\15"+
    "\2\0\6\15\6\0\1\152\17\15\23\0\2\153\1\0"+
    "\1\153\1\0\1\153\2\0\2\153\2\0\2\153\2\0"+
    "\1\153\10\0\1\153\4\0\2\153\46\0\1\154\2\0"+
    "\1\155\54\0\4\15\1\156\5\15\2\0\6\15\6\0"+
    "\20\15\23\0\5\77\1\157\4\77\2\0\6\77\6\0"+
    "\20\77\12\0\1\160\10\0\12\77\2\0\6\77\6\0"+
    "\20\77\12\0\1\160\20\0\2\100\3\0\1\100\6\0"+
    "\1\103\56\0\1\161\62\0\12\77\2\0\5\77\1\162"+
    "\6\0\20\77\12\0\1\160\72\0\1\160\1\0\2\104"+
    "\1\0\27\104\1\163\40\104\2\0\1\107\77\0\12\15"+
    "\2\0\6\15\6\0\3\15\1\164\1\15\1\165\12\15"+
    "\23\0\5\15\1\166\4\15\2\0\6\15\6\0\20\15"+
    "\23\0\1\15\1\167\1\170\7\15\2\0\6\15\6\0"+
    "\20\15\23\0\12\15\2\0\3\15\1\171\2\15\6\0"+
    "\20\15\23\0\12\15\2\0\6\15\6\0\12\15\1\172"+
    "\1\173\4\15\23\0\12\15\2\0\6\15\6\0\5\15"+
    "\1\174\12\15\23\0\4\15\1\175\5\15\2\0\6\15"+
    "\6\0\20\15\23\0\12\15\2\0\6\15\6\0\7\15"+
    "\1\176\10\15\23\0\12\15\2\0\6\15\6\0\1\177"+
    "\17\15\23\0\2\15\1\121\7\15\2\0\6\15\6\0"+
    "\20\15\23\0\12\15\2\0\3\15\1\200\2\15\6\0"+
    "\20\15\23\0\12\15\2\0\5\15\1\201\6\0\20\15"+
    "\23\0\12\15\2\0\6\15\6\0\5\15\1\202\12\15"+
    "\23\0\12\15\2\0\6\15\6\0\5\15\1\203\2\15"+
    "\1\204\7\15\16\0\1\134\70\0\5\135\1\205\65\135"+
    "\7\0\2\15\1\206\7\15\2\0\6\15\6\0\20\15"+
    "\36\0\1\207\2\0\1\210\54\0\4\15\1\211\5\15"+
    "\2\0\6\15\6\0\20\15\23\0\12\15\2\0\3\15"+
    "\1\212\2\15\6\0\20\15\23\0\12\15\2\0\3\15"+
    "\1\121\2\15\6\0\20\15\23\0\12\15\2\0\6\15"+
    "\6\0\1\213\17\15\23\0\12\15\2\0\6\15\6\0"+
    "\5\15\1\214\12\15\23\0\5\15\1\121\4\15\2\0"+
    "\6\15\6\0\20\15\23\0\4\15\1\215\5\15\2\0"+
    "\6\15\6\0\3\15\1\216\14\15\23\0\2\15\1\175"+
    "\7\15\2\0\6\15\6\0\20\15\23\0\5\15\1\217"+
    "\4\15\2\0\6\15\6\0\20\15\23\0\5\15\1\213"+
    "\4\15\2\0\6\15\6\0\20\15\23\0\12\15\2\0"+
    "\6\15\6\0\11\15\1\121\6\15\33\0\2\220\73\0"+
    "\1\72\60\0\5\15\1\221\4\15\2\0\6\15\6\0"+
    "\20\15\23\0\2\77\1\222\7\77\2\0\6\77\6\0"+
    "\20\77\12\0\1\160\10\0\7\223\5\0\1\223\1\0"+
    "\4\223\6\0\20\223\36\0\1\224\2\0\1\225\54\0"+
    "\4\77\1\226\5\77\2\0\6\77\6\0\20\77\12\0"+
    "\1\160\10\0\12\15\2\0\6\15\6\0\5\15\1\227"+
    "\12\15\23\0\12\15\2\0\3\15\1\230\2\15\6\0"+
    "\20\15\23\0\1\15\1\231\10\15\2\0\6\15\6\0"+
    "\20\15\23\0\4\15\1\232\5\15\2\0\6\15\6\0"+
    "\20\15\23\0\12\15\2\0\6\15\6\0\1\233\17\15"+
    "\23\0\2\15\1\120\7\15\2\0\6\15\6\0\20\15"+
    "\23\0\12\15\2\0\5\15\1\234\6\0\20\15\23\0"+
    "\5\15\1\235\4\15\2\0\6\15\6\0\20\15\23\0"+
    "\4\15\1\236\5\15\2\0\6\15\6\0\20\15\21\0"+
    "\1\237\1\0\12\15\2\0\6\15\6\0\20\15\23\0"+
    "\1\15\1\240\10\15\2\0\6\15\6\0\20\15\23\0"+
    "\12\15\2\0\6\15\6\0\1\15\1\241\16\15\23\0"+
    "\1\15\1\120\10\15\2\0\6\15\6\0\20\15\23\0"+
    "\12\15\2\0\6\15\6\0\12\15\1\175\5\15\23\0"+
    "\12\15\2\0\6\15\6\0\10\15\1\145\7\15\23\0"+
    "\12\15\2\0\6\15\6\0\6\15\1\121\11\15\23\0"+
    "\1\15\1\242\10\15\2\0\6\15\6\0\20\15\14\0"+
    "\4\135\1\134\1\205\65\135\7\0\12\15\2\0\3\15"+
    "\1\243\2\15\6\0\20\15\33\0\2\244\73\0\1\245"+
    "\60\0\5\15\1\246\4\15\2\0\6\15\6\0\20\15"+
    "\23\0\12\15\2\0\6\15\2\0\1\73\3\0\20\15"+
    "\23\0\2\15\1\230\7\15\2\0\6\15\6\0\20\15"+
    "\23\0\12\15\2\0\6\15\6\0\3\15\1\247\14\15"+
    "\23\0\12\15\2\0\6\15\6\0\5\15\1\250\12\15"+
    "\23\0\4\15\1\121\5\15\2\0\6\15\6\0\20\15"+
    "\23\0\12\15\2\0\6\15\6\0\6\15\1\251\11\15"+
    "\23\0\2\15\1\252\7\15\2\0\6\15\6\0\20\15"+
    "\23\0\12\77\2\0\3\77\1\253\2\77\6\0\20\77"+
    "\12\0\1\160\10\0\12\223\2\0\6\223\6\0\20\223"+
    "\13\0\1\103\17\0\2\254\73\0\1\255\60\0\5\77"+
    "\1\256\4\77\2\0\6\77\6\0\20\77\12\0\1\160"+
    "\10\0\12\15\2\0\6\15\6\0\12\15\1\172\5\15"+
    "\23\0\12\15\2\0\5\15\1\121\6\0\20\15\23\0"+
    "\12\15\2\0\6\15\6\0\2\15\1\121\15\15\23\0"+
    "\12\15\2\0\6\15\6\0\5\15\1\257\12\15\23\0"+
    "\3\15\1\216\6\15\2\0\6\15\6\0\20\15\23\0"+
    "\5\15\1\203\4\15\2\0\6\15\6\0\20\15\23\0"+
    "\12\15\2\0\3\15\1\260\2\15\6\0\20\15\23\0"+
    "\3\15\1\261\6\15\2\0\6\15\6\0\20\15\21\0"+
    "\1\237\74\0\12\15\2\0\6\15\6\0\1\262\17\15"+
    "\23\0\12\15\2\0\6\15\6\0\10\15\1\263\7\15"+
    "\23\0\4\15\1\127\5\15\2\0\6\15\6\0\20\15"+
    "\23\0\12\15\2\0\6\15\2\0\1\60\3\0\20\15"+
    "\23\0\2\264\1\0\1\264\1\0\1\264\2\0\2\264"+
    "\2\0\2\264\2\0\1\264\10\0\1\264\4\0\2\264"+
    "\33\0\2\15\1\265\7\15\2\0\6\15\6\0\20\15"+
    "\23\0\4\15\1\266\5\15\2\0\6\15\6\0\20\15"+
    "\23\0\12\15\2\0\5\15\1\267\6\0\20\15\23\0"+
    "\5\15\1\260\4\15\2\0\6\15\6\0\20\15\23\0"+
    "\12\15\2\0\3\15\1\270\2\15\6\0\20\15\23\0"+
    "\12\77\2\0\6\77\2\0\1\103\3\0\20\77\12\0"+
    "\1\160\20\0\2\254\50\0\1\160\10\0\2\271\1\0"+
    "\1\271\1\0\1\271\2\0\2\271\2\0\2\271\2\0"+
    "\1\271\10\0\1\271\4\0\2\271\33\0\2\77\1\272"+
    "\7\77\2\0\6\77\6\0\20\77\12\0\1\160\10\0"+
    "\3\15\1\121\6\15\2\0\6\15\6\0\20\15\23\0"+
    "\12\15\2\0\6\15\6\0\7\15\1\121\10\15\23\0"+
    "\12\15\2\0\6\15\6\0\4\15\1\121\13\15\23\0"+
    "\12\15\2\0\6\15\6\0\10\15\1\216\7\15\23\0"+
    "\5\15\1\175\4\15\2\0\6\15\6\0\20\15\23\0"+
    "\12\15\2\0\3\15\1\273\2\15\6\0\20\15\23\0"+
    "\5\15\1\124\4\15\2\0\6\15\6\0\20\15\23\0"+
    "\12\15\2\0\6\15\6\0\1\145\17\15\23\0\12\15"+
    "\2\0\6\15\1\274\5\0\20\15\23\0\2\271\1\0"+
    "\1\271\1\0\1\271\2\0\2\271\2\0\2\271\2\0"+
    "\1\271\10\0\1\271\4\0\2\271\22\0\1\160\10\0"+
    "\12\77\2\0\3\77\1\275\2\77\6\0\20\77\12\0"+
    "\1\160\10\0\12\15\2\0\6\15\1\276\5\0\20\15"+
    "\43\0\1\277\52\0\12\77\2\0\6\77\1\300\5\0"+
    "\20\77\12\0\1\160\30\0\1\301\73\0\1\302\71\0"+
    "\1\303\73\0\1\304\55\0\1\305\107\0\1\306\55\0"+
    "\1\307\73\0\1\310\71\0\1\311\73\0\1\312\67\0"+
    "\1\313\75\0\1\314\67\0\1\315\107\0\1\73\55\0"+
    "\1\316\107\0\1\60\72\0\1\103\44\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11151];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\3\1\1\11\42\1\2\0\1\11\1\1"+
    "\2\0\1\1\1\11\11\1\1\0\1\11\1\0\3\1"+
    "\2\0\2\1\2\0\1\1\1\11\1\0\20\1\1\0"+
    "\2\1\1\11\1\0\1\1\1\0\14\1\2\0\2\1"+
    "\2\0\23\1\1\0\1\1\2\0\12\1\3\0\17\1"+
    "\1\0\7\1\1\0\16\1\1\0\1\1\21\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[206];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
public String lexeme;   
public int linea;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2232) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 6: 
          { lexeme=yytext();linea = yyline; return LITERAL;
          }
        case 10: break;
        case 8: 
          { lexeme=yytext();linea = yyline; return PALABRA_RESERVADA;
          }
        case 11: break;
        case 7: 
          { lexeme=yytext();linea = yyline; return ETIQUETA;
          }
        case 12: break;
        case 4: 
          { lexeme=yytext();linea = yyline; return OTRO;
          }
        case 13: break;
        case 5: 
          { lexeme=yytext();linea = yyline; return IDENTIFICADOR;
          }
        case 14: break;
        case 3: 
          { lexeme=yytext();linea = yyline; return OPERADOR;
          }
        case 15: break;
        case 2: 
          { lexeme=yytext();linea = yyline;return ERROR;
          }
        case 16: break;
        case 9: 
          { lexeme=yytext();linea = yyline; return COMENTARIO;
          }
        case 17: break;
        case 1: 
          { 
          }
        case 18: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
